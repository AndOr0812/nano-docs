{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Nano Protocol Documentation \u00b6 Welcome! \ud83d\udc4b This documentation is focused on helping developers understand the Nano protocol, as well as setup, maintain and build on top of the Nano node. Details of how this documentation has been arranged are below: Section Details Audience What is Nano? Take a high level tour of Nano - this is a great place to start understanding the unique properties of the digital currency. All users, node operators, developers Running a Node Get up and running with a Nano node to manage the ledger, create and publish blocks and participate in consensus. Node operators, developers Integration Guides Learn practical concepts, structures and features for building wallets, payment systems and other services on the network. Developers Commands Explore an exhaustive list interaction methods for the node via RPC and CLI. Node operators, developers Protocol Design Dig deeper into the design and behaviors driving this amazing protocol including the election process, peering mechanics and more. Developers Releases Review past node releases and get details about the features coming soon in new releases. Everyone Join the Community If you are looking for other details about Nano, links to wallets, discussions about the network and more, check out our community: Nano.org | GitHub | Twitter | Discord | Reddit | Medium | Facebook | LinkedIn | YouTube | Instagram","title":"Home"},{"location":"#nano-protocol-documentation","text":"Welcome! \ud83d\udc4b This documentation is focused on helping developers understand the Nano protocol, as well as setup, maintain and build on top of the Nano node. Details of how this documentation has been arranged are below: Section Details Audience What is Nano? Take a high level tour of Nano - this is a great place to start understanding the unique properties of the digital currency. All users, node operators, developers Running a Node Get up and running with a Nano node to manage the ledger, create and publish blocks and participate in consensus. Node operators, developers Integration Guides Learn practical concepts, structures and features for building wallets, payment systems and other services on the network. Developers Commands Explore an exhaustive list interaction methods for the node via RPC and CLI. Node operators, developers Protocol Design Dig deeper into the design and behaviors driving this amazing protocol including the election process, peering mechanics and more. Developers Releases Review past node releases and get details about the features coming soon in new releases. Everyone Join the Community If you are looking for other details about Nano, links to wallets, discussions about the network and more, check out our community: Nano.org | GitHub | Twitter | Discord | Reddit | Medium | Facebook | LinkedIn | YouTube | Instagram","title":"Nano Protocol Documentation"},{"location":"glossary/","text":"account \u00b6 Refers to an address (starts with xrb_ or nano_ which are interchangeable) that you control the private keys of. An address is a reinterpretation of the 256-bit public key using BASE32 encoding and a checksum. active transaction \u00b6 A newly downloaded block to the node which enters into the voting process. ad hoc accounts \u00b6 Accounts not derived from a private seed which can be held in the node wallet through the wallet ID. These accounts are only recommended for use with advanced systems. announcement rounds \u00b6 A repeating 16 second cycle on the node during which votes are collected for active transactions in attempt to reach quorum. block hash \u00b6 A 64 character, uppercase hexadecimal string (0-9A-F) value representing a unique block on an account. Block Lattice \u00b6 The Block Lattice is a data-structure in which individual accounts control their own blockchain. This allows transactions to be added quickly without conflict and sent to the network for confirmation. bootstrap network \u00b6 A sub-network established between peers via Transmission Control Protocol (TCP) for managing bulk transmission of blocks. This is used on initial bootstrapping of peers and when out-of-sync peers attempt to fill large gaps in their ledgers. This is available within all Nano networks (main, beta and test networks). bootstrapping \u00b6 During initial sync, the nano_node requests old transactions to independently verify and populate its local ledger database. Bootstrapping will also occur when the nano_node becomes out of sync with the network. circulating supply \u00b6 133,248,290.903662 NANO election \u00b6 frontier \u00b6 The most recent block added to the account chain. Also called the head block. Can be either confirmed or unconfirmed. genesis \u00b6 head block \u00b6 See frontier inbound send \u00b6 A block with funds being transferred to an account owned by a wallet on your node live network \u00b6 A sub-network established between peers via User Datagram Protocol (UDP) for communicating newly published blocks, votes and other non-bootstrap related traffic. This is available within all Nano networks (main, beta and test networks). peers \u00b6 Nodes connected over the public internet to share Nano network data. pending \u00b6 A transaction state where a block sending funds was published and confirmed by the network, but a matching block receiving those funds has not yet been confirmed. Open Representative Voting (ORV) \u00b6 A consensus mechanism unique to Nano which involves accounts delegating their balance as voting weight to Representatives . The Representatives vote themselves on the validity of transactions published to the network using the voting weight delegated to them. These votes are shared with their directly connected peers and they also rebroadcast votes seen from Principal Representatives . Votes are tallied and once quorum is reached on a published block, it is considered confirmed by the network. Proof-of-Work (PoW) \u00b6 A Proof-of-Work is a piece of data which satisfies certain requirements and is difficult (costly, time-consuming) to produce, but easy for others to verify. In some systems this data is a central part of the security model used to protect against double-spends and other types of attacks, but with Nano it is only used to increase economic costs of spamming the network. quorum \u00b6 When the delta between the two successive blocks of a root is > 50% of the online voting weight Principal Representative \u00b6 A Nano account with >= 0.1% (133,248.290903662 NANO) voting weight delegated to it. When configured on a node which is online, the votes it produces will be rebroadcasted by other nodes to who receive them, helping the network reach consensus more quickly. Representative \u00b6 A Nano account with > 0 voting weight, but < 0.1% (133,248.290903662 NANO), delegated to it. Unlike Principal Representatives , when configured on a node which is online, the votes it produces and sends to directly connected peers won't be rebroadcasted by those peers. root \u00b6 The account if the block is the first block on the account, otherwise it is the previous hash included in the block. seed \u00b6 A 256-bit random value usually represented to the user as a 64 character hexidecimal (0-9 and A-F) value. Private keys are derived from a seed. unchecked (blocks) \u00b6 unopened account \u00b6 An account address that does not have a first block on it (which must be a block to receive Nano sent from another account, cannot be a block only changing the Representative). unpocketed \u00b6 See pending voting \u00b6 Each node configured with a Representative votes on every block by appending their Representative signature and a sequence number to the hash. These will be sent out to directly connected peers and if the vote originates from a Principal Representative , it will subsequently be rebroadcasted by nodes to their peers. voting weight \u00b6 The amount of weight delegated to a Representative . wallet \u00b6 A wallet is an organizational object in a nano_node that holds a single seed from which multiple accounts are deterministically derived via a uint32 index starting at 0. Private keys are derived from the seed and index as follows: k_{private} = blake2b(seed || index) k_{private} = blake2b(seed || index) WALLET_ID \u00b6 A 256-bit random value name/identifier for a specific wallet in the local nano_node database. The WALLET_ID is not stored anywhere in the network and is only used in the local nano_node. Even though a WALLET_ID looks identical to a seed, do not confuse the WALLET_ID with a seed; funds cannot be restored with a WALLET_ID. Do not backup the WALLET_ID as a means to backup funds. work peers \u00b6 Node peers which are configured to generate work for transactions at the originating nodes request.","title":"Glossary"},{"location":"glossary/#account","text":"Refers to an address (starts with xrb_ or nano_ which are interchangeable) that you control the private keys of. An address is a reinterpretation of the 256-bit public key using BASE32 encoding and a checksum.","title":"account"},{"location":"glossary/#active-transaction","text":"A newly downloaded block to the node which enters into the voting process.","title":"active transaction"},{"location":"glossary/#ad-hoc-accounts","text":"Accounts not derived from a private seed which can be held in the node wallet through the wallet ID. These accounts are only recommended for use with advanced systems.","title":"ad hoc accounts"},{"location":"glossary/#announcement-rounds","text":"A repeating 16 second cycle on the node during which votes are collected for active transactions in attempt to reach quorum.","title":"announcement rounds"},{"location":"glossary/#block-hash","text":"A 64 character, uppercase hexadecimal string (0-9A-F) value representing a unique block on an account.","title":"block hash"},{"location":"glossary/#block-lattice","text":"The Block Lattice is a data-structure in which individual accounts control their own blockchain. This allows transactions to be added quickly without conflict and sent to the network for confirmation.","title":"Block Lattice"},{"location":"glossary/#bootstrap-network","text":"A sub-network established between peers via Transmission Control Protocol (TCP) for managing bulk transmission of blocks. This is used on initial bootstrapping of peers and when out-of-sync peers attempt to fill large gaps in their ledgers. This is available within all Nano networks (main, beta and test networks).","title":"bootstrap network"},{"location":"glossary/#bootstrapping","text":"During initial sync, the nano_node requests old transactions to independently verify and populate its local ledger database. Bootstrapping will also occur when the nano_node becomes out of sync with the network.","title":"bootstrapping"},{"location":"glossary/#circulating-supply","text":"133,248,290.903662 NANO","title":"circulating supply"},{"location":"glossary/#election","text":"","title":"election"},{"location":"glossary/#frontier","text":"The most recent block added to the account chain. Also called the head block. Can be either confirmed or unconfirmed.","title":"frontier"},{"location":"glossary/#genesis","text":"","title":"genesis"},{"location":"glossary/#head-block","text":"See frontier","title":"head block"},{"location":"glossary/#inbound-send","text":"A block with funds being transferred to an account owned by a wallet on your node","title":"inbound send"},{"location":"glossary/#live-network","text":"A sub-network established between peers via User Datagram Protocol (UDP) for communicating newly published blocks, votes and other non-bootstrap related traffic. This is available within all Nano networks (main, beta and test networks).","title":"live network"},{"location":"glossary/#peers","text":"Nodes connected over the public internet to share Nano network data.","title":"peers"},{"location":"glossary/#pending","text":"A transaction state where a block sending funds was published and confirmed by the network, but a matching block receiving those funds has not yet been confirmed.","title":"pending"},{"location":"glossary/#open-representative-voting-orv","text":"A consensus mechanism unique to Nano which involves accounts delegating their balance as voting weight to Representatives . The Representatives vote themselves on the validity of transactions published to the network using the voting weight delegated to them. These votes are shared with their directly connected peers and they also rebroadcast votes seen from Principal Representatives . Votes are tallied and once quorum is reached on a published block, it is considered confirmed by the network.","title":"Open Representative Voting (ORV)"},{"location":"glossary/#proof-of-work-pow","text":"A Proof-of-Work is a piece of data which satisfies certain requirements and is difficult (costly, time-consuming) to produce, but easy for others to verify. In some systems this data is a central part of the security model used to protect against double-spends and other types of attacks, but with Nano it is only used to increase economic costs of spamming the network.","title":"Proof-of-Work (PoW)"},{"location":"glossary/#quorum","text":"When the delta between the two successive blocks of a root is > 50% of the online voting weight","title":"quorum"},{"location":"glossary/#principal-representative","text":"A Nano account with >= 0.1% (133,248.290903662 NANO) voting weight delegated to it. When configured on a node which is online, the votes it produces will be rebroadcasted by other nodes to who receive them, helping the network reach consensus more quickly.","title":"Principal Representative"},{"location":"glossary/#representative","text":"A Nano account with > 0 voting weight, but < 0.1% (133,248.290903662 NANO), delegated to it. Unlike Principal Representatives , when configured on a node which is online, the votes it produces and sends to directly connected peers won't be rebroadcasted by those peers.","title":"Representative"},{"location":"glossary/#root","text":"The account if the block is the first block on the account, otherwise it is the previous hash included in the block.","title":"root"},{"location":"glossary/#seed","text":"A 256-bit random value usually represented to the user as a 64 character hexidecimal (0-9 and A-F) value. Private keys are derived from a seed.","title":"seed"},{"location":"glossary/#unchecked-blocks","text":"","title":"unchecked (blocks)"},{"location":"glossary/#unopened-account","text":"An account address that does not have a first block on it (which must be a block to receive Nano sent from another account, cannot be a block only changing the Representative).","title":"unopened account"},{"location":"glossary/#unpocketed","text":"See pending","title":"unpocketed"},{"location":"glossary/#voting","text":"Each node configured with a Representative votes on every block by appending their Representative signature and a sequence number to the hash. These will be sent out to directly connected peers and if the vote originates from a Principal Representative , it will subsequently be rebroadcasted by nodes to their peers.","title":"voting"},{"location":"glossary/#voting-weight","text":"The amount of weight delegated to a Representative .","title":"voting weight"},{"location":"glossary/#wallet","text":"A wallet is an organizational object in a nano_node that holds a single seed from which multiple accounts are deterministically derived via a uint32 index starting at 0. Private keys are derived from the seed and index as follows: k_{private} = blake2b(seed || index) k_{private} = blake2b(seed || index)","title":"wallet"},{"location":"glossary/#wallet_id","text":"A 256-bit random value name/identifier for a specific wallet in the local nano_node database. The WALLET_ID is not stored anywhere in the network and is only used in the local nano_node. Even though a WALLET_ID looks identical to a seed, do not confuse the WALLET_ID with a seed; funds cannot be restored with a WALLET_ID. Do not backup the WALLET_ID as a means to backup funds.","title":"WALLET_ID"},{"location":"glossary/#work-peers","text":"Node peers which are configured to generate work for transactions at the originating nodes request.","title":"work peers"},{"location":"commands/command-line-interface/","text":"--account_create --wallet= <wallet> \u00b6 Insert next deterministic key in to <wallet> --account_get --key= <key> \u00b6 Get account number for the <key> --account_key --account= <account> \u00b6 Get the public key for <account> --clear_send_ids \u00b6 Remove all send IDs from the database (dangerous: not intended for production use) --confirmation_height_clear \u00b6 version 19.0+ Sets the confirmation heights of all accounts to 0 (use --account to only reset a single account). --daemon \u00b6 Start node daemon --data_path= <path> \u00b6 Use the supplied <path> as the data directory --debug_account_count \u00b6 Display the number of accounts --debug_block_count \u00b6 Display the number of blocks --debug_bootstrap_generate \u00b6 Generate bootstrap sequence of blocks --debug_cemented_block_count \u00b6 version 19.0+ Display the number of cemented blocks (blocks which are under the confirmation height of their accounts) --debug_dump_online_weight \u00b6 List online weights table and current online_weights value --debug_dump_representatives \u00b6 List representatives and weights --debug_mass_activity \u00b6 Generates fake debug activity --debug_profile_bootstrap \u00b6 Profile simulated bootstrap process --debug_profile_generate \u00b6 Profile work generation --debug_profile_verify \u00b6 Profile work verification --debug_profile_votes \u00b6 Profile vote verification --debug_profile_kdf \u00b6 Profile kdf function --debug_validate_blocks \u00b6 Validate blocks in the ledger --debug_verify_profile \u00b6 Profile signature verification --debug_profile_sign \u00b6 Profile signature generation --debug_xorshift_profile \u00b6 [Disabled] Profile xorshift algorithms --debug_opencl --platform= <platform> --device= <device> --threads= <threads> \u00b6 [Draft] Profile OpenCL work generation for <device> on <platform> using <threads> count. To retrieve available platforms & devices run --diagnostics --delete_node_id \u00b6 Delete the node ID in the database --diagnostics \u00b6 Run internal diagnostics --help \u00b6 Print out options --key_create \u00b6 Generates a adhoc random keypair and prints it to stdout --key_expand --key= <key> \u00b6 Derive public key and account number from <key> --online_weight_clear \u00b6 Clear record history for long term online weight trending --peer_clear \u00b6 Clear cached peers --snapshot \u00b6 Compact database and create snapshot, functions similar to vacuum but does not replace the existing database. Optional --unchecked_clear , --delete_node_id , --clear_send_ids , --online_weight_clear , --peer_clear Optional --confirmation_height_clear in version 19.0+ --unchecked_clear \u00b6 Clear unchecked blocks --vacuum \u00b6 Compact database. If data_path is missing, the database in data directory is compacted. Optional --unchecked_clear , --delete_node_id , --clear_send_ids , --online_weight_clear , --peer_clear --version \u00b6 Prints out version --vote_dump \u00b6 Dump most recent votes from representatives --wallet_add_adhoc --wallet= <wallet> --key= <key> \u00b6 Insert <key> in to <wallet> --wallet_create --key= <key> --password= <password> \u00b6 Creates a new wallet with optional <key> (seed) and optional <password> , and prints the ID --wallet_change_seed --wallet= <wallet> --key= <key> \u00b6 Changes seed for <wallet> to <key> --wallet_decrypt_unsafe --wallet= <wallet> --password= <password> \u00b6 Decrypts <wallet> using <password> !!THIS WILL PRINT YOUR PRIVATE KEY AND SEED TO STDOUT!! If you didn't set password yet, use --wallet_decrypt_unsafe --wallet= <wallet> --wallet_destroy --wallet= <wallet> \u00b6 Destroys <wallet> and all keys it contains --wallet_import --file= <filepath> --wallet= <wallet> --password= <password> \u00b6 Imports keys in <filepath> using <password> in to <wallet> --wallet_list \u00b6 Dumps wallet IDs and public keys --wallet_remove --wallet= <wallet> --account= <account> \u00b6 Remove <account> from <wallet> --wallet_representative_get --wallet= <wallet> \u00b6 Prints default representative for <wallet> --wallet_representative_set --wallet= <wallet> --account= <account> \u00b6 Set <account> as default representative for <wallet> Launch options \u00b6 When initially starting the nano_node or nano_wallet as a service the following launch options are available. NOTE: These options are only for developer use so please understand the impacts before use. --disable_backup \u00b6 Turn off automatic wallet backup process --disable_lazy_bootstrap \u00b6 Turn off use of lazy bootstrap --disable_legacy_bootstrap \u00b6 Turn off use of legacy bootstrap --disable_wallet_bootstrap \u00b6 Turn off use of wallet-based bootstrap --disable_bootstrap_listener \u00b6 Turn off listener on the bootstrap network so incoming TCP (bootstrap) connections are rejected --disable_unchecked_cleanup \u00b6 Prevent periodic cleaning of unchecked table --disable_unchecked_drop \u00b6 Prevent drop of all unchecked entries at node/wallet start --fast_bootstrap \u00b6 Increase bootstrap processor limits to allow more blocks before hitting full state and verify/write more per database call. Also disable deletion of processed unchecked blocks","title":"Command Line Interface"},{"location":"commands/command-line-interface/#-account_create-walletwallet","text":"Insert next deterministic key in to <wallet>","title":"--account_create --wallet=&lt;wallet&gt;"},{"location":"commands/command-line-interface/#-account_get-keykey","text":"Get account number for the <key>","title":"--account_get --key=&lt;key&gt;"},{"location":"commands/command-line-interface/#-account_key-accountaccount","text":"Get the public key for <account>","title":"--account_key --account=&lt;account&gt;"},{"location":"commands/command-line-interface/#-clear_send_ids","text":"Remove all send IDs from the database (dangerous: not intended for production use)","title":"--clear_send_ids"},{"location":"commands/command-line-interface/#-confirmation_height_clear","text":"version 19.0+ Sets the confirmation heights of all accounts to 0 (use --account to only reset a single account).","title":"--confirmation_height_clear"},{"location":"commands/command-line-interface/#-daemon","text":"Start node daemon","title":"--daemon"},{"location":"commands/command-line-interface/#-data_pathpath","text":"Use the supplied <path> as the data directory","title":"--data_path=&lt;path&gt;"},{"location":"commands/command-line-interface/#-debug_account_count","text":"Display the number of accounts","title":"--debug_account_count"},{"location":"commands/command-line-interface/#-debug_block_count","text":"Display the number of blocks","title":"--debug_block_count"},{"location":"commands/command-line-interface/#-debug_bootstrap_generate","text":"Generate bootstrap sequence of blocks","title":"--debug_bootstrap_generate"},{"location":"commands/command-line-interface/#-debug_cemented_block_count","text":"version 19.0+ Display the number of cemented blocks (blocks which are under the confirmation height of their accounts)","title":"--debug_cemented_block_count"},{"location":"commands/command-line-interface/#-debug_dump_online_weight","text":"List online weights table and current online_weights value","title":"--debug_dump_online_weight"},{"location":"commands/command-line-interface/#-debug_dump_representatives","text":"List representatives and weights","title":"--debug_dump_representatives"},{"location":"commands/command-line-interface/#-debug_mass_activity","text":"Generates fake debug activity","title":"--debug_mass_activity"},{"location":"commands/command-line-interface/#-debug_profile_bootstrap","text":"Profile simulated bootstrap process","title":"--debug_profile_bootstrap"},{"location":"commands/command-line-interface/#-debug_profile_generate","text":"Profile work generation","title":"--debug_profile_generate"},{"location":"commands/command-line-interface/#-debug_profile_verify","text":"Profile work verification","title":"--debug_profile_verify"},{"location":"commands/command-line-interface/#-debug_profile_votes","text":"Profile vote verification","title":"--debug_profile_votes"},{"location":"commands/command-line-interface/#-debug_profile_kdf","text":"Profile kdf function","title":"--debug_profile_kdf"},{"location":"commands/command-line-interface/#-debug_validate_blocks","text":"Validate blocks in the ledger","title":"--debug_validate_blocks"},{"location":"commands/command-line-interface/#-debug_verify_profile","text":"Profile signature verification","title":"--debug_verify_profile"},{"location":"commands/command-line-interface/#-debug_profile_sign","text":"Profile signature generation","title":"--debug_profile_sign"},{"location":"commands/command-line-interface/#-debug_xorshift_profile","text":"[Disabled] Profile xorshift algorithms","title":"--debug_xorshift_profile"},{"location":"commands/command-line-interface/#-debug_opencl-platformplatform-devicedevice-threadsthreads","text":"[Draft] Profile OpenCL work generation for <device> on <platform> using <threads> count. To retrieve available platforms & devices run --diagnostics","title":"--debug_opencl --platform=&lt;platform&gt; --device=&lt;device&gt; --threads=&lt;threads&gt;"},{"location":"commands/command-line-interface/#-delete_node_id","text":"Delete the node ID in the database","title":"--delete_node_id"},{"location":"commands/command-line-interface/#-diagnostics","text":"Run internal diagnostics","title":"--diagnostics"},{"location":"commands/command-line-interface/#-help","text":"Print out options","title":"--help"},{"location":"commands/command-line-interface/#-key_create","text":"Generates a adhoc random keypair and prints it to stdout","title":"--key_create"},{"location":"commands/command-line-interface/#-key_expand-keykey","text":"Derive public key and account number from <key>","title":"--key_expand --key=&lt;key&gt;"},{"location":"commands/command-line-interface/#-online_weight_clear","text":"Clear record history for long term online weight trending","title":"--online_weight_clear"},{"location":"commands/command-line-interface/#-peer_clear","text":"Clear cached peers","title":"--peer_clear"},{"location":"commands/command-line-interface/#-snapshot","text":"Compact database and create snapshot, functions similar to vacuum but does not replace the existing database. Optional --unchecked_clear , --delete_node_id , --clear_send_ids , --online_weight_clear , --peer_clear Optional --confirmation_height_clear in version 19.0+","title":"--snapshot"},{"location":"commands/command-line-interface/#-unchecked_clear","text":"Clear unchecked blocks","title":"--unchecked_clear"},{"location":"commands/command-line-interface/#-vacuum","text":"Compact database. If data_path is missing, the database in data directory is compacted. Optional --unchecked_clear , --delete_node_id , --clear_send_ids , --online_weight_clear , --peer_clear","title":"--vacuum"},{"location":"commands/command-line-interface/#-version","text":"Prints out version","title":"--version"},{"location":"commands/command-line-interface/#-vote_dump","text":"Dump most recent votes from representatives","title":"--vote_dump"},{"location":"commands/command-line-interface/#-wallet_add_adhoc-walletwallet-keykey","text":"Insert <key> in to <wallet>","title":"--wallet_add_adhoc --wallet=&lt;wallet&gt; --key=&lt;key&gt;"},{"location":"commands/command-line-interface/#-wallet_create-keykey-passwordpassword","text":"Creates a new wallet with optional <key> (seed) and optional <password> , and prints the ID","title":"--wallet_create --key=&lt;key&gt; --password=&lt;password&gt;"},{"location":"commands/command-line-interface/#-wallet_change_seed-walletwallet-keykey","text":"Changes seed for <wallet> to <key>","title":"--wallet_change_seed --wallet=&lt;wallet&gt; --key=&lt;key&gt;"},{"location":"commands/command-line-interface/#-wallet_decrypt_unsafe-walletwallet-passwordpassword","text":"Decrypts <wallet> using <password> !!THIS WILL PRINT YOUR PRIVATE KEY AND SEED TO STDOUT!! If you didn't set password yet, use --wallet_decrypt_unsafe --wallet= <wallet>","title":"--wallet_decrypt_unsafe --wallet=&lt;wallet&gt; --password=&lt;password&gt;"},{"location":"commands/command-line-interface/#-wallet_destroy-walletwallet","text":"Destroys <wallet> and all keys it contains","title":"--wallet_destroy --wallet=&lt;wallet&gt;"},{"location":"commands/command-line-interface/#-wallet_import-filefilepath-walletwallet-passwordpassword","text":"Imports keys in <filepath> using <password> in to <wallet>","title":"--wallet_import  --file=&lt;filepath&gt; --wallet=&lt;wallet&gt; --password=&lt;password&gt;"},{"location":"commands/command-line-interface/#-wallet_list","text":"Dumps wallet IDs and public keys","title":"--wallet_list"},{"location":"commands/command-line-interface/#-wallet_remove-walletwallet-accountaccount","text":"Remove <account> from <wallet>","title":"--wallet_remove --wallet=&lt;wallet&gt; --account=&lt;account&gt;"},{"location":"commands/command-line-interface/#-wallet_representative_get-walletwallet","text":"Prints default representative for <wallet>","title":"--wallet_representative_get --wallet=&lt;wallet&gt;"},{"location":"commands/command-line-interface/#-wallet_representative_set-walletwallet-accountaccount","text":"Set <account> as default representative for <wallet>","title":"--wallet_representative_set --wallet=&lt;wallet&gt; --account=&lt;account&gt;"},{"location":"commands/command-line-interface/#launch-options","text":"When initially starting the nano_node or nano_wallet as a service the following launch options are available. NOTE: These options are only for developer use so please understand the impacts before use.","title":"Launch options"},{"location":"commands/command-line-interface/#-disable_backup","text":"Turn off automatic wallet backup process","title":"--disable_backup"},{"location":"commands/command-line-interface/#-disable_lazy_bootstrap","text":"Turn off use of lazy bootstrap","title":"--disable_lazy_bootstrap"},{"location":"commands/command-line-interface/#-disable_legacy_bootstrap","text":"Turn off use of legacy bootstrap","title":"--disable_legacy_bootstrap"},{"location":"commands/command-line-interface/#-disable_wallet_bootstrap","text":"Turn off use of wallet-based bootstrap","title":"--disable_wallet_bootstrap"},{"location":"commands/command-line-interface/#-disable_bootstrap_listener","text":"Turn off listener on the bootstrap network so incoming TCP (bootstrap) connections are rejected","title":"--disable_bootstrap_listener"},{"location":"commands/command-line-interface/#-disable_unchecked_cleanup","text":"Prevent periodic cleaning of unchecked table","title":"--disable_unchecked_cleanup"},{"location":"commands/command-line-interface/#-disable_unchecked_drop","text":"Prevent drop of all unchecked entries at node/wallet start","title":"--disable_unchecked_drop"},{"location":"commands/command-line-interface/#-fast_bootstrap","text":"Increase bootstrap processor limits to allow more blocks before hitting full state and verify/write more per database call. Also disable deletion of processed unchecked blocks","title":"--fast_bootstrap"},{"location":"commands/rpc-protocol/","text":"The RPC protocol accepts JSON HTTP POST requests. The following are RPC commands along with the responses that are expected. This page is split into the following sections: Section Purpose Node RPCs For interacting with the node and ledger. Wallet RPCs For interacting with the built-in, QT-based node wallet. NOTE : This wallet is only recommended for development and testing. Unit Conversion RPCs For converting different units to and from raw. Deprecated RPCs No longer recommended for use. Node RPCs \u00b6 account_balance \u00b6 Returns how many RAW is owned and how many have not yet been received by account Request: { \"action\" : \"account_balance\" , \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" } Response: { \"balance\" : \"10000\" , \"pending\" : \"10000\" } account_block_count \u00b6 Get number of blocks for a specific account Request: { \"action\" : \"account_block_count\" , \"account\" : \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" } Response: { \"block_count\" : \"19\" } account_get \u00b6 Get account number for the public key Request: { \"action\" : \"account_get\" , \"key\" : \"3068BB1CA04525BB0E416C485FE6A67FD52540227D267CC8B6E8DA958A7FA039\" } Response: { \"account\" : \"xrb_1e5aqegc1jb7qe964u4adzmcezyo6o146zb8hm6dft8tkp79za3sxwjym5rx\" } account_history \u00b6 Reports send/receive information for an account. Returns only send & receive blocks by default (unless raw is set to true - see optional parameters below): change, state change & state epoch blocks are skipped, open & state open blocks will appear as receive, state receive/send blocks will appear as receive/send entries. Response will start with the latest block for the account (the frontier), and will list all blocks back to the open block of this account when \"count\" is set to \"-1\". Note : \"local_timestamp\" returned since version 18.0, \"height\" field returned since version 19.0 Request: { \"action\" : \"account_history\" , \"account\" : \"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\" , \"count\" : \"1\" } Response: { \"account\" : \"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\" , \"history\" : [ { \"type\" : \"send\" , \"account\" : \"xrb_38ztgpejb7yrm7rr586nenkn597s3a1sqiy3m3uyqjicht7kzuhnihdk6zpz\" , \"amount\" : \"80000000000000000000000000000000000\" , \"local_timestamp\" : \"1551532723\" , \"height\" : \"60\" , \"hash\" : \"80392607E85E73CC3E94B4126F24488EBDFEB174944B890C97E8F36D89591DC5\" } ], \"previous\" : \"8D3AB98B301224253750D448B4BD997132400CEDD0A8432F775724F2D9821C72\" } If the count limit results in stopping before the end of the account chain, then the response will also contain a previous field (outside of the history field) which contains the block hash that would be next to process if count was larger. Optional parameters: raw (bool): if set to true instead of the default false , instead of outputting a simplified send or receive explanation of blocks (intended for wallets), output all parameters of the block itself as seen in block_create or other APIs returning blocks. It still includes the \"account\" and \"amount\" properties you'd see without this option. State/universal blocks in the raw history will also have a subtype field indicating their equivalent \"old\" block. Unfortunately, the \"account\" parameter for open blocks is the account of the source block, not the account of the open block, to preserve similarity with the non-raw history. head (64 hexadecimal digits string, 256 bit): instead of using the latest block for a specified account, use this block as the head of the account instead. Useful for pagination. offset (decimal integer): skips a number of blocks starting from head (if given). Not often used. Available since version 11.0 reverse (bool): if set to true instead of the default false , the response starts from head (if given, otherwise the first block of the account), and lists blocks up to the frontier (limited by \"count\"). Note : the field previous in the response changes to next . Available since version 19.0 account_info \u00b6 Returns frontier, open block, change representative block, balance, last modified timestamp from local database & block count for account . Only works for accounts that have an entry on the ledger, will return \"Account not found\" otherwise. Request: { \"action\" : \"account_info\" , \"account\" : \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" } Response: { \"frontier\" : \"FF84533A571D953A596EA401FD41743AC85D04F406E76FDE4408EAED50B473C5\" , \"open_block\" : \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" , \"representative_block\" : \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" , \"balance\" : \"235580100176034320859259343606608761791\" , \"modified_timestamp\" : \"1501793775\" , \"block_count\" : \"33\" , \"confirmation_height\" : \"28\" , \"account_version\" : \"1\" } In response confirmation_height only available for version 19.0+ Optional \"representative\", \"weight\", \"pending\" version 9.0+ Booleans, false by default. Additionally returns representative, voting weight, pending balance for account Request: { \"action\" : \"account_info\" , \"account\" : \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" , \"representative\" : \"true\" , \"weight\" : \"true\" , \"pending\" : \"true\" } Response: { \"frontier\" : \"FF84533A571D953A596EA401FD41743AC85D04F406E76FDE4408EAED50B473C5\" , \"open_block\" : \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" , \"representative_block\" : \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" , \"balance\" : \"235580100176034320859259343606608761791\" , \"modified_timestamp\" : \"1501793775\" , \"block_count\" : \"33\" , \"representative\" : \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" , \"weight\" : \"1105577030935649664609129644855132177\" , \"pending\" : \"2309370929000000000000000000000000\" } account_key \u00b6 Get the public key for account Request: { \"action\" : \"account_key\" , \"account\" : \"xrb_1e5aqegc1jb7qe964u4adzmcezyo6o146zb8hm6dft8tkp79za3sxwjym5rx\" } Response: { \"key\" : \"3068BB1CA04525BB0E416C485FE6A67FD52540227D267CC8B6E8DA958A7FA039\" } account_representative \u00b6 Returns the representative for account Request: { \"action\" : \"account_representative\" , \"account\" : \"xrb_39a73oy5ungrhxy5z5oao1xso4zo7dmgpjd4u74xcrx3r1w6rtazuouw6qfi\" } Response: { \"representative\" : \"xrb_16u1uufyoig8777y6r8iqjtrw8sg8maqrm36zzcm95jmbd9i9aj5i8abr8u5\" } account_weight \u00b6 Returns the voting weight for account Request: { \"action\" : \"account_weight\" , \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" } Response: { \"weight\" : \"10000\" } accounts_balances \u00b6 Returns how many RAW is owned and how many have not yet been received by accounts list Request: { \"action\" : \"accounts_balances\" , \"accounts\" : [ \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"xrb_3i1aq1cchnmbn9x5rsbap8b15akfh7wj7pwskuzi7ahz8oq6cobd99d4r3b7\" ] } Response: { \"balances\" : { \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" : { \"balance\" : \"10000\" , \"pending\" : \"10000\" }, \"xrb_3i1aq1cchnmbn9x5rsbap8b15akfh7wj7pwskuzi7ahz8oq6cobd99d4r3b7\" : { \"balance\" : \"10000000\" , \"pending\" : \"0\" } } } accounts_frontiers \u00b6 Returns a list of pairs of account and block hash representing the head block for accounts list Request: { \"action\" : \"accounts_frontiers\" , \"accounts\" : [ \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" , \"xrb_3i1aq1cchnmbn9x5rsbap8b15akfh7wj7pwskuzi7ahz8oq6cobd99d4r3b7\" ] } Response: { \"frontiers\" : { \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" : \"791AF413173EEE674A6FCF633B5DFC0F3C33F397F0DA08E987D9E0741D40D81A\" , \"xrb_3i1aq1cchnmbn9x5rsbap8b15akfh7wj7pwskuzi7ahz8oq6cobd99d4r3b7\" : \"6A32397F4E95AF025DE29D9BF1ACE864D5404362258E06489FABDBA9DCCC046F\" } } accounts_pending \u00b6 Returns a list of block hashes which have not yet been received by these accounts Request: { \"action\" : \"accounts_pending\" , \"accounts\" : [ \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" , \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" ], \"count\" : \"1\" } Response: { \"blocks\" : { \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" : [ \"142A538F36833D1CC78B94E11C766F75818F8B940771335C6C1B8AB880C5BB1D\" ], \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" : [ \"4C1FEEF0BEA7F50BE35489A1233FE002B212DEA554B55B1B470D78BD8F210C74\" ] } } Optional \"threshold\" version 8.0+ Number (128 bit, decimal). Returns a list of pending block hashes with amount more or equal to threshold Request: { \"action\" : \"accounts_pending\" , \"accounts\" : [ \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" , \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" ], \"count\" : \"1\" , \"threshold\" : \"1000000000000000000000000\" } Response: { \"blocks\" : { \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" : { \"142A538F36833D1CC78B94E11C766F75818F8B940771335C6C1B8AB880C5BB1D\" : \"6000000000000000000000000000000\" }, \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" : { \"4C1FEEF0BEA7F50BE35489A1233FE002B212DEA554B55B1B470D78BD8F210C74\" : \"106370018000000000000000000000000\" } } Optional \"source\" version 9.0+ Boolean, false by default. Returns a list of pending block hashes with amount and source accounts Request: { \"action\" : \"accounts_pending\" , \"accounts\" : [ \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" , \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" ], \"count\" : \"1\" , \"source\" : \"true\" } Response: { \"blocks\" : { \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" : { \"142A538F36833D1CC78B94E11C766F75818F8B940771335C6C1B8AB880C5BB1D\" : { \"amount\" : \"6000000000000000000000000000000\" , \"source\" : \"xrb_3dcfozsmekr1tr9skf1oa5wbgmxt81qepfdnt7zicq5x3hk65fg4fqj58mbr\" } }, \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" : { \"4C1FEEF0BEA7F50BE35489A1233FE002B212DEA554B55B1B470D78BD8F210C74\" : { \"amount\" : \"106370018000000000000000000000000\" , \"source\" : \"xrb_13ezf4od79h1tgj9aiu4djzcmmguendtjfuhwfukhuucboua8cpoihmh8byo\" } } } Optional \"include_active\" version 15.0+ Boolean, false by default. Include active (not confirmed) blocks Request: { \"action\" : \"accounts_pending\" , \"accounts\" : [ \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" , \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" ], \"count\" : \"1\" , \"include_active\" : \"true\" } Optional \"sorting\" version 19.0+ Boolean, false by default. Additionally sorts each account's blocks by their amounts in descending order. Optional \"include_only_confirmed\" version 19.0+ Boolean, false by default. Only returns block which have their confirmation height set or are undergoing confirmation height processing. available_supply \u00b6 Returns how many raw are in the public supply Request: { \"action\" : \"available_supply\" } Response: { \"available\" : \"133248061996216572282917317807824970865\" } block_account \u00b6 Returns the account containing block Request: { \"action\" : \"block_account\" , \"hash\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" } block_confirm \u00b6 version 12.2+ Request confirmation for block from known online representative nodes. Check results with confirmation history Request: { \"action\" : \"block_confirm\" , \"hash\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"started\" : \"1\" } block_count \u00b6 Reports the number of blocks in the ledger and unchecked synchronizing blocks Request: { \"action\" : \"block_count\" } Response: { \"count\" : \"1000\" , \"unchecked\" : \"10\" } block_count_type \u00b6 Reports the number of blocks in the ledger by type (send, receive, open, change, state with version) Request: { \"action\" : \"block_count_type\" } Response: { \"send\" : \"5016664\" , \"receive\" : \"4081228\" , \"open\" : \"546457\" , \"change\" : \"24193\" , \"state_v0\" : \"4216537\" , \"state_v1\" : \"10653709\" , \"state\" : \"14870246\" } block_create \u00b6 enable_control required, version 9.0+ Creates a json representations of new block based on input data & signed with private key or account in wallet . Use for offline signing. Request sample for state block: { \"action\" : \"block_create\" , \"type\" : \"state\" , \"balance\" : \"1000000000000000000000\" , \"key\" : \"0000000000000000000000000000000000000000000000000000000000000002\" , \"representative\" : \"xrb_1hza3f7wiiqa7ig3jczyxj5yo86yegcmqk3criaz838j91sxcckpfhbhhra1\" , \"link\" : \"19D3D919475DEED4696B5D13018151D1AF88B2BD3BCFF048B45031C1F36D1858\" , \"previous\" : \"F47B23107E5F34B2CE06F562B5C435DF72A533251CB414C51B2B62A8F63A00E4\" } Parameters for state block: balance : final balance for account after block creation, formatted in 'raw' units using a decimal integer. If balance is less than previous, block is considered as send subtype! wallet (optional): The wallet ID that the account the block is being created for is in. account (optional): The account the block is being created for (xrb_youraccount). key (optional): Instead of using \"wallet\" & \"account\" parameters, you can directly pass in a private key. source (optional): The block hash of the source of funds for this receive block (the send block that this receive block will pocket). destination (optional): The account that the sent funds should be accessible to. link (optional): Instead of using \"source\" & \"destination\" parameters, you can directly pass \"link\" (source to receive or destination public key to send). representative : The account that block account will use as its representative. previous : The block hash of the previous block on this account's block chain (\"0\" for first block). Warning: It is critical that balance is the balance of the account after created block! Optional \"json_block\" version 19.0+ Default \"false\". If \"true\", \"block\" in the response will contain a JSON subtree instead of a JSON string. Examples Response sample for state block : { \"hash\" : \"FF0144381CFF0B2C079A115E7ADA7E96F43FD219446E7524C48D1CC9900C4F17\" , \"block\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_3qgmh14nwztqw4wmcdzy4xpqeejey68chx6nciczwn9abji7ihhum9qtpmdr\\\",\\n \\\"previous\\\": \\\"F47B23107E5F34B2CE06F562B5C435DF72A533251CB414C51B2B62A8F63A00E4\\\",\\n \\\"representative\\\": \\\"xrb_1hza3f7wiiqa7ig3jczyxj5yo86yegcmqk3criaz838j91sxcckpfhbhhra1\\\",\\n \\\"balance\\\": \\\"1000000000000000000000\\\",\\n \\\"link\\\": \\\"19D3D919475DEED4696B5D13018151D1AF88B2BD3BCFF048B45031C1F36D1858\\\",\\n \\\"link_as_account\\\": \\\"xrb_18gmu6engqhgtjnppqam181o5nfhj4sdtgyhy36dan3jr9spt84rzwmktafc\\\",\\n \\\"signature\\\": \\\"3BFBA64A775550E6D49DF1EB8EEC2136DCD74F090E2ED658FBD9E80F17CB1C9F9F7BDE2B93D95558EC2F277FFF15FD11E6E2162A1714731B743D1E941FA4560A\\\",\\n \\\"work\\\": \\\"cab7404f0b5449d0\\\"\\n }\\n\" } Optional \"work\" Work value (16 hexadecimal digits string, 64 bit). Uses work value for block from external source block_hash \u00b6 version 13.0+ Returning block hash for given block content Request: { \"action\" : \"block_hash\" , \"block\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_3qgmh14nwztqw4wmcdzy4xpqeejey68chx6nciczwn9abji7ihhum9qtpmdr\\\",\\n \\\"previous\\\": \\\"F47B23107E5F34B2CE06F562B5C435DF72A533251CB414C51B2B62A8F63A00E4\\\",\\n \\\"representative\\\": \\\"xrb_1hza3f7wiiqa7ig3jczyxj5yo86yegcmqk3criaz838j91sxcckpfhbhhra1\\\",\\n \\\"balance\\\": \\\"1000000000000000000000\\\",\\n \\\"link\\\": \\\"19D3D919475DEED4696B5D13018151D1AF88B2BD3BCFF048B45031C1F36D1858\\\",\\n \\\"link_as_account\\\": \\\"xrb_18gmu6engqhgtjnppqam181o5nfhj4sdtgyhy36dan3jr9spt84rzwmktafc\\\",\\n \\\"signature\\\": \\\"3BFBA64A775550E6D49DF1EB8EEC2136DCD74F090E2ED658FBD9E80F17CB1C9F9F7BDE2B93D95558EC2F277FFF15FD11E6E2162A1714731B743D1E941FA4560A\\\",\\n \\\"work\\\": \\\"cab7404f0b5449d0\\\"\\n }\\n\" } Response: { \"hash\" : \"FF0144381CFF0B2C079A115E7ADA7E96F43FD219446E7524C48D1CC9900C4F17\" } Optional \"json_block\" version 19.0+ Default \"false\". If \"true\", \"block\" must contain a JSON subtree instead of a JSON string. block_info \u00b6 Retrieves a json representation of block Returns block account, amount, balance, block height in account chain & local timestamp since version 18.0 Returns confirmation status & subtype for state block since version 19.0 Request: { \"action\" : \"block_info\" , \"hash\" : \"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\" } Response: { \"block_account\" : \"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\" , \"amount\" : \"30000000000000000000000000000000000\" , \"balance\" : \"5606157000000000000000000000000000000\" , \"height\" : \"58\" , \"local_timestamp\" : \"0\" , \"confirmed\" : \"false\" , \"contents\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\\\",\\n \\\"previous\\\": \\\"CE898C131AAEE25E05362F247760F8A3ACF34A9796A5AE0D9204E86B0637965E\\\",\\n \\\"representative\\\": \\\"xrb_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\\\",\\n \\\"balance\\\": \\\"5606157000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"5D1AA8A45F8736519D707FCB375976A7F9AF795091021D7E9C7548D6F45DD8D5\\\",\\n \\\"link_as_account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\",\\n \\\"signature\\\": \\\"82D41BC16F313E4B2243D14DFFA2FB04679C540C2095FEE7EAE0F2F26880AD56DD48D87A7CC5DD760C5B2D76EE2C205506AA557BF00B60D8DEE312EC7343A501\\\",\\n \\\"work\\\": \\\"8a142e07a10996d5\\\"\\n }\\n\" , \"subtype\" : \"send\" } Note: The Balance in contents is a uint128. However, it will be a hex-encoded (like 0000000C9F2C9CD04674EDEA40000000 for 1 Mnano ) when the block is a legacy Send Block . If the block is a State-Block , the same Balance will be a numeric-string (like 1000000000000000000000000000000 ). Optional \"json_block\" version 19.0+ Default \"false\". If \"true\", \"contents\" will contain a JSON subtree instead of a JSON string. blocks \u00b6 Retrieves a json representations of blocks Request: { \"action\" : \"blocks\" , \"hashes\" : [ \"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\" ] } Response: { \"blocks\" : { \"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\\\",\\n \\\"previous\\\": \\\"CE898C131AAEE25E05362F247760F8A3ACF34A9796A5AE0D9204E86B0637965E\\\",\\n \\\"representative\\\": \\\"xrb_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\\\",\\n \\\"balance\\\": \\\"5606157000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"5D1AA8A45F8736519D707FCB375976A7F9AF795091021D7E9C7548D6F45DD8D5\\\",\\n \\\"link_as_account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\",\\n \\\"signature\\\": \\\"82D41BC16F313E4B2243D14DFFA2FB04679C540C2095FEE7EAE0F2F26880AD56DD48D87A7CC5DD760C5B2D76EE2C205506AA557BF00B60D8DEE312EC7343A501\\\",\\n \\\"work\\\": \\\"8a142e07a10996d5\\\"\\n }\\n\" } } blocks_info \u00b6 Retrieves a json representations of blocks with block account , transaction amount , block balance , block height in account chain, block local modification timstamp , block confirmation status (since version 19.0), subtype (for state blocks since version 19.0) Request: { \"action\" : \"blocks_info\" , \"hashes\" : [ \"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\" ] } Response: { \"blocks\" : { \"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\" : { \"block_account\" : \"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\" , \"amount\" : \"30000000000000000000000000000000000\" , \"balance\" : \"5606157000000000000000000000000000000\" , \"height\" : \"58\" , \"local_timestamp\" : \"0\" , \"confirmed\" : \"false\" , \"contents\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\\\",\\n \\\"previous\\\": \\\"CE898C131AAEE25E05362F247760F8A3ACF34A9796A5AE0D9204E86B0637965E\\\",\\n \\\"representative\\\": \\\"xrb_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\\\",\\n \\\"balance\\\": \\\"5606157000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"5D1AA8A45F8736519D707FCB375976A7F9AF795091021D7E9C7548D6F45DD8D5\\\",\\n \\\"link_as_account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\",\\n \\\"signature\\\": \\\"82D41BC16F313E4B2243D14DFFA2FB04679C540C2095FEE7EAE0F2F26880AD56DD48D87A7CC5DD760C5B2D76EE2C205506AA557BF00B60D8DEE312EC7343A501\\\",\\n \\\"work\\\": \\\"8a142e07a10996d5\\\"\\n }\\n\" , \"subtype\" : \"send\" } } } Optional \"pending\", \"source\", \"balance\" pending, source: version 9.0+ balance: version 12.0+ Booleans, false by default. Additionally checks if block is pending, returns source account for receive & open blocks (0 for send & change blocks), and returns the balance of the account at the time of the block. Request: { \"action\" : \"blocks_info\" , \"hashes\" : [ \"E2FB233EF4554077A7BF1AA85851D5BF0B36965D2B0FB504B2BC778AB89917D3\" ], \"pending\" : \"true\" , \"source\" : \"true\" , \"balance\" : \"true\" } Response: { \"blocks\" : { \"E2FB233EF4554077A7BF1AA85851D5BF0B36965D2B0FB504B2BC778AB89917D3\" : { \"block_account\" : \"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\" , \"amount\" : \"30000000000000000000000000000000000\" , \"contents\" : \"{ ...skipped... }\" , \"pending\" : \"0\" , \"source_account\" : \"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\" , \"balance\" : \"40200000001000000000000000000000000\" } } } Optional \"json_block\" version 19.0+ Default \"false\". If \"true\", \"contents\" will contain a JSON subtree instead of a JSON string. bootstrap \u00b6 Initialize bootstrap to specific IP address and port Request: { \"action\" : \"bootstrap\" , \"address\" : \"::ffff:138.201.94.249\" , \"port\" : \"7075\" } Response: { \"success\" : \"\" } bootstrap_any \u00b6 Initialize multi-connection bootstrap to random peers Request: { \"action\" : \"bootstrap_any\" } Response: { \"success\" : \"\" } bootstrap_lazy \u00b6 version 17.0+ Initialize lazy bootstrap with given block hash Request: { \"action\" : \"bootstrap_lazy\" , \"hash\" : \"FF0144381CFF0B2C079A115E7ADA7E96F43FD219446E7524C48D1CC9900C4F17\" } Response: { \"started\" : \"1\" } Optional \"force\" Boolean, false by default. Manually force closing of all current bootstraps bootstrap_status \u00b6 version 17.0+ Debug purposes only This call is for internal diagnostics/debug purposes only. Do not rely on this interface being stable and do not use in a production system. Returning status of current bootstrap attempt Request: { \"action\" : \"bootstrap_status\" } Response: { \"clients\" : \"5790\" , \"pulls\" : \"141065\" , \"pulling\" : \"3\" , \"connections\" : \"16\" , \"idle\" : \"0\" , \"target_connections\" : \"64\" , \"total_blocks\" : \"536820\" , \"lazy_mode\" : \"true\" , \"lazy_blocks\" : \"423388\" , \"lazy_state_unknown\" : \"2\" , \"lazy_balances\" : \"0\" , \"lazy_pulls\" : \"0\" , \"lazy_stopped\" : \"644\" , \"lazy_keys\" : \"449\" , \"lazy_key_1\" : \"A86EB2B479AAF3CD531C8356A1FBE3CB500DFBF5BF292E5E6B8D1048DE199C32\" } chain \u00b6 Returns a consecutive list of block hashes in the account chain starting at block back to count (direction from frontier back to open block, from newer blocks to older). Will list all blocks back to the open block of this chain when count is set to \"-1\". The requested block hash is included in the answer. Request: { \"action\" : \"chain\" , \"block\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"count\" : \"1\" } Response: { \"blocks\" : [ \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" ] } Optional \"offset\" version 18.0+ Number, 0 by default. Return the account chain block hashes offset by the specified number of blocks Optional \"reverse\" version 18.0+ Boolean, false by default. Returns a list of block hashes in the account chain starting at block up to count (direction from open block up to frontier, from older blocks to newer). Equal to successors confirmation_active \u00b6 version 16.0+ Returns list of active elections roots (excluding stopped & aborted elections). Find info about specific root with confirmation_info Note The roots provided are two parts and differ between the first account block and subsequent blocks: First account block (open): 0000000000000000000000000000000000000000000000000000000000000000 + account public key Other blocks: previous hash + previous hash Request: { \"action\" : \"confirmation_active\" } Response: { \"confirmations\" : [ \"8031B600827C5CC05FDC911C28BBAC12A0E096CCB30FA8324F56C123676281B28031B600827C5CC05FDC911C28BBAC12A0E096CCB30FA8324F56C123676281B2\" ] } Optional \"announcements\" Number, 0 by default. Returns only active elections with equal or higher announcements count. Useful to find long running elections confirmation_height_currently_processing \u00b6 version 19.0+ Debug purposes only This call is for internal diagnostics/debug purposes only. Do not rely on this interface being stable and do not use in a production system. Returns the hash of the block which is having the confirmation height set for, error otherwise. When a block is being confirmed, it must confirm all blocks in the chain below and iteratively follow all receive blocks. This can take a long time, so it can be useful to find which block was the original being confirmed. Request: { \"action\" : \"confirmation_height_currently_processing\" } Response: { \"hash\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } confirmation_history \u00b6 version 12.0+ duration, time, confirmation_stats: version 17.0+ Returns hash, tally weight, election duration (in milliseconds), election confirmation timestamp for recent elections winners. Also returns stats: count of elections in history (limited to 2048) & average duration time Request: { \"action\" : \"confirmation_history\" } Response: { \"confirmation_stats\" : { \"count\" : \"2\" , \"average\" : \"5000\" }, \"confirmations\" : [ { \"hash\" : \"EA70B32C55C193345D625F766EEA2FCA52D3F2CCE0B3A30838CC543026BB0FEA\" , \"duration\" : \"4000\" , \"time\" : \"1544819986\" , \"tally\" : \"80394786589602980996311817874549318248\" }, { \"hash\" : \"F2F8DA6D2CA0A4D78EB043A7A29E12BDE5B4CE7DE1B99A93A5210428EE5B8667\" , \"duration\" : \"6000\" , \"time\" : \"1544819988\" , \"tally\" : \"68921714529890443063672782079965877749\" } ] } Optional \"hash\" Valid block hash, filters return for only the provided hash. If there is no confirmation available for that hash anymore, the following return can be expected: `{ \"confirmation_stats\": { \"count\": \"0\" }, \"confirmations\": \"\" } ` If the block is unknown on the node, the following error will be returned: \"error\": \"Invalid block hash\" confirmation_info \u00b6 version 16.0+ Returns info about active election by root . Including announcements count, last winner (initially local ledger block), total tally of voted representatives, concurrent blocks with tally & block contents for each Note The roots provided are two parts and differ between the first account block and subsequent blocks: First account block (open): 0000000000000000000000000000000000000000000000000000000000000000 + account public key Other blocks: previous hash + previous hash Request: { \"action\" : \"confirmation_info\" , \"root\" : \"F8BA8CBE61C679231EB06FA03A0CD7CFBE68746396CBBA169BD9E12725682B44F8BA8CBE61C679231EB06FA03A0CD7CFBE68746396CBBA169BD9E12725682B44\" } Response: { \"announcements\" : \"1\" , \"last_winner\" : \"36CC459675E9FB2DB960C330BAFECB50132DB0394E83C14C7D1359ACB17F5BD2\" , \"total_tally\" : \"66508449034656215696897986086066451444\" , \"blocks\" : { \"36CC459675E9FB2DB960C330BAFECB50132DB0394E83C14C7D1359ACB17F5BD2\" : { \"tally\" : \"66508449034656215696897986086066451444\" , \"contents\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_3mi58wc8p7uptp5gmt8k4wb5qbizm6chx9rzqi7cybbyxdh38cktw9o65883\\\",\\n \\\"previous\\\": \\\"F8BA8CBE61C679231EB06FA03A0CD7CFBE68746396CBBA169BD9E12725682B44\\\",\\n \\\"representative\\\": \\\"xrb_3o7uzba8b9e1wqu5ziwpruteyrs3scyqr761x7ke6w1xctohxfh5du75qgaj\\\",\\n \\\"balance\\\": \\\"61202000000000000000000000000\\\",\\n \\\"link\\\": \\\"CA24AAAA4BEA37D611EC72ABD283113AC133E3DBF8A7A557CFCA4CF9B354932C\\\",\\n \\\"link_as_account\\\": \\\"xrb_3kj6oco6qtjqtrayrwodtc3j4gp38hjxqy79nodwzkkez8sob6sezmmct61s\\\",\\n \\\"signature\\\": \\\"744B338DBCDFC2C4849DA44C468EEF99338F1D2D6BADFF20C0F54CB2DE759B512AFE41010EB212CE67D98E10635C2C08AEA517940862EB7DC58E8DFA43B2B408\\\",\\n \\\"work\\\": \\\"e6d5a6ec29db25d6\\\"\\n}\\n\" } } } Optional \"contents\" Boolean, true by default. Disable contents for each block Optional \"json_block\" version 19.0+ Default \"false\". If \"true\", \"contents\" will contain a JSON subtree instead of a JSON string. Optional \"representatives\" Boolean, false by default. Returns list of votes representatives & its weights for each block Request: { \"action\" : \"confirmation_info\" , \"root\" : \"F8BA8CBE61C679231EB06FA03A0CD7CFBE68746396CBBA169BD9E12725682B44\" , \"representatives\" : \"true\" } Response: { \"announcements\" : \"1\" , \"last_winner\" : \"36CC459675E9FB2DB960C330BAFECB50132DB0394E83C14C7D1359ACB17F5BD2\" , \"total_tally\" : \"66508449034656215696897986086066451444\" , \"blocks\" : { \"36CC459675E9FB2DB960C330BAFECB50132DB0394E83C14C7D1359ACB17F5BD2\" : { \"tally\" : \"66508449034656215696897986086066451444\" , \"contents\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_3mi58wc8p7uptp5gmt8k4wb5qbizm6chx9rzqi7cybbyxdh38cktw9o65883\\\",\\n \\\"previous\\\": \\\"F8BA8CBE61C679231EB06FA03A0CD7CFBE68746396CBBA169BD9E12725682B44\\\",\\n \\\"representative\\\": \\\"xrb_3o7uzba8b9e1wqu5ziwpruteyrs3scyqr761x7ke6w1xctohxfh5du75qgaj\\\",\\n \\\"balance\\\": \\\"61202000000000000000000000000\\\",\\n \\\"link\\\": \\\"CA24AAAA4BEA37D611EC72ABD283113AC133E3DBF8A7A557CFCA4CF9B354932C\\\",\\n \\\"link_as_account\\\": \\\"xrb_3kj6oco6qtjqtrayrwodtc3j4gp38hjxqy79nodwzkkez8sob6sezmmct61s\\\",\\n \\\"signature\\\": \\\"744B338DBCDFC2C4849DA44C468EEF99338F1D2D6BADFF20C0F54CB2DE759B512AFE41010EB212CE67D98E10635C2C08AEA517940862EB7DC58E8DFA43B2B408\\\",\\n \\\"work\\\": \\\"e6d5a6ec29db25d6\\\"\\n}\\n\" , \"representatives\" : { \"xrb_3pczxuorp48td8645bs3m6c3xotxd3idskrenmi65rbrga5zmkemzhwkaznh\" : \"15542840930304007355829653636255997615\" , \"xrb_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\" : \"10262330414015196177405695154517720446\" , ... \"xrb_151jp8kuecdqq3pudrucx4hk5a6nri1fr7r6sbie8zc1ygid1cc4387q9g45\" : \"0\" } } } } confirmation_quorum \u00b6 version 16.0+ Returns information about node elections settings & observed network state: delta tally required to rollback block, percentage of online weight for delta, minimum online weight to confirm block, currently observed online total weight, known peers total weight Request: { \"action\" : \"confirmation_quorum\" } Response: { \"quorum_delta\" : \"41469707173777717318245825935516662250\" , \"online_weight_quorum_percent\" : \"50\" , \"online_weight_minimum\" : \"60000000000000000000000000000000000000\" , \"online_stake_total\" : \"82939414347555434636491651871033324568\" , \"peers_stake_total\" : \"69026910610720098597176027400951402360\" , \"peers_stake_required\" : \"60000000000000000000000000000000000000\" } Optional \"peer_details\" version 17.0+ Boolean, false by default. If true, add account/ip/rep weight for each peer considered in the summation of peers_stake_total . Response field \"peers_stake_required\" version 19.0+ The effective peer stake needed for quorum. Per v19, this field is computed as max(quorum_delta, online_weight_minimum) database_txn_tracker \u00b6 v19.0+ Debug purposes only This call is for internal diagnostics/debug purposes only. Do not rely on this interface being stable and do not use in a production system. Returns a list of open database transactions which are equal or greater than the min_read_time or min_write_time for reads and read-writes respectively. Request: { \"action\" : \"database_txn_tracker\" , \"min_read_time\" : \"1000\" \"min_write_time\" : \"0\" } Response on Windows/Debug: { \"txn_tracking\" : [ { \"thread\" : \"Blck processing\" , // Which thread held the transaction \"time_held_open\" : \"2\" , // Seconds the transaction has currently been held open for \"write\" : \"true\" , // If true it is a write lock, otherwise false. \"stacktrace\" : [ ... { \"name\" : \"nano::mdb_store::tx_begin_write\" , \"address\" : \"00007FF7142C5F86\" , \"source_file\" : \"c:\\\\users\\\\wesley\\\\documents\\\\raiblocks\\\\nano\\\\node\\\\lmdb.cpp\" , \"source_line\" : \"825\" }, { \"name\" : \"nano::block_processor::process_batch\" , \"address\" : \"00007FF714121EEA\" , \"source_file\" : \"c:\\\\users\\\\wesley\\\\documents\\\\raiblocks\\\\nano\\\\node\\\\blockprocessor.cpp\" , \"source_line\" : \"243\" }, { \"name\" : \"nano::block_processor::process_blocks\" , \"address\" : \"00007FF71411F8A6\" , \"source_file\" : \"c:\\\\users\\\\wesley\\\\documents\\\\raiblocks\\\\nano\\\\node\\\\blockprocessor.cpp\" , \"source_line\" : \"103\" }, ... ] } .... ] } delegators \u00b6 version 8.0+ Returns a list of pairs of delegator names given account a representative and its balance Request: { \"action\" : \"delegators\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" } Response: { \"delegators\" : { \"xrb_13bqhi1cdqq8yb9szneoc38qk899d58i5rcrgdk5mkdm86hekpoez3zxw5sd\" : \"500000000000000000000000000000000000\" , \"xrb_17k6ug685154an8gri9whhe5kb5z1mf5w6y39gokc1657sh95fegm8ht1zpn\" : \"961647970820730000000000000000000000\" } } delegators_count \u00b6 version 8.0+ Get number of delegators for a specific representative account Request: { \"action\" : \"delegators_count\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" } Response: { \"count\" : \"2\" } deterministic_key \u00b6 Derive deterministic keypair from seed based on index Request: { \"action\" : \"deterministic_key\" , \"seed\" : \"0000000000000000000000000000000000000000000000000000000000000000\" , \"index\" : \"0\" } Response: { \"private\" : \"9F0E444C69F77A49BD0BE89DB92C38FE713E0963165CCA12FAF5712D7657120F\" , \"public\" : \"C008B814A7D269A1FA3C6528B19201A24D797912DB9996FF02A1FF356E45552B\" , \"account\" : \"xrb_3i1aq1cchnmbn9x5rsbap8b15akfh7wj7pwskuzi7ahz8oq6cobd99d4r3b7\" } frontier_count \u00b6 Reports the number of accounts in the ledger Request: { \"action\" : \"frontier_count\" } Response: { \"count\" : \"920471\" } frontiers \u00b6 Returns a list of pairs of account and block hash representing the head block starting at account up to count Request: { \"action\" : \"frontiers\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111111hifc8npp\" , \"count\" : \"1\" } Response: { \"frontiers\" : { \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } } keepalive \u00b6 enable_control required Tells the node to send a keepalive packet to address : port Request: { \"action\" : \"keepalive\" , \"address\" : \"::ffff:192.169.0.1\" , \"port\" : \"1024\" } Response: { } key_create \u00b6 Generates an adhoc random keypair Request: { \"action\" : \"key_create\" } Response: { \"private\" : \"781186FB9EF17DB6E3D1056550D9FAE5D5BBADA6A6BC370E4CBB938B1DC71DA3\" , \"public\" : \"3068BB1CA04525BB0E416C485FE6A67FD52540227D267CC8B6E8DA958A7FA039\" , \"account\" : \"xrb_1e5aqegc1jb7qe964u4adzmcezyo6o146zb8hm6dft8tkp79za3sxwjym5rx\" } key_expand \u00b6 Derive public key and account number from private key Request: { \"action\" : \"key_expand\" , \"key\" : \"781186FB9EF17DB6E3D1056550D9FAE5D5BBADA6A6BC370E4CBB938B1DC71DA3\" } Response: { \"private\" : \"781186FB9EF17DB6E3D1056550D9FAE5D5BBADA6A6BC370E4CBB938B1DC71DA3\" , \"public\" : \"3068BB1CA04525BB0E416C485FE6A67FD52540227D267CC8B6E8DA958A7FA039\" , \"account\" : \"xrb_1e5aqegc1jb7qe964u4adzmcezyo6o146zb8hm6dft8tkp79za3sxwjym5rx\" } ledger \u00b6 enable_control required, version 9.0+ Returns frontier, open block, change representative block, balance, last modified timestamp from local database & block count starting at account up to count Request: { \"action\" : \"ledger\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111111hifc8npp\" , \"count\" : \"1\" } Response: { \"accounts\" : { \"xrb_11119gbh8hb4hj1duf7fdtfyf5s75okzxdgupgpgm1bj78ex3kgy7frt3s9n\" : { \"frontier\" : \"E71AF3E9DD86BBD8B4620EFA63E065B34D358CFC091ACB4E103B965F95783321\" , \"open_block\" : \"643B77F1ECEFBDBE1CC909872964C1DBBE23A6149BD3CEF2B50B76044659B60F\" , \"representative_block\" : \"643B77F1ECEFBDBE1CC909872964C1DBBE23A6149BD3CEF2B50B76044659B60F\" , \"balance\" : \"0\" , \"modified_timestamp\" : \"1511476234\" , \"block_count\" : \"2\" } } } Optional \"representative\", \"weight\", \"pending\" Booleans, false by default. Additionally returns representative, voting weight, pending balance for each account Request: { \"action\" : \"ledger\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111111hifc8npp\" , \"count\" : \"1\" , \"representative\" : \"true\" , \"weight\" : \"true\" , \"pending\" : \"true\" } Response: { \"accounts\" : { \"xrb_11119gbh8hb4hj1duf7fdtfyf5s75okzxdgupgpgm1bj78ex3kgy7frt3s9n\" : { \"frontier\" : \"E71AF3E9DD86BBD8B4620EFA63E065B34D358CFC091ACB4E103B965F95783321\" , \"open_block\" : \"643B77F1ECEFBDBE1CC909872964C1DBBE23A6149BD3CEF2B50B76044659B60F\" , \"representative_block\" : \"643B77F1ECEFBDBE1CC909872964C1DBBE23A6149BD3CEF2B50B76044659B60F\" , \"balance\" : \"0\" , \"modified_timestamp\" : \"1511476234\" , \"block_count\" : \"2\" , \"representative\" : \"xrb_1anrzcuwe64rwxzcco8dkhpyxpi8kd7zsjc1oeimpc3ppca4mrjtwnqposrs\" , \"weight\" : \"0\" , \"pending\" : \"0\" } } } Optional \"modified_since\" version 11.0+ UNIX timestamp (number), 0 by default. Return only accounts modified in local database after specific timestamp Optional \"sorting\" Boolean, false by default. Additional sorting accounts in descending order NOTE: The \"count\" option is ignored if \"sorting\" is specified node_id \u00b6 enable_control required, version 17.0+ Debug purposes only This call is for internal diagnostics/debug purposes only. Do not rely on this interface being stable and do not use in a production system. Derive private key, public key and account number from node ID Request: { \"action\" : \"node_id\" } Response: { \"private\" : \"2AD75C9DC20EA497E41722290C4DC966ECC4D6C75CAA4E447961F918FD73D8C7\" , \"public\" : \"78B11E1777B8E7DF9090004376C3EDE008E84680A497C0805F68CA5928626E1C\" , \"as_account\" : \"xrb_1y7j5rdqhg99uyab1145gu3yur1ax35a3b6qr417yt8cd6n86uiw3d4whty3\" } node_id_delete \u00b6 enable_control required, version 17.0+ Debug purposes only This call is for internal diagnostics/debug purposes only. Do not rely on this interface being stable and do not use in a production system. Removing node ID (restart required to take effect) Request: { \"action\" : \"node_id_delete\" } Response: { \"deleted\" : \"1\" } peers \u00b6 Returns a list of pairs of online peer IPv6:port and its node protocol network version Request: { \"action\" : \"peers\" } Response version 8.0+: { \"peers\" : { \"[::ffff:172.17.0.1]:32841\" : \"16\" } } Response before version 8.0: { \"peers\" : [ \"[::ffff:172.17.0.1]:32841\" ] } Optional \"peer_details\" version 18.0+ Boolean, false by default. Returns a list of peers IPv6:port with its node protocol network version and node ID. type returned in version 19.0+ as either tcp (preferred) or udp (fallback) used for peering with that node. Response: { \"peers\" : { \"[::ffff:172.17.0.1]:32841\" : { \"protocol_version\" : \"16\" , \"node_id\" : \"xrb_1y7j5rdqhg99uyab1145gu3yur1ax35a3b6qr417yt8cd6n86uiw3d4whty3\" , \"type\" : \"udp\" } } } pending \u00b6 Returns a list of block hashes which have not yet been received by this account. Request: { \"action\" : \"pending\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" , \"count\" : \"1\" } Response: { \"blocks\" : [ \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" ] } Optional \"count\" Number. Determines limit of number of blocks to return. Optional \"threshold\" version 8.0+ Number (128 bit, decimal). Returns a list of pending block hashes with amount more or equal to threshold Request: { \"action\" : \"pending\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" , \"count\" : \"1\" , \"threshold\" : \"1000000000000000000000000\" } Response: { \"blocks\" : { \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" : \"6000000000000000000000000000000\" } } Optional \"source\" version 9.0+ Boolean, false by default. Returns a list of pending block hashes with amount and source accounts Request: { \"action\" : \"pending\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" , \"count\" : \"1\" , \"source\" : \"true\" } Response: { \"blocks\" : { \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" : { \"amount\" : \"6000000000000000000000000000000\" , \"source\" : \"xrb_3dcfozsmekr1tr9skf1oa5wbgmxt81qepfdnt7zicq5x3hk65fg4fqj58mbr\" } } } Optional \"include_active\" version 15.0+ Boolean, false by default. Include active blocks without finished confirmations Request: { \"action\" : \"pending\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" , \"count\" : \"1\" , \"include_active\" : \"true\" } Optional \"sorting\" version 19.0+ Boolean, false by default. Additionally sorts the blocks by their amounts in descending order. Optional \"include_only_confirmed\" version 19.0+ Boolean, false by default. Only returns block which have their confirmation height set or are undergoing confirmation height processing. pending_exists \u00b6 version 8.0+ Check whether block is pending by hash Request: { \"action\" : \"pending_exists\" , \"hash\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"exists\" : \"1\" } Optional \"include_active\" version 15.0+ Boolean, false by default. Include active blocks without finished confirmations Request: { \"action\" : \"pending_exists\" , \"hash\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"include_active\" : \"true\" } Optional \"include_only_confirmed\" version 19.0+ Boolean, false by default. Only returns hashes which have their confirmation height set or are undergoing confirmation height processing. process \u00b6 Publish block to the network Request: { \"action\" : \"process\" , \"block\" : \"{ \\\"type\\\": \\\"state\\\", \\\"account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\", \\\"previous\\\": \\\"6CDDA48608C7843A0AC1122BDD46D9E20E21190986B19EAC23E7F33F2E6A6766\\\", \\\"representative\\\": \\\"xrb_3pczxuorp48td8645bs3m6c3xotxd3idskrenmi65rbrga5zmkemzhwkaznh\\\", \\\"balance\\\": \\\"40200000001000000000000000000000000\\\", \\\"link\\\": \\\"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\\\", \\\"link_as_account\\\": \\\"xrb_33t5by1653nt196hfwm5q3wq7oxtaix97r7bhox5zn8eratrzoqsny49ftsd\\\", \\\"signature\\\": \\\"A5DB164F6B81648F914E49CAB533900C389FAAD64FBB24F6902F9261312B29F730D07E9BCCD21D918301419B4E05B181637CF8419ED4DCBF8EF2539EB2467F07\\\", \\\"work\\\": \\\"000bc55b014e807d\\\" }\" } Response: { \"hash\" : \"E2FB233EF4554077A7BF1AA85851D5BF0B36965D2B0FB504B2BC778AB89917D3\" } Optional \"force\" version 13.1+ Boolean, false by default. Manually forcing fork resolution if processed block is not accepted as fork Optional \"subtype\" version 18.0+ String, empty by default. Additional check for state blocks subtype (send/receive/open/change/epoch). I.e. prevent accidental sending to incorrect accounts instead of receiving pending blocks Optional \"json_block\" version 19.0+ Default \"false\". If \"true\", \"block\" must contain a JSON subtree instead of a JSON string. representatives \u00b6 Returns a list of pairs of representative and its voting weight Request: { \"action\" : \"representatives\" } Response: { \"representatives\" : { \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" : \"3822372327060170000000000000000000000\" , \"xrb_1111111111111111111111111111111111111111111111111awsq94gtecn\" : \"30999999999999999999999999000000\" , \"xrb_114nk4rwjctu6n6tr6g6ps61g1w3hdpjxfas4xj1tq6i8jyomc5d858xr1xi\" : \"0\" } } Optional \"count\" version 9.0+ Number. Returns a list of pairs of representative and its voting weight up to count Optional \"sorting\" version 9.0+ Boolean, false by default. Additional sorting representatives in descending order NOTE: The \"count\" option is ignored if \"sorting\" is specified representatives_online \u00b6 version 18.0+ Returns a list of online representative accounts that have voted recently Request: { \"action\" : \"representatives_online\" } Response: { \"representatives\" : [ \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" , \"xrb_1111111111111111111111111111111111111111111111111awsq94gtecn\" , \"xrb_114nk4rwjctu6n6tr6g6ps61g1w3hdpjxfas4xj1tq6i8jyomc5d858xr1xi\" ] } versions 11.2\u201317.1 Returns a list of pairs of online representative accounts that have voted recently and empty strings Response: { \"representatives\" : { \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" : \"\" , \"xrb_1111111111111111111111111111111111111111111111111awsq94gtecn\" : \"\" , \"xrb_114nk4rwjctu6n6tr6g6ps61g1w3hdpjxfas4xj1tq6i8jyomc5d858xr1xi\" : \"\" } } Optional \"weight\" version 17.0+ Boolean, false by default. Returns voting weight for each representative. Response: { \"representatives\" : { \"xrb_114nk4rwjctu6n6tr6g6ps61g1w3hdpjxfas4xj1tq6i8jyomc5d858xr1xi\" : { \"weight\" : \"150462654614686936429917024683496890\" } } } republish \u00b6 Rebroadcast blocks starting at hash to the network Request: { \"action\" : \"republish\" , \"hash\" : \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" } Response: { \"blocks\" : [ \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" , \"A170D51B94E00371ACE76E35AC81DC9405D5D04D4CEBC399AEACE07AE05DD293\" ] } Optional \"sources\" version 8.0+ Boolean, false by default. Additionally rebroadcast source chain blocks for receive/open up to sources depth Request: { \"action\" : \"republish\" , \"hash\" : \"90D0C16AC92DD35814E84BFBCC739A039615D0A42A76EF44ADAEF1D99E9F8A35\" , \"count\" : \"1\" , \"sources\" : \"2\" } Response: { \"blocks\" : [ \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" , \"A170D51B94E00371ACE76E35AC81DC9405D5D04D4CEBC399AEACE07AE05DD293\" , \"90D0C16AC92DD35814E84BFBCC739A039615D0A42A76EF44ADAEF1D99E9F8A35\" ] } Optional \"destinations\" version 8.0+ Boolean, false by default. Additionally rebroadcast destination chain blocks from receive up to destinations depth Request: { \"action\" : \"republish\" , \"hash\" : \"A170D51B94E00371ACE76E35AC81DC9405D5D04D4CEBC399AEACE07AE05DD293\" , \"count\" : \"1\" , \"destinations\" : \"2\" } Response: { \"blocks\" : [ \"A170D51B94E00371ACE76E35AC81DC9405D5D04D4CEBC399AEACE07AE05DD293\" , \"90D0C16AC92DD35814E84BFBCC739A039615D0A42A76EF44ADAEF1D99E9F8A35\" , \"18563C814A54535B7C12BF76A0E23291BA3769536634AB90AD0305776A533E8E\" ] } sign \u00b6 version 18.0+ Signing provided block with private key or key of account from wallet Request with private key: { \"action\" : \"sign\" , \"key\" : \"1D3759BB2CA187A66875D3B8497624159A576FD315E07F702B99B92BC59FC14A\" , \"block\" : \"{ \\\"type\\\": \\\"state\\\", \\\"account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\", \\\"previous\\\": \\\"6CDDA48608C7843A0AC1122BDD46D9E20E21190986B19EAC23E7F33F2E6A6766\\\", \\\"representative\\\": \\\"xrb_3pczxuorp48td8645bs3m6c3xotxd3idskrenmi65rbrga5zmkemzhwkaznh\\\", \\\"balance\\\": \\\"40200000001000000000000000000000000\\\", \\\"link\\\": \\\"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\\\", \\\"link_as_account\\\": \\\"xrb_33t5by1653nt196hfwm5q3wq7oxtaix97r7bhox5zn8eratrzoqsny49ftsd\\\", \\\"signature\\\": \\\"A5DB164F6B81648F914E49CAB533900C389FAAD64FBB24F6902F9261312B29F730D07E9BCCD21D918301419B4E05B181637CF8419ED4DCBF8EF2539EB2467F07\\\", \\\"work\\\": \\\"000bc55b014e807d\\\" }\" } Request with account from wallet: { \"action\" : \"sign\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"account\" : \"xrb_18ky5chy5ws89oi46ki4zjy6x5ezpmj98zg6icwke9bmuy99nosieyqf8c1h\" , \"block\" : \"{ \\\"type\\\": \\\"state\\\", \\\"account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\", \\\"previous\\\": \\\"6CDDA48608C7843A0AC1122BDD46D9E20E21190986B19EAC23E7F33F2E6A6766\\\", \\\"representative\\\": \\\"xrb_3pczxuorp48td8645bs3m6c3xotxd3idskrenmi65rbrga5zmkemzhwkaznh\\\", \\\"balance\\\": \\\"40200000001000000000000000000000000\\\", \\\"link\\\": \\\"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\\\", \\\"link_as_account\\\": \\\"xrb_33t5by1653nt196hfwm5q3wq7oxtaix97r7bhox5zn8eratrzoqsny49ftsd\\\", \\\"signature\\\": \\\"A5DB164F6B81648F914E49CAB533900C389FAAD64FBB24F6902F9261312B29F730D07E9BCCD21D918301419B4E05B181637CF8419ED4DCBF8EF2539EB2467F07\\\", \\\"work\\\": \\\"000bc55b014e807d\\\" }\" } Response: { \"signature\" : \"2A71F3877033F5966735F260E906BFCB7FA82CDD543BCD1224F180F85A96FC26CB3F0E4180E662332A0DFE4EE6A0F798A71C401011E635604E532383EC08C70D\" , \"block\" : \"{ \\\"type\\\": \\\"state\\\", \\\"account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\", \\\"previous\\\": \\\"6CDDA48608C7843A0AC1122BDD46D9E20E21190986B19EAC23E7F33F2E6A6766\\\", \\\"representative\\\": \\\"xrb_3pczxuorp48td8645bs3m6c3xotxd3idskrenmi65rbrga5zmkemzhwkaznh\\\", \\\"balance\\\": \\\"40200000001000000000000000000000000\\\", \\\"link\\\": \\\"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\\\", \\\"link_as_account\\\": \\\"xrb_33t5by1653nt196hfwm5q3wq7oxtaix97r7bhox5zn8eratrzoqsny49ftsd\\\", \\\"signature\\\": \\\"2A71F3877033F5966735F260E906BFCB7FA82CDD543BCD1224F180F85A96FC26CB3F0E4180E662332A0DFE4EE6A0F798A71C401011E635604E532383EC08C70D\\\", \\\"work\\\": \\\"000bc55b014e807d\\\" }\" } Optional \"json_block\" version 19.0+ Default \"false\". If \"true\", the input \"block\" must contain a JSON subtree instead of a JSON string. In addition, the response block will be a JSON subtree. Optional sign block hash Requires config.json modification. Set \"enable_sign_hash\" to \"true\" Request: { \"action\" : \"sign\" , \"hash\" : \"E2FB233EF4554077A7BF1AA85851D5BF0B36965D2B0FB504B2BC778AB89917D3\" } Response: { \"signature\" : \"2A71F3877033F5966735F260E906BFCB7FA82CDD543BCD1224F180F85A96FC26CB3F0E4180E662332A0DFE4EE6A0F798A71C401011E635604E532383EC08C70D\" } stats \u00b6 version 12.2+ For configuration and other details, please see Statistics from RPC Request counters: { \"action\" : \"stats\" , \"type\" : \"counters\" } Counters response: { \"type\" : \"counters\" , \"created\" : \"2018.03.29 01:46:36\" , \"entries\" : [ { \"time\" : \"01:46:36\" , \"type\" : \"traffic\" , \"detail\" : \"all\" , \"dir\" : \"in\" , \"value\" : \"3122792\" }, { \"time\" : \"01:46:36\" , \"type\" : \"traffic\" , \"detail\" : \"all\" , \"dir\" : \"out\" , \"value\" : \"203184\" } ... ] } version 18.0+ also returns \"stat_duration_seconds\": the number of seconds since startup or since the last \"stats_clear\" call Request samples: { \"action\" : \"stats\" , \"type\" : \"samples\" } Samples response: { \"type\" : \"samples\" , \"created\" : \"2018.03.29 01:47:08\" , \"entries\" : [ { \"time\" : \"01:47:04\" , \"type\" : \"traffic\" , \"detail\" : \"all\" , \"dir\" : \"in\" , \"value\" : \"59480\" }, { \"time\" : \"01:47:05\" , \"type\" : \"traffic\" , \"detail\" : \"all\" , \"dir\" : \"in\" , \"value\" : \"44496\" } ... ] } version 18.0+ NOTE: This call is for debug purposes only and is unstable as returned objects may be frequently changed. Request objects: { \"action\" : \"stats\" , \"type\" : \"objects\" } Objects response: { \"node\" : { \"ledger\" : { \"bootstrap_weights\" : { \"count\" : \"125\" , \"size\" : \"7000\" } }, \"peers\" : { \"peers\" : { \"count\" : \"38\" , \"size\" : \"7296\" }, \"attempts\" : { \"count\" : \"95\" , \"size\" : \"3800\" }, }, ... } } stats_clear \u00b6 version 18.0+ Clears all collected statistics. The \"stat_duration_seconds\" value in the \"stats\" action is also reset. Request: { \"action\" : \"stats_clear\" } Response: { \"success\" : \"\" } stop \u00b6 enable_control required Method to safely shutdown node Request: { \"action\" : \"stop\" } Response: { \"success\" : \"\" } successors \u00b6 Returns a list of block hashes in the account chain starting at block up to count (direction from open block up to frontier, from older blocks to newer). Will list all blocks up to frontier (latest block) of this chain when count is set to \"-1\". The requested block hash is included in the answer. Request: { \"action\" : \"successors\" , \"block\" : \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" , \"count\" : \"1\" } Response: { \"blocks\" : [ \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" ] } Optional \"offset\" version 18.0+ Number, 0 by default. Return the account chain block hashes offset by the specified number of blocks Optional \"reverse\" version 18.0+ Boolean, false by default. Returns a consecutive list of block hashes in the account chain starting at block back to count (direction from frontier back to open block, from newer blocks to older). Equal to chain validate_account_number \u00b6 Check whether account is a valid account number using checksum Request: { \"action\" : \"validate_account_number\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" } Response: { \"valid\" : \"1\" } version \u00b6 Returns version information for RPC, Store, Protocol (network) & Node (Major & Minor version) RPC Version always returns \"1\" as of 01/11/2018 Request: { \"action\" : \"version\" } Response: { \"rpc_version\" : \"1\" , \"store_version\" : \"11\" , \"protocol_version\" : \"15\" , \"node_vendor\" : \"RaiBlocks 17.0\" } unchecked \u00b6 version 8.0+ Returns a list of pairs of unchecked synchronizing block hash and its json representation up to count Request: { \"action\" : \"unchecked\" , \"count\" : \"1\" } Response: { \"blocks\" : { \"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\\\",\\n \\\"previous\\\": \\\"CE898C131AAEE25E05362F247760F8A3ACF34A9796A5AE0D9204E86B0637965E\\\",\\n \\\"representative\\\": \\\"xrb_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\\\",\\n \\\"balance\\\": \\\"5606157000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"5D1AA8A45F8736519D707FCB375976A7F9AF795091021D7E9C7548D6F45DD8D5\\\",\\n \\\"link_as_account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\",\\n \\\"signature\\\": \\\"82D41BC16F313E4B2243D14DFFA2FB04679C540C2095FEE7EAE0F2F26880AD56DD48D87A7CC5DD760C5B2D76EE2C205506AA557BF00B60D8DEE312EC7343A501\\\",\\n \\\"work\\\": \\\"8a142e07a10996d5\\\"\\n }\\n\" } } unchecked_clear \u00b6 enable_control required, version 8.0+ Clear unchecked synchronizing blocks Request: { \"action\" : \"unchecked_clear\" } Response: { \"success\" : \"\" } unchecked_get \u00b6 version 8.0+ Retrieves a json representation of unchecked synchronizing block by hash Request: { \"action\" : \"unchecked_get\" , \"hash\" : \"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\" } Response: { \"contents\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\\\",\\n \\\"previous\\\": \\\"CE898C131AAEE25E05362F247760F8A3ACF34A9796A5AE0D9204E86B0637965E\\\",\\n \\\"representative\\\": \\\"xrb_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\\\",\\n \\\"balance\\\": \\\"5606157000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"5D1AA8A45F8736519D707FCB375976A7F9AF795091021D7E9C7548D6F45DD8D5\\\",\\n \\\"link_as_account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\",\\n \\\"signature\\\": \\\"82D41BC16F313E4B2243D14DFFA2FB04679C540C2095FEE7EAE0F2F26880AD56DD48D87A7CC5DD760C5B2D76EE2C205506AA557BF00B60D8DEE312EC7343A501\\\",\\n \\\"work\\\": \\\"8a142e07a10996d5\\\"\\n }\\n\" } Optional \"json_block\" version 19.0+ Default \"false\". If \"true\", \"contents\" will contain a JSON subtree instead of a JSON string. unchecked_keys \u00b6 version 8.0+ Retrieves unchecked database keys, blocks hashes & a json representations of unchecked pending blocks starting from key up to count Request: { \"action\" : \"unchecked_keys\" , \"key\" : \"CE898C131AAEE25E05362F247760F8A3ACF34A9796A5AE0D9204E86B0637965E\" , \"count\" : \"1\" } Response: { \"unchecked\" : [ { \"key\" : \"CE898C131AAEE25E05362F247760F8A3ACF34A9796A5AE0D9204E86B0637965E\" , \"hash\" : \"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\" , \"contents\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\\\",\\n \\\"previous\\\": \\\"CE898C131AAEE25E05362F247760F8A3ACF34A9796A5AE0D9204E86B0637965E\\\",\\n \\\"representative\\\": \\\"xrb_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\\\",\\n \\\"balance\\\": \\\"5606157000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"5D1AA8A45F8736519D707FCB375976A7F9AF795091021D7E9C7548D6F45DD8D5\\\",\\n \\\"link_as_account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\",\\n \\\"signature\\\": \\\"82D41BC16F313E4B2243D14DFFA2FB04679C540C2095FEE7EAE0F2F26880AD56DD48D87A7CC5DD760C5B2D76EE2C205506AA557BF00B60D8DEE312EC7343A501\\\",\\n \\\"work\\\": \\\"8a142e07a10996d5\\\"\\n }\\n\" } ] } Optional \"json_block\" version 19.0+ Default \"false\". If \"true\", \"contents\" will contain a JSON subtree instead of a JSON string. unopened \u00b6 enable_control required, version 19.0+ Returns the total pending balance for unopened accounts in the local database, starting at account (optional) up to count (optional), sorted by account number. Notes: By default excludes the burn account. Request: { \"action\" : \"unopened\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111111hifc8npp\" , \"count\" : \"1\" } Response: { \"accounts\" : { \"xrb_1111111111111111111111111111111111111111111111111111hifc8npp\" : \"207034077034226183413773082289554618448\" } } uptime \u00b6 version 18.0+ Return node uptime in seconds Request: { \"action\" : \"uptime\" } Response: { \"seconds\" : \"6000\" } work_cancel \u00b6 enable_control required Stop generating work for block Request: { \"action\" : \"work_cancel\" , \"hash\" : \"718CC2121C3E641059BC1C2CFC45666C99E8AE922F7A807B7D07B62C995D79E2\" } Response: { } work_generate \u00b6 enable_control required Generates work for block Request: { \"action\" : \"work_generate\" , \"hash\" : \"718CC2121C3E641059BC1C2CFC45666C99E8AE922F7A807B7D07B62C995D79E2\" } Response: { \"work\" : \"2bf29ef00786a6bc\" , \"difficulty\" : \"ffffffd21c3933f4\" , \"multiplier\" : \"1.394647\" } Optional \"use_peers\" version 14.0+ Boolean, false by default. If the optional use_peers parameter is set to true , then the node will query its work peers (if it has any). Without this parameter, the node will only generate work locally. Optional \"difficulty\" version 19.0+ Difficulty value (16 hexadecimal digits string, 64 bit). Uses difficulty value to generate work work_peer_add \u00b6 enable_control required, version 8.0+ Add specific IP address and port as work peer for node until restart Request: { \"action\" : \"work_peer_add\" , \"address\" : \"::ffff:172.17.0.1\" , \"port\" : \"7076\" } Response: { \"success\" : \"\" } work_peers \u00b6 enable_control required, version 8.0+ Request: { \"action\" : \"work_peers\" } Response: { \"work_peers\" : [ \"::ffff:172.17.0.1:7076\" ] } work_peers_clear \u00b6 enable_control required, version 8.0+ Clear work peers node list until restart Request: { \"action\" : \"work_peers_clear\" } Response: { \"success\" : \"\" } work_validate \u00b6 Check whether work is valid for block Request: { \"action\" : \"work_validate\" , \"work\" : \"2bf29ef00786a6bc\" , \"hash\" : \"718CC2121C3E641059BC1C2CFC45666C99E8AE922F7A807B7D07B62C995D79E2\" } Response: { \"valid\" : \"1\" , \"difficulty\" : \"ffffffd21c3933f4\" , \"multiplier\" : \"1.394647\" } Since version 19.0+: The response also includes the work value in hexadecimal format, and a multiplier from the base difficulty (not from the optionally given difficulty). Optional \"difficulty\" version 19.0+ Difficulty value (16 hexadecimal digits string, 64 bit). Uses difficulty value to validate work Wallet RPCs \u00b6 For development and testing only Below are RPC commands that interact with the built-in, QT-based node wallet. This wallet is only recommended for development and testing. For production integrations, setting up custom External Management processes is required. account_create \u00b6 enable_control required Creates a new account, insert next deterministic key in wallet Request: { \"action\" : \"account_create\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" } Optional \"index\" version 18.0+ unset by default. Indicates which index to create account for starting with 0 Request: { \"action\" : \"account_create\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"index\" : \"1\" } Optional \"work\" version 9.0+ Boolean, true by default. Setting false disables work generation after creating account Request: { \"action\" : \"account_create\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"work\" : \"false\" } account_list \u00b6 Lists all the accounts inside wallet Request: { \"action\" : \"account_list\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"accounts\" : [ \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" ] } account_move \u00b6 enable_control required Moves accounts from source to wallet Request: { \"action\" : \"account_move\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"source\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"accounts\" : [ \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" ] } Response: { \"moved\" : \"1\" } account_remove \u00b6 enable_control required Remove account from wallet Request: { \"action\" : \"account_remove\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"account\" : \"xrb_39a73oy5ungrhxy5z5oao1xso4zo7dmgpjd4u74xcrx3r1w6rtazuouw6qfi\" } Response: { \"removed\" : \"1\" } account_representative_set \u00b6 enable_control required Sets the representative for account in wallet Request: { \"action\" : \"account_representative_set\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"account\" : \"xrb_39a73oy5ungrhxy5z5oao1xso4zo7dmgpjd4u74xcrx3r1w6rtazuouw6qfi\" , \"representative\" : \"xrb_16u1uufyoig8777y6r8iqjtrw8sg8maqrm36zzcm95jmbd9i9aj5i8abr8u5\" } Response: { \"block\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Optional \"work\" version 9.0+ Work value (16 hexadecimal digits string, 64 bit). Uses work value for block from external source accounts_create \u00b6 enable_control required, version 9.0+ Creates new accounts, insert next deterministic keys in wallet up to count Request: { \"action\" : \"accounts_create\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"count\" : \"2\" } Response: { \"accounts\" : [ \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"xrb_1e5aqegc1jb7qe964u4adzmcezyo6o146zb8hm6dft8tkp79za3s00000000\" ] } Optional enabling work generation version 11.2+ Boolean, false by default. Enables work generation after creating accounts Request: { \"action\" : \"accounts_create\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"count\" : \"2\" , \"work\" : \"true\" } Note: Before version 11.2 work generation was enabled by default, if you want to disable work generation for previous versions, use \"work\": \"false\" block_create (optional wallet) \u00b6 See block_create Node RPC command above password_change \u00b6 enable_control required Changes the password for wallet to password Request: { \"action\" : \"password_change\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"password\" : \"test\" } Response: { \"changed\" : \"1\" } password_enter \u00b6 Enters the password in to wallet to unlock it Request: { \"action\" : \"password_enter\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"password\" : \"test\" } Response: { \"valid\" : \"1\" } password_valid \u00b6 Checks whether the password entered for wallet is valid Request: { \"action\" : \"password_valid\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"valid\" : \"1\" } receive \u00b6 enable_control required Receive pending block for account in wallet Request: { \"action\" : \"receive\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"block\" : \"53EAA25CE28FA0E6D55EA9704B32604A736966255948594D55CBB05267CECD48\" } Response: { \"block\" : \"EE5286AB32F580AB65FD84A69E107C69FBEB571DEC4D99297E19E3FA5529547B\" } Optional \"work\" version 9.0+ Work value (16 hexadecimal digits string, 64 bit). Uses work value for block from external source receive_minimum \u00b6 enable_control required, version 8.0+ Returns receive minimum for node wallet Request: { \"action\" : \"receive_minimum\" } Response: { \"amount\" : \"1000000000000000000000000\" } receive_minimum_set \u00b6 enable_control required, version 8.0+ Set amount as new receive minimum for node wallet until restart Request: { \"action\" : \"receive_minimum_set\" , \"amount\" : \"1000000000000000000000000000000\" } Response: { \"success\" : \"\" } search_pending \u00b6 enable_control required Tells the node to look for pending blocks for any account in wallet Request: { \"action\" : \"search_pending\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"started\" : \"1\" } search_pending_all \u00b6 enable_control required, version 8.0+ Tells the node to look for pending blocks for any account in all available wallets Request: { \"action\" : \"search_pending_all\" } Response: { \"success\" : \"\" } send \u00b6 enable_control required Send amount from source in wallet to destination Request: { \"action\" : \"send\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"source\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"destination\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"amount\" : \"1000000\" } Response: { \"block\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Proof of Work is precomputed for one transaction in the background when you are using the node wallet to track accounts. If it has been a while since your last transaction it will send instantly, the next one will need to wait for Proof of Work to be generated. If the request times out, then the send may or may not have gone through. If you want to the ability to retry a failed send, all send calls must specify the id parameter as follows Highly recommended \"id\" version 10.0+ You can (and should) specify a unique id for each spend to provide idempotency . That means that if you call send two times with the same id, the second request won't send any additional Nano, and will return the first block instead. The id can be any string. This may be a required parameter in the future. If you accidentally reuse an id, the send will not go through (it will be seen as a duplicate request), so make sure your ids are unique! They must be unique per node, and are not segregated per wallet. Using the same id for requests with different parameters (wallet, source, destination, and amount) is undefined behavior and may result in an error in the future. Request: { \"action\" : \"send\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"source\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"destination\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"amount\" : \"1000000\" , \"id\" : \"7081e2b8fec9146e\" } Response: { \"block\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Sending the request again will yield the same block, and will not affect the ledger. Optional \"work\" version 9.0+ Work value (16 hexadecimal digits string, 64 bit). Uses work value for block from external source Request: { \"action\" : \"send\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"source\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"destination\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"amount\" : \"1000000\" , \"work\" : \"2bf29ef00786a6bc\" } sign (optional wallet) \u00b6 See sign Node RPC command above wallet_add \u00b6 enable_control required Add an adhoc private key key to wallet Request: { \"action\" : \"wallet_add\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"key\" : \"34F0A37AAD20F4A260F0A5B3CB3D7FB50673212263E58A380BC10474BB039CE4\" } Response: { \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" } Optional disabling work generation version 9.0+ Boolean, false by default. Disables work generation after adding account Request: { \"action\" : \"wallet_add\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"key\" : \"34F0A37AAD20F4A260F0A5B3CB3D7FB50673212263E58A380BC10474BB039CE4\" , \"work\" : \"false\" } wallet_add_watch \u00b6 enable_control required, version 11.0+ Add watch-only accounts to wallet Request: { \"action\" : \"wallet_add_watch\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"accounts\" : [ \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"xrb_111111111111111111111111111111111111111111111111111000000000\" ] } Response: { \"success\" : \"\" } wallet_balances \u00b6 Returns how many raw is owned and how many have not yet been received by all accounts in wallet Request: { \"action\" : \"wallet_balances\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"balances\" : { \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" : { \"balance\" : \"10000\" , \"pending\" : \"10000\" } } } Optional \"threshold\" version 9.0+ Number (128 bit, decimal). Returns wallet accounts balances more or equal to threshold wallet_change_seed \u00b6 enable_control required Changes seed for wallet to seed . Notes: Clear all deterministic accounts in wallet! To restore account from new seed use RPC accounts_create Request: { \"action\" : \"wallet_change_seed\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"seed\" : \"74F2B37AAD20F4A260F0A5B3CB3D7FB51673212263E58A380BC10474BB039CEE\" } Response: { \"success\" : \"\" , \"last_restored_account\" : \"xrb_1mhdfre3zczr86mp44jd3xft1g1jg66jwkjtjqixmh6eajfexxti7nxcot9c\" , \"restored_count\" : \"1\" } Optional \"count\" version 18.0+ Number, 0 by default. Manually set count of accounts to restore from seed wallet_contains \u00b6 Check whether wallet contains account Request: { \"action\" : \"wallet_contains\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" } Response: { \"exists\" : \"1\" } wallet_create \u00b6 enable_control required Creates a new random wallet id Request: { \"action\" : \"wallet_create\" } Response: { \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Optional \"seed\" version 18.0+ Seed value (64 hexadecimal digits string, 256 bit). Changes seed for a new wallet to seed , returning last restored account from given seed & restored count wallet_destroy \u00b6 enable_control required Destroys wallet and all contained accounts Request: { \"action\" : \"wallet_destroy\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"destroyed\" : \"1\" } wallet_export \u00b6 Return a json representation of wallet Request: { \"action\" : \"wallet_export\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"json\" : \"{\\\"0000000000000000000000000000000000000000000000000000000000000000\\\": \\\"0000000000000000000000000000000000000000000000000000000000000001\\\"}\" } wallet_frontiers \u00b6 Returns a list of pairs of account and block hash representing the head block starting for accounts from wallet Request: { \"action\" : \"wallet_frontiers\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"frontiers\" : { \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } } wallet_history \u00b6 version 18.0+ Reports send/receive information for accounts in wallet. Change blocks are skipped, open blocks will appear as receive. Response will start with most recent blocks according to local ledger. Request: { \"action\" : \"wallet_history\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"history\" : [ { \"type\" : \"send\" , \"account\" : \"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\" , \"amount\" : \"30000000000000000000000000000000000\" , \"block_account\" : \"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\" \"hash\" : \"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\" \"local_timestamp\" : \"1527698508\" }, \"type\" : \"send\" , \"account\" : \"xrb_38ztgpejb7yrm7rr586nenkn597s3a1sqiy3m3uyqjicht7kzuhnihdk6zpz\" , \"amount\" : \"40000000000000000000000000000000000\" , \"block_account\" : \"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\" \"hash\" : \"CE898C131AAEE25E05362F247760F8A3ACF34A9796A5AE0D9204E86B0637965E\" \"local_timestamp\" : \"1527698492\" } ] } Optional \"modified_since\" UNIX timestamp (number), 0 by default. Return only accounts modified in local database after specific timestamp wallet_info \u00b6 version 15.0+ Returns the sum of all accounts balances in wallet , number of accounts in wallet, number of deterministic & adhoc (non-deterministic) accounts, deterministic index (index of last account derived from seed. Equal to deterministic accounts number if no accounts were removed) Request: { \"action\" : \"wallet_info\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"balance\" : \"10000\" , \"pending\" : \"10000\" , \"accounts_count\" : \"3\" , \"adhoc_count\" : \"1\" , \"deterministic_count\" : \"2\" , \"deterministic_index\" : \"2\" } wallet_ledger \u00b6 enable_control required, version 11.0+ Returns frontier, open block, change representative block, balance, last modified timestamp from local database & block count for accounts from wallet Request: { \"action\" : \"wallet_ledger\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"accounts\" : { \"xrb_11119gbh8hb4hj1duf7fdtfyf5s75okzxdgupgpgm1bj78ex3kgy7frt3s9n\" : { \"frontier\" : \"E71AF3E9DD86BBD8B4620EFA63E065B34D358CFC091ACB4E103B965F95783321\" , \"open_block\" : \"643B77F1ECEFBDBE1CC909872964C1DBBE23A6149BD3CEF2B50B76044659B60F\" , \"representative_block\" : \"643B77F1ECEFBDBE1CC909872964C1DBBE23A6149BD3CEF2B50B76044659B60F\" , \"balance\" : \"0\" , \"modified_timestamp\" : \"1511476234\" , \"block_count\" : \"2\" } } } Optional \"representative\", \"weight\", \"pending\" Booleans, false by default. Additionally returns representative, voting weight, pending balance for each account Request: { \"action\" : \"wallet_ledger\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"representative\" : \"true\" , \"weight\" : \"true\" , \"pending\" : \"true\" } Response: { \"accounts\" : { \"xrb_11119gbh8hb4hj1duf7fdtfyf5s75okzxdgupgpgm1bj78ex3kgy7frt3s9n\" : { \"frontier\" : \"E71AF3E9DD86BBD8B4620EFA63E065B34D358CFC091ACB4E103B965F95783321\" , \"open_block\" : \"643B77F1ECEFBDBE1CC909872964C1DBBE23A6149BD3CEF2B50B76044659B60F\" , \"representative_block\" : \"643B77F1ECEFBDBE1CC909872964C1DBBE23A6149BD3CEF2B50B76044659B60F\" , \"balance\" : \"0\" , \"modified_timestamp\" : \"1511476234\" , \"block_count\" : \"2\" , \"representative\" : \"xrb_1anrzcuwe64rwxzcco8dkhpyxpi8kd7zsjc1oeimpc3ppca4mrjtwnqposrs\" , \"weight\" : \"0\" , \"pending\" : \"0\" } } } Optional \"modified_since\" UNIX timestamp (number), 0 by default. Return only accounts modified in local database after specific timestamp wallet_lock \u00b6 enable_control required, version 9.0+ Locks wallet Request: { \"action\" : \"wallet_lock\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"locked\" : \"1\" } wallet_locked \u00b6 Checks whether wallet is locked Request: { \"action\" : \"wallet_locked\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"locked\" : \"0\" } wallet_pending \u00b6 enable_control required, version 8.0+ Returns a list of block hashes which have not yet been received by accounts in this wallet Request: { \"action\" : \"wallet_pending\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" \"count\" : \"1\" } Response: { \"blocks\" : { \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" : [ \"142A538F36833D1CC78B94E11C766F75818F8B940771335C6C1B8AB880C5BB1D\" ], \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" : [ \"4C1FEEF0BEA7F50BE35489A1233FE002B212DEA554B55B1B470D78BD8F210C74\" ] } } Optional \"threshold\" Number (128 bit, decimal). Returns a list of pending block hashes with amount more or equal to threshold Request: { \"action\" : \"wallet_pending\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"count\" : \"1\" , \"threshold\" : \"1000000000000000000000000\" } Response: { \"blocks\" : { \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" : { \"142A538F36833D1CC78B94E11C766F75818F8B940771335C6C1B8AB880C5BB1D\" : \"6000000000000000000000000000000\" }, \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" : { \"4C1FEEF0BEA7F50BE35489A1233FE002B212DEA554B55B1B470D78BD8F210C74\" : \"106370018000000000000000000000000\" } } Optional \"source\" version 9.0+ Boolean, false by default. Returns a list of pending block hashes with amount and source accounts Request: { \"action\" : \"wallet_pending\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"count\" : \"1\" , \"source\" : \"true\" } Response: { \"blocks\" : { \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" : { \"142A538F36833D1CC78B94E11C766F75818F8B940771335C6C1B8AB880C5BB1D\" : { \"amount\" : \"6000000000000000000000000000000\" , \"source\" : \"xrb_3dcfozsmekr1tr9skf1oa5wbgmxt81qepfdnt7zicq5x3hk65fg4fqj58mbr\" } }, \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" : { \"4C1FEEF0BEA7F50BE35489A1233FE002B212DEA554B55B1B470D78BD8F210C74\" : { \"amount\" : \"106370018000000000000000000000000\" , \"source\" : \"xrb_13ezf4od79h1tgj9aiu4djzcmmguendtjfuhwfukhuucboua8cpoihmh8byo\" } } } Optional \"include_active\" version 15.0+ Boolean, false by default. Include active blocks without finished confirmations Request: { \"action\" : \"wallet_pending\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"count\" : \"1\" , \"include_active\" : \"true\" } Optional \"include_only_confirmed\" version 19.0+ Boolean, false by default. Only returns block which have their confirmation height set or are undergoing confirmation height processing. wallet_representative \u00b6 Returns the default representative for wallet Request: { \"action\" : \"wallet_representative\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"representative\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" } wallet_representative_set \u00b6 enable_control required Sets the default representative for wallet (used only for new accounts, already existing accounts use already set representatives) Request: { \"action\" : \"wallet_representative_set\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"representative\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" } Response: { \"set\" : \"1\" } Optional \"update_existing_accounts\" version 18.0+ Boolean, false by default. Change representative for existing accounts in wallet. May require a lot of time to complete for large wallets due to work generation for change type state blocks wallet_republish \u00b6 enable_control required, version 8.0+ Rebroadcast blocks for accounts from wallet starting at frontier down to count to the network Request: { \"action\" : \"wallet_republish\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"count\" : \"2\" } Response: { \"blocks\" : [ \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" , \"A170D51B94E00371ACE76E35AC81DC9405D5D04D4CEBC399AEACE07AE05DD293\" , \"90D0C16AC92DD35814E84BFBCC739A039615D0A42A76EF44ADAEF1D99E9F8A35\" ] } wallet_work_get \u00b6 enable_control required, version 8.0+ Returns a list of pairs of account and work from wallet Request: { \"action\" : \"wallet_work_get\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"works\" : { \"xrb_1111111111111111111111111111111111111111111111111111hifc8npp\" : \"432e5cf728c90f4f\" } } work_get \u00b6 enable_control required, version 8.0+ Retrieves work for account in wallet Request: { \"action\" : \"work_get\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111111hifc8npp\" } Response: { \"work\" : \"432e5cf728c90f4f\" } work_set \u00b6 enable_control required, version 8.0+ Set work for account in wallet Request: { \"action\" : \"work_set\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111111hifc8npp\" , \"work\" : \"0000000000000000\" } Response: { \"success\" : \"\" } Unit Conversion RPCs \u00b6 krai_from_raw \u00b6 Divide a raw amount down by the krai ratio. Request: { \"action\" : \"krai_from_raw\" , \"amount\" : \"1000000000000000000000000000\" } Response: { \"amount\" : \"1\" } krai_to_raw \u00b6 Multiply an krai amount by the krai ratio. Request: { \"action\" : \"krai_to_raw\" , \"amount\" : \"1\" } Response: { \"amount\" : \"1000000000000000000000000000\" } mrai_from_raw \u00b6 Divide a raw amount down by the Mrai ratio. Request: { \"action\" : \"mrai_from_raw\" , \"amount\" : \"1000000000000000000000000000000\" } Response: { \"amount\" : \"1\" } mrai_to_raw \u00b6 Multiply an Mrai amount by the Mrai ratio. Request: { \"action\" : \"mrai_to_raw\" , \"amount\" : \"1\" } Response: { \"amount\" : \"1000000000000000000000000000000\" } rai_from_raw \u00b6 Divide a raw amount down by the rai ratio. Request: { \"action\" : \"rai_from_raw\" , \"amount\" : \"1000000000000000000000000\" } Response: { \"amount\" : \"1\" } rai_to_raw \u00b6 Multiply an rai amount by the rai ratio. Request: { \"action\" : \"rai_to_raw\" , \"amount\" : \"1\" } Response: { \"amount\" : \"1000000000000000000000000\" } Deprecated RPCs \u00b6 history \u00b6 Deprecated : please use account_history instead. It provides a head option which is identical to the history hash option. payment_begin \u00b6 Deprecated , to be removed in version 22 Begin a new payment session. Searches wallet for an account that's marked as available and has a 0 balance. If one is found, the account number is returned and is marked as unavailable. If no account is found, a new account is created, placed in the wallet, and returned. Request: { \"action\" : \"payment_begin\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" } payment_end \u00b6 Deprecated , to be removed in version 22 End a payment session. Marks the account as available for use in a payment session. Request: { \"action\" : \"payment_end\" , \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"wallet\" : \"FFFD1BAEC8EC20814BBB9059B393051AAA8380F9B5A2E6B2489A277D81789EEE\" } Response: {} payment_init \u00b6 Deprecated , to be removed in version 22 Marks all accounts in wallet as available for being used as a payment session. Request: { \"action\" : \"payment_init\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"status\" : \"Ready\" } payment_wait \u00b6 Deprecated , to be removed in version 22 Wait for payment of 'amount' to arrive in 'account' or until 'timeout' milliseconds have elapsed. Request: { \"action\" : \"payment_wait\" , \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"amount\" : \"1\" , \"timeout\" : \"1000\" } Response: { \"status\" : \"success\" }","title":"RPC Protocol"},{"location":"commands/rpc-protocol/#node-rpcs","text":"","title":"Node RPCs"},{"location":"commands/rpc-protocol/#account_balance","text":"Returns how many RAW is owned and how many have not yet been received by account Request: { \"action\" : \"account_balance\" , \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" } Response: { \"balance\" : \"10000\" , \"pending\" : \"10000\" }","title":"account_balance"},{"location":"commands/rpc-protocol/#account_block_count","text":"Get number of blocks for a specific account Request: { \"action\" : \"account_block_count\" , \"account\" : \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" } Response: { \"block_count\" : \"19\" }","title":"account_block_count"},{"location":"commands/rpc-protocol/#account_get","text":"Get account number for the public key Request: { \"action\" : \"account_get\" , \"key\" : \"3068BB1CA04525BB0E416C485FE6A67FD52540227D267CC8B6E8DA958A7FA039\" } Response: { \"account\" : \"xrb_1e5aqegc1jb7qe964u4adzmcezyo6o146zb8hm6dft8tkp79za3sxwjym5rx\" }","title":"account_get"},{"location":"commands/rpc-protocol/#account_history","text":"Reports send/receive information for an account. Returns only send & receive blocks by default (unless raw is set to true - see optional parameters below): change, state change & state epoch blocks are skipped, open & state open blocks will appear as receive, state receive/send blocks will appear as receive/send entries. Response will start with the latest block for the account (the frontier), and will list all blocks back to the open block of this account when \"count\" is set to \"-1\". Note : \"local_timestamp\" returned since version 18.0, \"height\" field returned since version 19.0 Request: { \"action\" : \"account_history\" , \"account\" : \"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\" , \"count\" : \"1\" } Response: { \"account\" : \"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\" , \"history\" : [ { \"type\" : \"send\" , \"account\" : \"xrb_38ztgpejb7yrm7rr586nenkn597s3a1sqiy3m3uyqjicht7kzuhnihdk6zpz\" , \"amount\" : \"80000000000000000000000000000000000\" , \"local_timestamp\" : \"1551532723\" , \"height\" : \"60\" , \"hash\" : \"80392607E85E73CC3E94B4126F24488EBDFEB174944B890C97E8F36D89591DC5\" } ], \"previous\" : \"8D3AB98B301224253750D448B4BD997132400CEDD0A8432F775724F2D9821C72\" } If the count limit results in stopping before the end of the account chain, then the response will also contain a previous field (outside of the history field) which contains the block hash that would be next to process if count was larger. Optional parameters: raw (bool): if set to true instead of the default false , instead of outputting a simplified send or receive explanation of blocks (intended for wallets), output all parameters of the block itself as seen in block_create or other APIs returning blocks. It still includes the \"account\" and \"amount\" properties you'd see without this option. State/universal blocks in the raw history will also have a subtype field indicating their equivalent \"old\" block. Unfortunately, the \"account\" parameter for open blocks is the account of the source block, not the account of the open block, to preserve similarity with the non-raw history. head (64 hexadecimal digits string, 256 bit): instead of using the latest block for a specified account, use this block as the head of the account instead. Useful for pagination. offset (decimal integer): skips a number of blocks starting from head (if given). Not often used. Available since version 11.0 reverse (bool): if set to true instead of the default false , the response starts from head (if given, otherwise the first block of the account), and lists blocks up to the frontier (limited by \"count\"). Note : the field previous in the response changes to next . Available since version 19.0","title":"account_history"},{"location":"commands/rpc-protocol/#account_info","text":"Returns frontier, open block, change representative block, balance, last modified timestamp from local database & block count for account . Only works for accounts that have an entry on the ledger, will return \"Account not found\" otherwise. Request: { \"action\" : \"account_info\" , \"account\" : \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" } Response: { \"frontier\" : \"FF84533A571D953A596EA401FD41743AC85D04F406E76FDE4408EAED50B473C5\" , \"open_block\" : \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" , \"representative_block\" : \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" , \"balance\" : \"235580100176034320859259343606608761791\" , \"modified_timestamp\" : \"1501793775\" , \"block_count\" : \"33\" , \"confirmation_height\" : \"28\" , \"account_version\" : \"1\" } In response confirmation_height only available for version 19.0+ Optional \"representative\", \"weight\", \"pending\" version 9.0+ Booleans, false by default. Additionally returns representative, voting weight, pending balance for account Request: { \"action\" : \"account_info\" , \"account\" : \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" , \"representative\" : \"true\" , \"weight\" : \"true\" , \"pending\" : \"true\" } Response: { \"frontier\" : \"FF84533A571D953A596EA401FD41743AC85D04F406E76FDE4408EAED50B473C5\" , \"open_block\" : \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" , \"representative_block\" : \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" , \"balance\" : \"235580100176034320859259343606608761791\" , \"modified_timestamp\" : \"1501793775\" , \"block_count\" : \"33\" , \"representative\" : \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" , \"weight\" : \"1105577030935649664609129644855132177\" , \"pending\" : \"2309370929000000000000000000000000\" }","title":"account_info"},{"location":"commands/rpc-protocol/#account_key","text":"Get the public key for account Request: { \"action\" : \"account_key\" , \"account\" : \"xrb_1e5aqegc1jb7qe964u4adzmcezyo6o146zb8hm6dft8tkp79za3sxwjym5rx\" } Response: { \"key\" : \"3068BB1CA04525BB0E416C485FE6A67FD52540227D267CC8B6E8DA958A7FA039\" }","title":"account_key"},{"location":"commands/rpc-protocol/#account_representative","text":"Returns the representative for account Request: { \"action\" : \"account_representative\" , \"account\" : \"xrb_39a73oy5ungrhxy5z5oao1xso4zo7dmgpjd4u74xcrx3r1w6rtazuouw6qfi\" } Response: { \"representative\" : \"xrb_16u1uufyoig8777y6r8iqjtrw8sg8maqrm36zzcm95jmbd9i9aj5i8abr8u5\" }","title":"account_representative"},{"location":"commands/rpc-protocol/#account_weight","text":"Returns the voting weight for account Request: { \"action\" : \"account_weight\" , \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" } Response: { \"weight\" : \"10000\" }","title":"account_weight"},{"location":"commands/rpc-protocol/#accounts_balances","text":"Returns how many RAW is owned and how many have not yet been received by accounts list Request: { \"action\" : \"accounts_balances\" , \"accounts\" : [ \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"xrb_3i1aq1cchnmbn9x5rsbap8b15akfh7wj7pwskuzi7ahz8oq6cobd99d4r3b7\" ] } Response: { \"balances\" : { \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" : { \"balance\" : \"10000\" , \"pending\" : \"10000\" }, \"xrb_3i1aq1cchnmbn9x5rsbap8b15akfh7wj7pwskuzi7ahz8oq6cobd99d4r3b7\" : { \"balance\" : \"10000000\" , \"pending\" : \"0\" } } }","title":"accounts_balances"},{"location":"commands/rpc-protocol/#accounts_frontiers","text":"Returns a list of pairs of account and block hash representing the head block for accounts list Request: { \"action\" : \"accounts_frontiers\" , \"accounts\" : [ \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" , \"xrb_3i1aq1cchnmbn9x5rsbap8b15akfh7wj7pwskuzi7ahz8oq6cobd99d4r3b7\" ] } Response: { \"frontiers\" : { \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" : \"791AF413173EEE674A6FCF633B5DFC0F3C33F397F0DA08E987D9E0741D40D81A\" , \"xrb_3i1aq1cchnmbn9x5rsbap8b15akfh7wj7pwskuzi7ahz8oq6cobd99d4r3b7\" : \"6A32397F4E95AF025DE29D9BF1ACE864D5404362258E06489FABDBA9DCCC046F\" } }","title":"accounts_frontiers"},{"location":"commands/rpc-protocol/#accounts_pending","text":"Returns a list of block hashes which have not yet been received by these accounts Request: { \"action\" : \"accounts_pending\" , \"accounts\" : [ \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" , \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" ], \"count\" : \"1\" } Response: { \"blocks\" : { \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" : [ \"142A538F36833D1CC78B94E11C766F75818F8B940771335C6C1B8AB880C5BB1D\" ], \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" : [ \"4C1FEEF0BEA7F50BE35489A1233FE002B212DEA554B55B1B470D78BD8F210C74\" ] } } Optional \"threshold\" version 8.0+ Number (128 bit, decimal). Returns a list of pending block hashes with amount more or equal to threshold Request: { \"action\" : \"accounts_pending\" , \"accounts\" : [ \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" , \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" ], \"count\" : \"1\" , \"threshold\" : \"1000000000000000000000000\" } Response: { \"blocks\" : { \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" : { \"142A538F36833D1CC78B94E11C766F75818F8B940771335C6C1B8AB880C5BB1D\" : \"6000000000000000000000000000000\" }, \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" : { \"4C1FEEF0BEA7F50BE35489A1233FE002B212DEA554B55B1B470D78BD8F210C74\" : \"106370018000000000000000000000000\" } } Optional \"source\" version 9.0+ Boolean, false by default. Returns a list of pending block hashes with amount and source accounts Request: { \"action\" : \"accounts_pending\" , \"accounts\" : [ \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" , \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" ], \"count\" : \"1\" , \"source\" : \"true\" } Response: { \"blocks\" : { \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" : { \"142A538F36833D1CC78B94E11C766F75818F8B940771335C6C1B8AB880C5BB1D\" : { \"amount\" : \"6000000000000000000000000000000\" , \"source\" : \"xrb_3dcfozsmekr1tr9skf1oa5wbgmxt81qepfdnt7zicq5x3hk65fg4fqj58mbr\" } }, \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" : { \"4C1FEEF0BEA7F50BE35489A1233FE002B212DEA554B55B1B470D78BD8F210C74\" : { \"amount\" : \"106370018000000000000000000000000\" , \"source\" : \"xrb_13ezf4od79h1tgj9aiu4djzcmmguendtjfuhwfukhuucboua8cpoihmh8byo\" } } } Optional \"include_active\" version 15.0+ Boolean, false by default. Include active (not confirmed) blocks Request: { \"action\" : \"accounts_pending\" , \"accounts\" : [ \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" , \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" ], \"count\" : \"1\" , \"include_active\" : \"true\" } Optional \"sorting\" version 19.0+ Boolean, false by default. Additionally sorts each account's blocks by their amounts in descending order. Optional \"include_only_confirmed\" version 19.0+ Boolean, false by default. Only returns block which have their confirmation height set or are undergoing confirmation height processing.","title":"accounts_pending"},{"location":"commands/rpc-protocol/#available_supply","text":"Returns how many raw are in the public supply Request: { \"action\" : \"available_supply\" } Response: { \"available\" : \"133248061996216572282917317807824970865\" }","title":"available_supply"},{"location":"commands/rpc-protocol/#block_account","text":"Returns the account containing block Request: { \"action\" : \"block_account\" , \"hash\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" }","title":"block_account"},{"location":"commands/rpc-protocol/#block_confirm","text":"version 12.2+ Request confirmation for block from known online representative nodes. Check results with confirmation history Request: { \"action\" : \"block_confirm\" , \"hash\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"started\" : \"1\" }","title":"block_confirm"},{"location":"commands/rpc-protocol/#block_count","text":"Reports the number of blocks in the ledger and unchecked synchronizing blocks Request: { \"action\" : \"block_count\" } Response: { \"count\" : \"1000\" , \"unchecked\" : \"10\" }","title":"block_count"},{"location":"commands/rpc-protocol/#block_count_type","text":"Reports the number of blocks in the ledger by type (send, receive, open, change, state with version) Request: { \"action\" : \"block_count_type\" } Response: { \"send\" : \"5016664\" , \"receive\" : \"4081228\" , \"open\" : \"546457\" , \"change\" : \"24193\" , \"state_v0\" : \"4216537\" , \"state_v1\" : \"10653709\" , \"state\" : \"14870246\" }","title":"block_count_type"},{"location":"commands/rpc-protocol/#block_create","text":"enable_control required, version 9.0+ Creates a json representations of new block based on input data & signed with private key or account in wallet . Use for offline signing. Request sample for state block: { \"action\" : \"block_create\" , \"type\" : \"state\" , \"balance\" : \"1000000000000000000000\" , \"key\" : \"0000000000000000000000000000000000000000000000000000000000000002\" , \"representative\" : \"xrb_1hza3f7wiiqa7ig3jczyxj5yo86yegcmqk3criaz838j91sxcckpfhbhhra1\" , \"link\" : \"19D3D919475DEED4696B5D13018151D1AF88B2BD3BCFF048B45031C1F36D1858\" , \"previous\" : \"F47B23107E5F34B2CE06F562B5C435DF72A533251CB414C51B2B62A8F63A00E4\" } Parameters for state block: balance : final balance for account after block creation, formatted in 'raw' units using a decimal integer. If balance is less than previous, block is considered as send subtype! wallet (optional): The wallet ID that the account the block is being created for is in. account (optional): The account the block is being created for (xrb_youraccount). key (optional): Instead of using \"wallet\" & \"account\" parameters, you can directly pass in a private key. source (optional): The block hash of the source of funds for this receive block (the send block that this receive block will pocket). destination (optional): The account that the sent funds should be accessible to. link (optional): Instead of using \"source\" & \"destination\" parameters, you can directly pass \"link\" (source to receive or destination public key to send). representative : The account that block account will use as its representative. previous : The block hash of the previous block on this account's block chain (\"0\" for first block). Warning: It is critical that balance is the balance of the account after created block! Optional \"json_block\" version 19.0+ Default \"false\". If \"true\", \"block\" in the response will contain a JSON subtree instead of a JSON string. Examples Response sample for state block : { \"hash\" : \"FF0144381CFF0B2C079A115E7ADA7E96F43FD219446E7524C48D1CC9900C4F17\" , \"block\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_3qgmh14nwztqw4wmcdzy4xpqeejey68chx6nciczwn9abji7ihhum9qtpmdr\\\",\\n \\\"previous\\\": \\\"F47B23107E5F34B2CE06F562B5C435DF72A533251CB414C51B2B62A8F63A00E4\\\",\\n \\\"representative\\\": \\\"xrb_1hza3f7wiiqa7ig3jczyxj5yo86yegcmqk3criaz838j91sxcckpfhbhhra1\\\",\\n \\\"balance\\\": \\\"1000000000000000000000\\\",\\n \\\"link\\\": \\\"19D3D919475DEED4696B5D13018151D1AF88B2BD3BCFF048B45031C1F36D1858\\\",\\n \\\"link_as_account\\\": \\\"xrb_18gmu6engqhgtjnppqam181o5nfhj4sdtgyhy36dan3jr9spt84rzwmktafc\\\",\\n \\\"signature\\\": \\\"3BFBA64A775550E6D49DF1EB8EEC2136DCD74F090E2ED658FBD9E80F17CB1C9F9F7BDE2B93D95558EC2F277FFF15FD11E6E2162A1714731B743D1E941FA4560A\\\",\\n \\\"work\\\": \\\"cab7404f0b5449d0\\\"\\n }\\n\" } Optional \"work\" Work value (16 hexadecimal digits string, 64 bit). Uses work value for block from external source","title":"block_create"},{"location":"commands/rpc-protocol/#block_hash","text":"version 13.0+ Returning block hash for given block content Request: { \"action\" : \"block_hash\" , \"block\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_3qgmh14nwztqw4wmcdzy4xpqeejey68chx6nciczwn9abji7ihhum9qtpmdr\\\",\\n \\\"previous\\\": \\\"F47B23107E5F34B2CE06F562B5C435DF72A533251CB414C51B2B62A8F63A00E4\\\",\\n \\\"representative\\\": \\\"xrb_1hza3f7wiiqa7ig3jczyxj5yo86yegcmqk3criaz838j91sxcckpfhbhhra1\\\",\\n \\\"balance\\\": \\\"1000000000000000000000\\\",\\n \\\"link\\\": \\\"19D3D919475DEED4696B5D13018151D1AF88B2BD3BCFF048B45031C1F36D1858\\\",\\n \\\"link_as_account\\\": \\\"xrb_18gmu6engqhgtjnppqam181o5nfhj4sdtgyhy36dan3jr9spt84rzwmktafc\\\",\\n \\\"signature\\\": \\\"3BFBA64A775550E6D49DF1EB8EEC2136DCD74F090E2ED658FBD9E80F17CB1C9F9F7BDE2B93D95558EC2F277FFF15FD11E6E2162A1714731B743D1E941FA4560A\\\",\\n \\\"work\\\": \\\"cab7404f0b5449d0\\\"\\n }\\n\" } Response: { \"hash\" : \"FF0144381CFF0B2C079A115E7ADA7E96F43FD219446E7524C48D1CC9900C4F17\" } Optional \"json_block\" version 19.0+ Default \"false\". If \"true\", \"block\" must contain a JSON subtree instead of a JSON string.","title":"block_hash"},{"location":"commands/rpc-protocol/#block_info","text":"Retrieves a json representation of block Returns block account, amount, balance, block height in account chain & local timestamp since version 18.0 Returns confirmation status & subtype for state block since version 19.0 Request: { \"action\" : \"block_info\" , \"hash\" : \"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\" } Response: { \"block_account\" : \"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\" , \"amount\" : \"30000000000000000000000000000000000\" , \"balance\" : \"5606157000000000000000000000000000000\" , \"height\" : \"58\" , \"local_timestamp\" : \"0\" , \"confirmed\" : \"false\" , \"contents\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\\\",\\n \\\"previous\\\": \\\"CE898C131AAEE25E05362F247760F8A3ACF34A9796A5AE0D9204E86B0637965E\\\",\\n \\\"representative\\\": \\\"xrb_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\\\",\\n \\\"balance\\\": \\\"5606157000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"5D1AA8A45F8736519D707FCB375976A7F9AF795091021D7E9C7548D6F45DD8D5\\\",\\n \\\"link_as_account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\",\\n \\\"signature\\\": \\\"82D41BC16F313E4B2243D14DFFA2FB04679C540C2095FEE7EAE0F2F26880AD56DD48D87A7CC5DD760C5B2D76EE2C205506AA557BF00B60D8DEE312EC7343A501\\\",\\n \\\"work\\\": \\\"8a142e07a10996d5\\\"\\n }\\n\" , \"subtype\" : \"send\" } Note: The Balance in contents is a uint128. However, it will be a hex-encoded (like 0000000C9F2C9CD04674EDEA40000000 for 1 Mnano ) when the block is a legacy Send Block . If the block is a State-Block , the same Balance will be a numeric-string (like 1000000000000000000000000000000 ). Optional \"json_block\" version 19.0+ Default \"false\". If \"true\", \"contents\" will contain a JSON subtree instead of a JSON string.","title":"block_info"},{"location":"commands/rpc-protocol/#blocks","text":"Retrieves a json representations of blocks Request: { \"action\" : \"blocks\" , \"hashes\" : [ \"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\" ] } Response: { \"blocks\" : { \"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\\\",\\n \\\"previous\\\": \\\"CE898C131AAEE25E05362F247760F8A3ACF34A9796A5AE0D9204E86B0637965E\\\",\\n \\\"representative\\\": \\\"xrb_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\\\",\\n \\\"balance\\\": \\\"5606157000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"5D1AA8A45F8736519D707FCB375976A7F9AF795091021D7E9C7548D6F45DD8D5\\\",\\n \\\"link_as_account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\",\\n \\\"signature\\\": \\\"82D41BC16F313E4B2243D14DFFA2FB04679C540C2095FEE7EAE0F2F26880AD56DD48D87A7CC5DD760C5B2D76EE2C205506AA557BF00B60D8DEE312EC7343A501\\\",\\n \\\"work\\\": \\\"8a142e07a10996d5\\\"\\n }\\n\" } }","title":"blocks"},{"location":"commands/rpc-protocol/#blocks_info","text":"Retrieves a json representations of blocks with block account , transaction amount , block balance , block height in account chain, block local modification timstamp , block confirmation status (since version 19.0), subtype (for state blocks since version 19.0) Request: { \"action\" : \"blocks_info\" , \"hashes\" : [ \"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\" ] } Response: { \"blocks\" : { \"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\" : { \"block_account\" : \"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\" , \"amount\" : \"30000000000000000000000000000000000\" , \"balance\" : \"5606157000000000000000000000000000000\" , \"height\" : \"58\" , \"local_timestamp\" : \"0\" , \"confirmed\" : \"false\" , \"contents\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\\\",\\n \\\"previous\\\": \\\"CE898C131AAEE25E05362F247760F8A3ACF34A9796A5AE0D9204E86B0637965E\\\",\\n \\\"representative\\\": \\\"xrb_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\\\",\\n \\\"balance\\\": \\\"5606157000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"5D1AA8A45F8736519D707FCB375976A7F9AF795091021D7E9C7548D6F45DD8D5\\\",\\n \\\"link_as_account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\",\\n \\\"signature\\\": \\\"82D41BC16F313E4B2243D14DFFA2FB04679C540C2095FEE7EAE0F2F26880AD56DD48D87A7CC5DD760C5B2D76EE2C205506AA557BF00B60D8DEE312EC7343A501\\\",\\n \\\"work\\\": \\\"8a142e07a10996d5\\\"\\n }\\n\" , \"subtype\" : \"send\" } } } Optional \"pending\", \"source\", \"balance\" pending, source: version 9.0+ balance: version 12.0+ Booleans, false by default. Additionally checks if block is pending, returns source account for receive & open blocks (0 for send & change blocks), and returns the balance of the account at the time of the block. Request: { \"action\" : \"blocks_info\" , \"hashes\" : [ \"E2FB233EF4554077A7BF1AA85851D5BF0B36965D2B0FB504B2BC778AB89917D3\" ], \"pending\" : \"true\" , \"source\" : \"true\" , \"balance\" : \"true\" } Response: { \"blocks\" : { \"E2FB233EF4554077A7BF1AA85851D5BF0B36965D2B0FB504B2BC778AB89917D3\" : { \"block_account\" : \"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\" , \"amount\" : \"30000000000000000000000000000000000\" , \"contents\" : \"{ ...skipped... }\" , \"pending\" : \"0\" , \"source_account\" : \"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\" , \"balance\" : \"40200000001000000000000000000000000\" } } } Optional \"json_block\" version 19.0+ Default \"false\". If \"true\", \"contents\" will contain a JSON subtree instead of a JSON string.","title":"blocks_info"},{"location":"commands/rpc-protocol/#bootstrap","text":"Initialize bootstrap to specific IP address and port Request: { \"action\" : \"bootstrap\" , \"address\" : \"::ffff:138.201.94.249\" , \"port\" : \"7075\" } Response: { \"success\" : \"\" }","title":"bootstrap"},{"location":"commands/rpc-protocol/#bootstrap_any","text":"Initialize multi-connection bootstrap to random peers Request: { \"action\" : \"bootstrap_any\" } Response: { \"success\" : \"\" }","title":"bootstrap_any"},{"location":"commands/rpc-protocol/#bootstrap_lazy","text":"version 17.0+ Initialize lazy bootstrap with given block hash Request: { \"action\" : \"bootstrap_lazy\" , \"hash\" : \"FF0144381CFF0B2C079A115E7ADA7E96F43FD219446E7524C48D1CC9900C4F17\" } Response: { \"started\" : \"1\" } Optional \"force\" Boolean, false by default. Manually force closing of all current bootstraps","title":"bootstrap_lazy"},{"location":"commands/rpc-protocol/#bootstrap_status","text":"version 17.0+ Debug purposes only This call is for internal diagnostics/debug purposes only. Do not rely on this interface being stable and do not use in a production system. Returning status of current bootstrap attempt Request: { \"action\" : \"bootstrap_status\" } Response: { \"clients\" : \"5790\" , \"pulls\" : \"141065\" , \"pulling\" : \"3\" , \"connections\" : \"16\" , \"idle\" : \"0\" , \"target_connections\" : \"64\" , \"total_blocks\" : \"536820\" , \"lazy_mode\" : \"true\" , \"lazy_blocks\" : \"423388\" , \"lazy_state_unknown\" : \"2\" , \"lazy_balances\" : \"0\" , \"lazy_pulls\" : \"0\" , \"lazy_stopped\" : \"644\" , \"lazy_keys\" : \"449\" , \"lazy_key_1\" : \"A86EB2B479AAF3CD531C8356A1FBE3CB500DFBF5BF292E5E6B8D1048DE199C32\" }","title":"bootstrap_status"},{"location":"commands/rpc-protocol/#chain","text":"Returns a consecutive list of block hashes in the account chain starting at block back to count (direction from frontier back to open block, from newer blocks to older). Will list all blocks back to the open block of this chain when count is set to \"-1\". The requested block hash is included in the answer. Request: { \"action\" : \"chain\" , \"block\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"count\" : \"1\" } Response: { \"blocks\" : [ \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" ] } Optional \"offset\" version 18.0+ Number, 0 by default. Return the account chain block hashes offset by the specified number of blocks Optional \"reverse\" version 18.0+ Boolean, false by default. Returns a list of block hashes in the account chain starting at block up to count (direction from open block up to frontier, from older blocks to newer). Equal to successors","title":"chain"},{"location":"commands/rpc-protocol/#confirmation_active","text":"version 16.0+ Returns list of active elections roots (excluding stopped & aborted elections). Find info about specific root with confirmation_info Note The roots provided are two parts and differ between the first account block and subsequent blocks: First account block (open): 0000000000000000000000000000000000000000000000000000000000000000 + account public key Other blocks: previous hash + previous hash Request: { \"action\" : \"confirmation_active\" } Response: { \"confirmations\" : [ \"8031B600827C5CC05FDC911C28BBAC12A0E096CCB30FA8324F56C123676281B28031B600827C5CC05FDC911C28BBAC12A0E096CCB30FA8324F56C123676281B2\" ] } Optional \"announcements\" Number, 0 by default. Returns only active elections with equal or higher announcements count. Useful to find long running elections","title":"confirmation_active"},{"location":"commands/rpc-protocol/#confirmation_height_currently_processing","text":"version 19.0+ Debug purposes only This call is for internal diagnostics/debug purposes only. Do not rely on this interface being stable and do not use in a production system. Returns the hash of the block which is having the confirmation height set for, error otherwise. When a block is being confirmed, it must confirm all blocks in the chain below and iteratively follow all receive blocks. This can take a long time, so it can be useful to find which block was the original being confirmed. Request: { \"action\" : \"confirmation_height_currently_processing\" } Response: { \"hash\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" }","title":"confirmation_height_currently_processing"},{"location":"commands/rpc-protocol/#confirmation_history","text":"version 12.0+ duration, time, confirmation_stats: version 17.0+ Returns hash, tally weight, election duration (in milliseconds), election confirmation timestamp for recent elections winners. Also returns stats: count of elections in history (limited to 2048) & average duration time Request: { \"action\" : \"confirmation_history\" } Response: { \"confirmation_stats\" : { \"count\" : \"2\" , \"average\" : \"5000\" }, \"confirmations\" : [ { \"hash\" : \"EA70B32C55C193345D625F766EEA2FCA52D3F2CCE0B3A30838CC543026BB0FEA\" , \"duration\" : \"4000\" , \"time\" : \"1544819986\" , \"tally\" : \"80394786589602980996311817874549318248\" }, { \"hash\" : \"F2F8DA6D2CA0A4D78EB043A7A29E12BDE5B4CE7DE1B99A93A5210428EE5B8667\" , \"duration\" : \"6000\" , \"time\" : \"1544819988\" , \"tally\" : \"68921714529890443063672782079965877749\" } ] } Optional \"hash\" Valid block hash, filters return for only the provided hash. If there is no confirmation available for that hash anymore, the following return can be expected: `{ \"confirmation_stats\": { \"count\": \"0\" }, \"confirmations\": \"\" } ` If the block is unknown on the node, the following error will be returned: \"error\": \"Invalid block hash\"","title":"confirmation_history"},{"location":"commands/rpc-protocol/#confirmation_info","text":"version 16.0+ Returns info about active election by root . Including announcements count, last winner (initially local ledger block), total tally of voted representatives, concurrent blocks with tally & block contents for each Note The roots provided are two parts and differ between the first account block and subsequent blocks: First account block (open): 0000000000000000000000000000000000000000000000000000000000000000 + account public key Other blocks: previous hash + previous hash Request: { \"action\" : \"confirmation_info\" , \"root\" : \"F8BA8CBE61C679231EB06FA03A0CD7CFBE68746396CBBA169BD9E12725682B44F8BA8CBE61C679231EB06FA03A0CD7CFBE68746396CBBA169BD9E12725682B44\" } Response: { \"announcements\" : \"1\" , \"last_winner\" : \"36CC459675E9FB2DB960C330BAFECB50132DB0394E83C14C7D1359ACB17F5BD2\" , \"total_tally\" : \"66508449034656215696897986086066451444\" , \"blocks\" : { \"36CC459675E9FB2DB960C330BAFECB50132DB0394E83C14C7D1359ACB17F5BD2\" : { \"tally\" : \"66508449034656215696897986086066451444\" , \"contents\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_3mi58wc8p7uptp5gmt8k4wb5qbizm6chx9rzqi7cybbyxdh38cktw9o65883\\\",\\n \\\"previous\\\": \\\"F8BA8CBE61C679231EB06FA03A0CD7CFBE68746396CBBA169BD9E12725682B44\\\",\\n \\\"representative\\\": \\\"xrb_3o7uzba8b9e1wqu5ziwpruteyrs3scyqr761x7ke6w1xctohxfh5du75qgaj\\\",\\n \\\"balance\\\": \\\"61202000000000000000000000000\\\",\\n \\\"link\\\": \\\"CA24AAAA4BEA37D611EC72ABD283113AC133E3DBF8A7A557CFCA4CF9B354932C\\\",\\n \\\"link_as_account\\\": \\\"xrb_3kj6oco6qtjqtrayrwodtc3j4gp38hjxqy79nodwzkkez8sob6sezmmct61s\\\",\\n \\\"signature\\\": \\\"744B338DBCDFC2C4849DA44C468EEF99338F1D2D6BADFF20C0F54CB2DE759B512AFE41010EB212CE67D98E10635C2C08AEA517940862EB7DC58E8DFA43B2B408\\\",\\n \\\"work\\\": \\\"e6d5a6ec29db25d6\\\"\\n}\\n\" } } } Optional \"contents\" Boolean, true by default. Disable contents for each block Optional \"json_block\" version 19.0+ Default \"false\". If \"true\", \"contents\" will contain a JSON subtree instead of a JSON string. Optional \"representatives\" Boolean, false by default. Returns list of votes representatives & its weights for each block Request: { \"action\" : \"confirmation_info\" , \"root\" : \"F8BA8CBE61C679231EB06FA03A0CD7CFBE68746396CBBA169BD9E12725682B44\" , \"representatives\" : \"true\" } Response: { \"announcements\" : \"1\" , \"last_winner\" : \"36CC459675E9FB2DB960C330BAFECB50132DB0394E83C14C7D1359ACB17F5BD2\" , \"total_tally\" : \"66508449034656215696897986086066451444\" , \"blocks\" : { \"36CC459675E9FB2DB960C330BAFECB50132DB0394E83C14C7D1359ACB17F5BD2\" : { \"tally\" : \"66508449034656215696897986086066451444\" , \"contents\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_3mi58wc8p7uptp5gmt8k4wb5qbizm6chx9rzqi7cybbyxdh38cktw9o65883\\\",\\n \\\"previous\\\": \\\"F8BA8CBE61C679231EB06FA03A0CD7CFBE68746396CBBA169BD9E12725682B44\\\",\\n \\\"representative\\\": \\\"xrb_3o7uzba8b9e1wqu5ziwpruteyrs3scyqr761x7ke6w1xctohxfh5du75qgaj\\\",\\n \\\"balance\\\": \\\"61202000000000000000000000000\\\",\\n \\\"link\\\": \\\"CA24AAAA4BEA37D611EC72ABD283113AC133E3DBF8A7A557CFCA4CF9B354932C\\\",\\n \\\"link_as_account\\\": \\\"xrb_3kj6oco6qtjqtrayrwodtc3j4gp38hjxqy79nodwzkkez8sob6sezmmct61s\\\",\\n \\\"signature\\\": \\\"744B338DBCDFC2C4849DA44C468EEF99338F1D2D6BADFF20C0F54CB2DE759B512AFE41010EB212CE67D98E10635C2C08AEA517940862EB7DC58E8DFA43B2B408\\\",\\n \\\"work\\\": \\\"e6d5a6ec29db25d6\\\"\\n}\\n\" , \"representatives\" : { \"xrb_3pczxuorp48td8645bs3m6c3xotxd3idskrenmi65rbrga5zmkemzhwkaznh\" : \"15542840930304007355829653636255997615\" , \"xrb_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\" : \"10262330414015196177405695154517720446\" , ... \"xrb_151jp8kuecdqq3pudrucx4hk5a6nri1fr7r6sbie8zc1ygid1cc4387q9g45\" : \"0\" } } } }","title":"confirmation_info"},{"location":"commands/rpc-protocol/#confirmation_quorum","text":"version 16.0+ Returns information about node elections settings & observed network state: delta tally required to rollback block, percentage of online weight for delta, minimum online weight to confirm block, currently observed online total weight, known peers total weight Request: { \"action\" : \"confirmation_quorum\" } Response: { \"quorum_delta\" : \"41469707173777717318245825935516662250\" , \"online_weight_quorum_percent\" : \"50\" , \"online_weight_minimum\" : \"60000000000000000000000000000000000000\" , \"online_stake_total\" : \"82939414347555434636491651871033324568\" , \"peers_stake_total\" : \"69026910610720098597176027400951402360\" , \"peers_stake_required\" : \"60000000000000000000000000000000000000\" } Optional \"peer_details\" version 17.0+ Boolean, false by default. If true, add account/ip/rep weight for each peer considered in the summation of peers_stake_total . Response field \"peers_stake_required\" version 19.0+ The effective peer stake needed for quorum. Per v19, this field is computed as max(quorum_delta, online_weight_minimum)","title":"confirmation_quorum"},{"location":"commands/rpc-protocol/#database_txn_tracker","text":"v19.0+ Debug purposes only This call is for internal diagnostics/debug purposes only. Do not rely on this interface being stable and do not use in a production system. Returns a list of open database transactions which are equal or greater than the min_read_time or min_write_time for reads and read-writes respectively. Request: { \"action\" : \"database_txn_tracker\" , \"min_read_time\" : \"1000\" \"min_write_time\" : \"0\" } Response on Windows/Debug: { \"txn_tracking\" : [ { \"thread\" : \"Blck processing\" , // Which thread held the transaction \"time_held_open\" : \"2\" , // Seconds the transaction has currently been held open for \"write\" : \"true\" , // If true it is a write lock, otherwise false. \"stacktrace\" : [ ... { \"name\" : \"nano::mdb_store::tx_begin_write\" , \"address\" : \"00007FF7142C5F86\" , \"source_file\" : \"c:\\\\users\\\\wesley\\\\documents\\\\raiblocks\\\\nano\\\\node\\\\lmdb.cpp\" , \"source_line\" : \"825\" }, { \"name\" : \"nano::block_processor::process_batch\" , \"address\" : \"00007FF714121EEA\" , \"source_file\" : \"c:\\\\users\\\\wesley\\\\documents\\\\raiblocks\\\\nano\\\\node\\\\blockprocessor.cpp\" , \"source_line\" : \"243\" }, { \"name\" : \"nano::block_processor::process_blocks\" , \"address\" : \"00007FF71411F8A6\" , \"source_file\" : \"c:\\\\users\\\\wesley\\\\documents\\\\raiblocks\\\\nano\\\\node\\\\blockprocessor.cpp\" , \"source_line\" : \"103\" }, ... ] } .... ] }","title":"database_txn_tracker"},{"location":"commands/rpc-protocol/#delegators","text":"version 8.0+ Returns a list of pairs of delegator names given account a representative and its balance Request: { \"action\" : \"delegators\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" } Response: { \"delegators\" : { \"xrb_13bqhi1cdqq8yb9szneoc38qk899d58i5rcrgdk5mkdm86hekpoez3zxw5sd\" : \"500000000000000000000000000000000000\" , \"xrb_17k6ug685154an8gri9whhe5kb5z1mf5w6y39gokc1657sh95fegm8ht1zpn\" : \"961647970820730000000000000000000000\" } }","title":"delegators"},{"location":"commands/rpc-protocol/#delegators_count","text":"version 8.0+ Get number of delegators for a specific representative account Request: { \"action\" : \"delegators_count\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" } Response: { \"count\" : \"2\" }","title":"delegators_count"},{"location":"commands/rpc-protocol/#deterministic_key","text":"Derive deterministic keypair from seed based on index Request: { \"action\" : \"deterministic_key\" , \"seed\" : \"0000000000000000000000000000000000000000000000000000000000000000\" , \"index\" : \"0\" } Response: { \"private\" : \"9F0E444C69F77A49BD0BE89DB92C38FE713E0963165CCA12FAF5712D7657120F\" , \"public\" : \"C008B814A7D269A1FA3C6528B19201A24D797912DB9996FF02A1FF356E45552B\" , \"account\" : \"xrb_3i1aq1cchnmbn9x5rsbap8b15akfh7wj7pwskuzi7ahz8oq6cobd99d4r3b7\" }","title":"deterministic_key"},{"location":"commands/rpc-protocol/#frontier_count","text":"Reports the number of accounts in the ledger Request: { \"action\" : \"frontier_count\" } Response: { \"count\" : \"920471\" }","title":"frontier_count"},{"location":"commands/rpc-protocol/#frontiers","text":"Returns a list of pairs of account and block hash representing the head block starting at account up to count Request: { \"action\" : \"frontiers\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111111hifc8npp\" , \"count\" : \"1\" } Response: { \"frontiers\" : { \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } }","title":"frontiers"},{"location":"commands/rpc-protocol/#keepalive","text":"enable_control required Tells the node to send a keepalive packet to address : port Request: { \"action\" : \"keepalive\" , \"address\" : \"::ffff:192.169.0.1\" , \"port\" : \"1024\" } Response: { }","title":"keepalive"},{"location":"commands/rpc-protocol/#key_create","text":"Generates an adhoc random keypair Request: { \"action\" : \"key_create\" } Response: { \"private\" : \"781186FB9EF17DB6E3D1056550D9FAE5D5BBADA6A6BC370E4CBB938B1DC71DA3\" , \"public\" : \"3068BB1CA04525BB0E416C485FE6A67FD52540227D267CC8B6E8DA958A7FA039\" , \"account\" : \"xrb_1e5aqegc1jb7qe964u4adzmcezyo6o146zb8hm6dft8tkp79za3sxwjym5rx\" }","title":"key_create"},{"location":"commands/rpc-protocol/#key_expand","text":"Derive public key and account number from private key Request: { \"action\" : \"key_expand\" , \"key\" : \"781186FB9EF17DB6E3D1056550D9FAE5D5BBADA6A6BC370E4CBB938B1DC71DA3\" } Response: { \"private\" : \"781186FB9EF17DB6E3D1056550D9FAE5D5BBADA6A6BC370E4CBB938B1DC71DA3\" , \"public\" : \"3068BB1CA04525BB0E416C485FE6A67FD52540227D267CC8B6E8DA958A7FA039\" , \"account\" : \"xrb_1e5aqegc1jb7qe964u4adzmcezyo6o146zb8hm6dft8tkp79za3sxwjym5rx\" }","title":"key_expand"},{"location":"commands/rpc-protocol/#ledger","text":"enable_control required, version 9.0+ Returns frontier, open block, change representative block, balance, last modified timestamp from local database & block count starting at account up to count Request: { \"action\" : \"ledger\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111111hifc8npp\" , \"count\" : \"1\" } Response: { \"accounts\" : { \"xrb_11119gbh8hb4hj1duf7fdtfyf5s75okzxdgupgpgm1bj78ex3kgy7frt3s9n\" : { \"frontier\" : \"E71AF3E9DD86BBD8B4620EFA63E065B34D358CFC091ACB4E103B965F95783321\" , \"open_block\" : \"643B77F1ECEFBDBE1CC909872964C1DBBE23A6149BD3CEF2B50B76044659B60F\" , \"representative_block\" : \"643B77F1ECEFBDBE1CC909872964C1DBBE23A6149BD3CEF2B50B76044659B60F\" , \"balance\" : \"0\" , \"modified_timestamp\" : \"1511476234\" , \"block_count\" : \"2\" } } } Optional \"representative\", \"weight\", \"pending\" Booleans, false by default. Additionally returns representative, voting weight, pending balance for each account Request: { \"action\" : \"ledger\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111111hifc8npp\" , \"count\" : \"1\" , \"representative\" : \"true\" , \"weight\" : \"true\" , \"pending\" : \"true\" } Response: { \"accounts\" : { \"xrb_11119gbh8hb4hj1duf7fdtfyf5s75okzxdgupgpgm1bj78ex3kgy7frt3s9n\" : { \"frontier\" : \"E71AF3E9DD86BBD8B4620EFA63E065B34D358CFC091ACB4E103B965F95783321\" , \"open_block\" : \"643B77F1ECEFBDBE1CC909872964C1DBBE23A6149BD3CEF2B50B76044659B60F\" , \"representative_block\" : \"643B77F1ECEFBDBE1CC909872964C1DBBE23A6149BD3CEF2B50B76044659B60F\" , \"balance\" : \"0\" , \"modified_timestamp\" : \"1511476234\" , \"block_count\" : \"2\" , \"representative\" : \"xrb_1anrzcuwe64rwxzcco8dkhpyxpi8kd7zsjc1oeimpc3ppca4mrjtwnqposrs\" , \"weight\" : \"0\" , \"pending\" : \"0\" } } } Optional \"modified_since\" version 11.0+ UNIX timestamp (number), 0 by default. Return only accounts modified in local database after specific timestamp Optional \"sorting\" Boolean, false by default. Additional sorting accounts in descending order NOTE: The \"count\" option is ignored if \"sorting\" is specified","title":"ledger"},{"location":"commands/rpc-protocol/#node_id","text":"enable_control required, version 17.0+ Debug purposes only This call is for internal diagnostics/debug purposes only. Do not rely on this interface being stable and do not use in a production system. Derive private key, public key and account number from node ID Request: { \"action\" : \"node_id\" } Response: { \"private\" : \"2AD75C9DC20EA497E41722290C4DC966ECC4D6C75CAA4E447961F918FD73D8C7\" , \"public\" : \"78B11E1777B8E7DF9090004376C3EDE008E84680A497C0805F68CA5928626E1C\" , \"as_account\" : \"xrb_1y7j5rdqhg99uyab1145gu3yur1ax35a3b6qr417yt8cd6n86uiw3d4whty3\" }","title":"node_id"},{"location":"commands/rpc-protocol/#node_id_delete","text":"enable_control required, version 17.0+ Debug purposes only This call is for internal diagnostics/debug purposes only. Do not rely on this interface being stable and do not use in a production system. Removing node ID (restart required to take effect) Request: { \"action\" : \"node_id_delete\" } Response: { \"deleted\" : \"1\" }","title":"node_id_delete"},{"location":"commands/rpc-protocol/#peers","text":"Returns a list of pairs of online peer IPv6:port and its node protocol network version Request: { \"action\" : \"peers\" } Response version 8.0+: { \"peers\" : { \"[::ffff:172.17.0.1]:32841\" : \"16\" } } Response before version 8.0: { \"peers\" : [ \"[::ffff:172.17.0.1]:32841\" ] } Optional \"peer_details\" version 18.0+ Boolean, false by default. Returns a list of peers IPv6:port with its node protocol network version and node ID. type returned in version 19.0+ as either tcp (preferred) or udp (fallback) used for peering with that node. Response: { \"peers\" : { \"[::ffff:172.17.0.1]:32841\" : { \"protocol_version\" : \"16\" , \"node_id\" : \"xrb_1y7j5rdqhg99uyab1145gu3yur1ax35a3b6qr417yt8cd6n86uiw3d4whty3\" , \"type\" : \"udp\" } } }","title":"peers"},{"location":"commands/rpc-protocol/#pending","text":"Returns a list of block hashes which have not yet been received by this account. Request: { \"action\" : \"pending\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" , \"count\" : \"1\" } Response: { \"blocks\" : [ \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" ] } Optional \"count\" Number. Determines limit of number of blocks to return. Optional \"threshold\" version 8.0+ Number (128 bit, decimal). Returns a list of pending block hashes with amount more or equal to threshold Request: { \"action\" : \"pending\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" , \"count\" : \"1\" , \"threshold\" : \"1000000000000000000000000\" } Response: { \"blocks\" : { \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" : \"6000000000000000000000000000000\" } } Optional \"source\" version 9.0+ Boolean, false by default. Returns a list of pending block hashes with amount and source accounts Request: { \"action\" : \"pending\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" , \"count\" : \"1\" , \"source\" : \"true\" } Response: { \"blocks\" : { \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" : { \"amount\" : \"6000000000000000000000000000000\" , \"source\" : \"xrb_3dcfozsmekr1tr9skf1oa5wbgmxt81qepfdnt7zicq5x3hk65fg4fqj58mbr\" } } } Optional \"include_active\" version 15.0+ Boolean, false by default. Include active blocks without finished confirmations Request: { \"action\" : \"pending\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" , \"count\" : \"1\" , \"include_active\" : \"true\" } Optional \"sorting\" version 19.0+ Boolean, false by default. Additionally sorts the blocks by their amounts in descending order. Optional \"include_only_confirmed\" version 19.0+ Boolean, false by default. Only returns block which have their confirmation height set or are undergoing confirmation height processing.","title":"pending"},{"location":"commands/rpc-protocol/#pending_exists","text":"version 8.0+ Check whether block is pending by hash Request: { \"action\" : \"pending_exists\" , \"hash\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"exists\" : \"1\" } Optional \"include_active\" version 15.0+ Boolean, false by default. Include active blocks without finished confirmations Request: { \"action\" : \"pending_exists\" , \"hash\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"include_active\" : \"true\" } Optional \"include_only_confirmed\" version 19.0+ Boolean, false by default. Only returns hashes which have their confirmation height set or are undergoing confirmation height processing.","title":"pending_exists"},{"location":"commands/rpc-protocol/#process","text":"Publish block to the network Request: { \"action\" : \"process\" , \"block\" : \"{ \\\"type\\\": \\\"state\\\", \\\"account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\", \\\"previous\\\": \\\"6CDDA48608C7843A0AC1122BDD46D9E20E21190986B19EAC23E7F33F2E6A6766\\\", \\\"representative\\\": \\\"xrb_3pczxuorp48td8645bs3m6c3xotxd3idskrenmi65rbrga5zmkemzhwkaznh\\\", \\\"balance\\\": \\\"40200000001000000000000000000000000\\\", \\\"link\\\": \\\"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\\\", \\\"link_as_account\\\": \\\"xrb_33t5by1653nt196hfwm5q3wq7oxtaix97r7bhox5zn8eratrzoqsny49ftsd\\\", \\\"signature\\\": \\\"A5DB164F6B81648F914E49CAB533900C389FAAD64FBB24F6902F9261312B29F730D07E9BCCD21D918301419B4E05B181637CF8419ED4DCBF8EF2539EB2467F07\\\", \\\"work\\\": \\\"000bc55b014e807d\\\" }\" } Response: { \"hash\" : \"E2FB233EF4554077A7BF1AA85851D5BF0B36965D2B0FB504B2BC778AB89917D3\" } Optional \"force\" version 13.1+ Boolean, false by default. Manually forcing fork resolution if processed block is not accepted as fork Optional \"subtype\" version 18.0+ String, empty by default. Additional check for state blocks subtype (send/receive/open/change/epoch). I.e. prevent accidental sending to incorrect accounts instead of receiving pending blocks Optional \"json_block\" version 19.0+ Default \"false\". If \"true\", \"block\" must contain a JSON subtree instead of a JSON string.","title":"process"},{"location":"commands/rpc-protocol/#representatives","text":"Returns a list of pairs of representative and its voting weight Request: { \"action\" : \"representatives\" } Response: { \"representatives\" : { \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" : \"3822372327060170000000000000000000000\" , \"xrb_1111111111111111111111111111111111111111111111111awsq94gtecn\" : \"30999999999999999999999999000000\" , \"xrb_114nk4rwjctu6n6tr6g6ps61g1w3hdpjxfas4xj1tq6i8jyomc5d858xr1xi\" : \"0\" } } Optional \"count\" version 9.0+ Number. Returns a list of pairs of representative and its voting weight up to count Optional \"sorting\" version 9.0+ Boolean, false by default. Additional sorting representatives in descending order NOTE: The \"count\" option is ignored if \"sorting\" is specified","title":"representatives"},{"location":"commands/rpc-protocol/#representatives_online","text":"version 18.0+ Returns a list of online representative accounts that have voted recently Request: { \"action\" : \"representatives_online\" } Response: { \"representatives\" : [ \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" , \"xrb_1111111111111111111111111111111111111111111111111awsq94gtecn\" , \"xrb_114nk4rwjctu6n6tr6g6ps61g1w3hdpjxfas4xj1tq6i8jyomc5d858xr1xi\" ] } versions 11.2\u201317.1 Returns a list of pairs of online representative accounts that have voted recently and empty strings Response: { \"representatives\" : { \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" : \"\" , \"xrb_1111111111111111111111111111111111111111111111111awsq94gtecn\" : \"\" , \"xrb_114nk4rwjctu6n6tr6g6ps61g1w3hdpjxfas4xj1tq6i8jyomc5d858xr1xi\" : \"\" } } Optional \"weight\" version 17.0+ Boolean, false by default. Returns voting weight for each representative. Response: { \"representatives\" : { \"xrb_114nk4rwjctu6n6tr6g6ps61g1w3hdpjxfas4xj1tq6i8jyomc5d858xr1xi\" : { \"weight\" : \"150462654614686936429917024683496890\" } } }","title":"representatives_online"},{"location":"commands/rpc-protocol/#republish","text":"Rebroadcast blocks starting at hash to the network Request: { \"action\" : \"republish\" , \"hash\" : \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" } Response: { \"blocks\" : [ \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" , \"A170D51B94E00371ACE76E35AC81DC9405D5D04D4CEBC399AEACE07AE05DD293\" ] } Optional \"sources\" version 8.0+ Boolean, false by default. Additionally rebroadcast source chain blocks for receive/open up to sources depth Request: { \"action\" : \"republish\" , \"hash\" : \"90D0C16AC92DD35814E84BFBCC739A039615D0A42A76EF44ADAEF1D99E9F8A35\" , \"count\" : \"1\" , \"sources\" : \"2\" } Response: { \"blocks\" : [ \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" , \"A170D51B94E00371ACE76E35AC81DC9405D5D04D4CEBC399AEACE07AE05DD293\" , \"90D0C16AC92DD35814E84BFBCC739A039615D0A42A76EF44ADAEF1D99E9F8A35\" ] } Optional \"destinations\" version 8.0+ Boolean, false by default. Additionally rebroadcast destination chain blocks from receive up to destinations depth Request: { \"action\" : \"republish\" , \"hash\" : \"A170D51B94E00371ACE76E35AC81DC9405D5D04D4CEBC399AEACE07AE05DD293\" , \"count\" : \"1\" , \"destinations\" : \"2\" } Response: { \"blocks\" : [ \"A170D51B94E00371ACE76E35AC81DC9405D5D04D4CEBC399AEACE07AE05DD293\" , \"90D0C16AC92DD35814E84BFBCC739A039615D0A42A76EF44ADAEF1D99E9F8A35\" , \"18563C814A54535B7C12BF76A0E23291BA3769536634AB90AD0305776A533E8E\" ] }","title":"republish"},{"location":"commands/rpc-protocol/#sign","text":"version 18.0+ Signing provided block with private key or key of account from wallet Request with private key: { \"action\" : \"sign\" , \"key\" : \"1D3759BB2CA187A66875D3B8497624159A576FD315E07F702B99B92BC59FC14A\" , \"block\" : \"{ \\\"type\\\": \\\"state\\\", \\\"account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\", \\\"previous\\\": \\\"6CDDA48608C7843A0AC1122BDD46D9E20E21190986B19EAC23E7F33F2E6A6766\\\", \\\"representative\\\": \\\"xrb_3pczxuorp48td8645bs3m6c3xotxd3idskrenmi65rbrga5zmkemzhwkaznh\\\", \\\"balance\\\": \\\"40200000001000000000000000000000000\\\", \\\"link\\\": \\\"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\\\", \\\"link_as_account\\\": \\\"xrb_33t5by1653nt196hfwm5q3wq7oxtaix97r7bhox5zn8eratrzoqsny49ftsd\\\", \\\"signature\\\": \\\"A5DB164F6B81648F914E49CAB533900C389FAAD64FBB24F6902F9261312B29F730D07E9BCCD21D918301419B4E05B181637CF8419ED4DCBF8EF2539EB2467F07\\\", \\\"work\\\": \\\"000bc55b014e807d\\\" }\" } Request with account from wallet: { \"action\" : \"sign\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"account\" : \"xrb_18ky5chy5ws89oi46ki4zjy6x5ezpmj98zg6icwke9bmuy99nosieyqf8c1h\" , \"block\" : \"{ \\\"type\\\": \\\"state\\\", \\\"account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\", \\\"previous\\\": \\\"6CDDA48608C7843A0AC1122BDD46D9E20E21190986B19EAC23E7F33F2E6A6766\\\", \\\"representative\\\": \\\"xrb_3pczxuorp48td8645bs3m6c3xotxd3idskrenmi65rbrga5zmkemzhwkaznh\\\", \\\"balance\\\": \\\"40200000001000000000000000000000000\\\", \\\"link\\\": \\\"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\\\", \\\"link_as_account\\\": \\\"xrb_33t5by1653nt196hfwm5q3wq7oxtaix97r7bhox5zn8eratrzoqsny49ftsd\\\", \\\"signature\\\": \\\"A5DB164F6B81648F914E49CAB533900C389FAAD64FBB24F6902F9261312B29F730D07E9BCCD21D918301419B4E05B181637CF8419ED4DCBF8EF2539EB2467F07\\\", \\\"work\\\": \\\"000bc55b014e807d\\\" }\" } Response: { \"signature\" : \"2A71F3877033F5966735F260E906BFCB7FA82CDD543BCD1224F180F85A96FC26CB3F0E4180E662332A0DFE4EE6A0F798A71C401011E635604E532383EC08C70D\" , \"block\" : \"{ \\\"type\\\": \\\"state\\\", \\\"account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\", \\\"previous\\\": \\\"6CDDA48608C7843A0AC1122BDD46D9E20E21190986B19EAC23E7F33F2E6A6766\\\", \\\"representative\\\": \\\"xrb_3pczxuorp48td8645bs3m6c3xotxd3idskrenmi65rbrga5zmkemzhwkaznh\\\", \\\"balance\\\": \\\"40200000001000000000000000000000000\\\", \\\"link\\\": \\\"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\\\", \\\"link_as_account\\\": \\\"xrb_33t5by1653nt196hfwm5q3wq7oxtaix97r7bhox5zn8eratrzoqsny49ftsd\\\", \\\"signature\\\": \\\"2A71F3877033F5966735F260E906BFCB7FA82CDD543BCD1224F180F85A96FC26CB3F0E4180E662332A0DFE4EE6A0F798A71C401011E635604E532383EC08C70D\\\", \\\"work\\\": \\\"000bc55b014e807d\\\" }\" } Optional \"json_block\" version 19.0+ Default \"false\". If \"true\", the input \"block\" must contain a JSON subtree instead of a JSON string. In addition, the response block will be a JSON subtree. Optional sign block hash Requires config.json modification. Set \"enable_sign_hash\" to \"true\" Request: { \"action\" : \"sign\" , \"hash\" : \"E2FB233EF4554077A7BF1AA85851D5BF0B36965D2B0FB504B2BC778AB89917D3\" } Response: { \"signature\" : \"2A71F3877033F5966735F260E906BFCB7FA82CDD543BCD1224F180F85A96FC26CB3F0E4180E662332A0DFE4EE6A0F798A71C401011E635604E532383EC08C70D\" }","title":"sign"},{"location":"commands/rpc-protocol/#stats","text":"version 12.2+ For configuration and other details, please see Statistics from RPC Request counters: { \"action\" : \"stats\" , \"type\" : \"counters\" } Counters response: { \"type\" : \"counters\" , \"created\" : \"2018.03.29 01:46:36\" , \"entries\" : [ { \"time\" : \"01:46:36\" , \"type\" : \"traffic\" , \"detail\" : \"all\" , \"dir\" : \"in\" , \"value\" : \"3122792\" }, { \"time\" : \"01:46:36\" , \"type\" : \"traffic\" , \"detail\" : \"all\" , \"dir\" : \"out\" , \"value\" : \"203184\" } ... ] } version 18.0+ also returns \"stat_duration_seconds\": the number of seconds since startup or since the last \"stats_clear\" call Request samples: { \"action\" : \"stats\" , \"type\" : \"samples\" } Samples response: { \"type\" : \"samples\" , \"created\" : \"2018.03.29 01:47:08\" , \"entries\" : [ { \"time\" : \"01:47:04\" , \"type\" : \"traffic\" , \"detail\" : \"all\" , \"dir\" : \"in\" , \"value\" : \"59480\" }, { \"time\" : \"01:47:05\" , \"type\" : \"traffic\" , \"detail\" : \"all\" , \"dir\" : \"in\" , \"value\" : \"44496\" } ... ] } version 18.0+ NOTE: This call is for debug purposes only and is unstable as returned objects may be frequently changed. Request objects: { \"action\" : \"stats\" , \"type\" : \"objects\" } Objects response: { \"node\" : { \"ledger\" : { \"bootstrap_weights\" : { \"count\" : \"125\" , \"size\" : \"7000\" } }, \"peers\" : { \"peers\" : { \"count\" : \"38\" , \"size\" : \"7296\" }, \"attempts\" : { \"count\" : \"95\" , \"size\" : \"3800\" }, }, ... } }","title":"stats"},{"location":"commands/rpc-protocol/#stats_clear","text":"version 18.0+ Clears all collected statistics. The \"stat_duration_seconds\" value in the \"stats\" action is also reset. Request: { \"action\" : \"stats_clear\" } Response: { \"success\" : \"\" }","title":"stats_clear"},{"location":"commands/rpc-protocol/#stop","text":"enable_control required Method to safely shutdown node Request: { \"action\" : \"stop\" } Response: { \"success\" : \"\" }","title":"stop"},{"location":"commands/rpc-protocol/#successors","text":"Returns a list of block hashes in the account chain starting at block up to count (direction from open block up to frontier, from older blocks to newer). Will list all blocks up to frontier (latest block) of this chain when count is set to \"-1\". The requested block hash is included in the answer. Request: { \"action\" : \"successors\" , \"block\" : \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" , \"count\" : \"1\" } Response: { \"blocks\" : [ \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" ] } Optional \"offset\" version 18.0+ Number, 0 by default. Return the account chain block hashes offset by the specified number of blocks Optional \"reverse\" version 18.0+ Boolean, false by default. Returns a consecutive list of block hashes in the account chain starting at block back to count (direction from frontier back to open block, from newer blocks to older). Equal to chain","title":"successors"},{"location":"commands/rpc-protocol/#validate_account_number","text":"Check whether account is a valid account number using checksum Request: { \"action\" : \"validate_account_number\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" } Response: { \"valid\" : \"1\" }","title":"validate_account_number"},{"location":"commands/rpc-protocol/#version","text":"Returns version information for RPC, Store, Protocol (network) & Node (Major & Minor version) RPC Version always returns \"1\" as of 01/11/2018 Request: { \"action\" : \"version\" } Response: { \"rpc_version\" : \"1\" , \"store_version\" : \"11\" , \"protocol_version\" : \"15\" , \"node_vendor\" : \"RaiBlocks 17.0\" }","title":"version"},{"location":"commands/rpc-protocol/#unchecked","text":"version 8.0+ Returns a list of pairs of unchecked synchronizing block hash and its json representation up to count Request: { \"action\" : \"unchecked\" , \"count\" : \"1\" } Response: { \"blocks\" : { \"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\\\",\\n \\\"previous\\\": \\\"CE898C131AAEE25E05362F247760F8A3ACF34A9796A5AE0D9204E86B0637965E\\\",\\n \\\"representative\\\": \\\"xrb_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\\\",\\n \\\"balance\\\": \\\"5606157000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"5D1AA8A45F8736519D707FCB375976A7F9AF795091021D7E9C7548D6F45DD8D5\\\",\\n \\\"link_as_account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\",\\n \\\"signature\\\": \\\"82D41BC16F313E4B2243D14DFFA2FB04679C540C2095FEE7EAE0F2F26880AD56DD48D87A7CC5DD760C5B2D76EE2C205506AA557BF00B60D8DEE312EC7343A501\\\",\\n \\\"work\\\": \\\"8a142e07a10996d5\\\"\\n }\\n\" } }","title":"unchecked"},{"location":"commands/rpc-protocol/#unchecked_clear","text":"enable_control required, version 8.0+ Clear unchecked synchronizing blocks Request: { \"action\" : \"unchecked_clear\" } Response: { \"success\" : \"\" }","title":"unchecked_clear"},{"location":"commands/rpc-protocol/#unchecked_get","text":"version 8.0+ Retrieves a json representation of unchecked synchronizing block by hash Request: { \"action\" : \"unchecked_get\" , \"hash\" : \"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\" } Response: { \"contents\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\\\",\\n \\\"previous\\\": \\\"CE898C131AAEE25E05362F247760F8A3ACF34A9796A5AE0D9204E86B0637965E\\\",\\n \\\"representative\\\": \\\"xrb_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\\\",\\n \\\"balance\\\": \\\"5606157000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"5D1AA8A45F8736519D707FCB375976A7F9AF795091021D7E9C7548D6F45DD8D5\\\",\\n \\\"link_as_account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\",\\n \\\"signature\\\": \\\"82D41BC16F313E4B2243D14DFFA2FB04679C540C2095FEE7EAE0F2F26880AD56DD48D87A7CC5DD760C5B2D76EE2C205506AA557BF00B60D8DEE312EC7343A501\\\",\\n \\\"work\\\": \\\"8a142e07a10996d5\\\"\\n }\\n\" } Optional \"json_block\" version 19.0+ Default \"false\". If \"true\", \"contents\" will contain a JSON subtree instead of a JSON string.","title":"unchecked_get"},{"location":"commands/rpc-protocol/#unchecked_keys","text":"version 8.0+ Retrieves unchecked database keys, blocks hashes & a json representations of unchecked pending blocks starting from key up to count Request: { \"action\" : \"unchecked_keys\" , \"key\" : \"CE898C131AAEE25E05362F247760F8A3ACF34A9796A5AE0D9204E86B0637965E\" , \"count\" : \"1\" } Response: { \"unchecked\" : [ { \"key\" : \"CE898C131AAEE25E05362F247760F8A3ACF34A9796A5AE0D9204E86B0637965E\" , \"hash\" : \"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\" , \"contents\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\\\",\\n \\\"previous\\\": \\\"CE898C131AAEE25E05362F247760F8A3ACF34A9796A5AE0D9204E86B0637965E\\\",\\n \\\"representative\\\": \\\"xrb_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\\\",\\n \\\"balance\\\": \\\"5606157000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"5D1AA8A45F8736519D707FCB375976A7F9AF795091021D7E9C7548D6F45DD8D5\\\",\\n \\\"link_as_account\\\": \\\"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\",\\n \\\"signature\\\": \\\"82D41BC16F313E4B2243D14DFFA2FB04679C540C2095FEE7EAE0F2F26880AD56DD48D87A7CC5DD760C5B2D76EE2C205506AA557BF00B60D8DEE312EC7343A501\\\",\\n \\\"work\\\": \\\"8a142e07a10996d5\\\"\\n }\\n\" } ] } Optional \"json_block\" version 19.0+ Default \"false\". If \"true\", \"contents\" will contain a JSON subtree instead of a JSON string.","title":"unchecked_keys"},{"location":"commands/rpc-protocol/#unopened","text":"enable_control required, version 19.0+ Returns the total pending balance for unopened accounts in the local database, starting at account (optional) up to count (optional), sorted by account number. Notes: By default excludes the burn account. Request: { \"action\" : \"unopened\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111111hifc8npp\" , \"count\" : \"1\" } Response: { \"accounts\" : { \"xrb_1111111111111111111111111111111111111111111111111111hifc8npp\" : \"207034077034226183413773082289554618448\" } }","title":"unopened"},{"location":"commands/rpc-protocol/#uptime","text":"version 18.0+ Return node uptime in seconds Request: { \"action\" : \"uptime\" } Response: { \"seconds\" : \"6000\" }","title":"uptime"},{"location":"commands/rpc-protocol/#work_cancel","text":"enable_control required Stop generating work for block Request: { \"action\" : \"work_cancel\" , \"hash\" : \"718CC2121C3E641059BC1C2CFC45666C99E8AE922F7A807B7D07B62C995D79E2\" } Response: { }","title":"work_cancel"},{"location":"commands/rpc-protocol/#work_generate","text":"enable_control required Generates work for block Request: { \"action\" : \"work_generate\" , \"hash\" : \"718CC2121C3E641059BC1C2CFC45666C99E8AE922F7A807B7D07B62C995D79E2\" } Response: { \"work\" : \"2bf29ef00786a6bc\" , \"difficulty\" : \"ffffffd21c3933f4\" , \"multiplier\" : \"1.394647\" } Optional \"use_peers\" version 14.0+ Boolean, false by default. If the optional use_peers parameter is set to true , then the node will query its work peers (if it has any). Without this parameter, the node will only generate work locally. Optional \"difficulty\" version 19.0+ Difficulty value (16 hexadecimal digits string, 64 bit). Uses difficulty value to generate work","title":"work_generate"},{"location":"commands/rpc-protocol/#work_peer_add","text":"enable_control required, version 8.0+ Add specific IP address and port as work peer for node until restart Request: { \"action\" : \"work_peer_add\" , \"address\" : \"::ffff:172.17.0.1\" , \"port\" : \"7076\" } Response: { \"success\" : \"\" }","title":"work_peer_add"},{"location":"commands/rpc-protocol/#work_peers","text":"enable_control required, version 8.0+ Request: { \"action\" : \"work_peers\" } Response: { \"work_peers\" : [ \"::ffff:172.17.0.1:7076\" ] }","title":"work_peers"},{"location":"commands/rpc-protocol/#work_peers_clear","text":"enable_control required, version 8.0+ Clear work peers node list until restart Request: { \"action\" : \"work_peers_clear\" } Response: { \"success\" : \"\" }","title":"work_peers_clear"},{"location":"commands/rpc-protocol/#work_validate","text":"Check whether work is valid for block Request: { \"action\" : \"work_validate\" , \"work\" : \"2bf29ef00786a6bc\" , \"hash\" : \"718CC2121C3E641059BC1C2CFC45666C99E8AE922F7A807B7D07B62C995D79E2\" } Response: { \"valid\" : \"1\" , \"difficulty\" : \"ffffffd21c3933f4\" , \"multiplier\" : \"1.394647\" } Since version 19.0+: The response also includes the work value in hexadecimal format, and a multiplier from the base difficulty (not from the optionally given difficulty). Optional \"difficulty\" version 19.0+ Difficulty value (16 hexadecimal digits string, 64 bit). Uses difficulty value to validate work","title":"work_validate"},{"location":"commands/rpc-protocol/#wallet-rpcs","text":"For development and testing only Below are RPC commands that interact with the built-in, QT-based node wallet. This wallet is only recommended for development and testing. For production integrations, setting up custom External Management processes is required.","title":"Wallet RPCs"},{"location":"commands/rpc-protocol/#account_create","text":"enable_control required Creates a new account, insert next deterministic key in wallet Request: { \"action\" : \"account_create\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" } Optional \"index\" version 18.0+ unset by default. Indicates which index to create account for starting with 0 Request: { \"action\" : \"account_create\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"index\" : \"1\" } Optional \"work\" version 9.0+ Boolean, true by default. Setting false disables work generation after creating account Request: { \"action\" : \"account_create\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"work\" : \"false\" }","title":"account_create"},{"location":"commands/rpc-protocol/#account_list","text":"Lists all the accounts inside wallet Request: { \"action\" : \"account_list\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"accounts\" : [ \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" ] }","title":"account_list"},{"location":"commands/rpc-protocol/#account_move","text":"enable_control required Moves accounts from source to wallet Request: { \"action\" : \"account_move\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"source\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"accounts\" : [ \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" ] } Response: { \"moved\" : \"1\" }","title":"account_move"},{"location":"commands/rpc-protocol/#account_remove","text":"enable_control required Remove account from wallet Request: { \"action\" : \"account_remove\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"account\" : \"xrb_39a73oy5ungrhxy5z5oao1xso4zo7dmgpjd4u74xcrx3r1w6rtazuouw6qfi\" } Response: { \"removed\" : \"1\" }","title":"account_remove"},{"location":"commands/rpc-protocol/#account_representative_set","text":"enable_control required Sets the representative for account in wallet Request: { \"action\" : \"account_representative_set\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"account\" : \"xrb_39a73oy5ungrhxy5z5oao1xso4zo7dmgpjd4u74xcrx3r1w6rtazuouw6qfi\" , \"representative\" : \"xrb_16u1uufyoig8777y6r8iqjtrw8sg8maqrm36zzcm95jmbd9i9aj5i8abr8u5\" } Response: { \"block\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Optional \"work\" version 9.0+ Work value (16 hexadecimal digits string, 64 bit). Uses work value for block from external source","title":"account_representative_set"},{"location":"commands/rpc-protocol/#accounts_create","text":"enable_control required, version 9.0+ Creates new accounts, insert next deterministic keys in wallet up to count Request: { \"action\" : \"accounts_create\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"count\" : \"2\" } Response: { \"accounts\" : [ \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"xrb_1e5aqegc1jb7qe964u4adzmcezyo6o146zb8hm6dft8tkp79za3s00000000\" ] } Optional enabling work generation version 11.2+ Boolean, false by default. Enables work generation after creating accounts Request: { \"action\" : \"accounts_create\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"count\" : \"2\" , \"work\" : \"true\" } Note: Before version 11.2 work generation was enabled by default, if you want to disable work generation for previous versions, use \"work\": \"false\"","title":"accounts_create"},{"location":"commands/rpc-protocol/#block_create-optional-wallet","text":"See block_create Node RPC command above","title":"block_create (optional wallet)"},{"location":"commands/rpc-protocol/#password_change","text":"enable_control required Changes the password for wallet to password Request: { \"action\" : \"password_change\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"password\" : \"test\" } Response: { \"changed\" : \"1\" }","title":"password_change"},{"location":"commands/rpc-protocol/#password_enter","text":"Enters the password in to wallet to unlock it Request: { \"action\" : \"password_enter\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"password\" : \"test\" } Response: { \"valid\" : \"1\" }","title":"password_enter"},{"location":"commands/rpc-protocol/#password_valid","text":"Checks whether the password entered for wallet is valid Request: { \"action\" : \"password_valid\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"valid\" : \"1\" }","title":"password_valid"},{"location":"commands/rpc-protocol/#receive","text":"enable_control required Receive pending block for account in wallet Request: { \"action\" : \"receive\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"block\" : \"53EAA25CE28FA0E6D55EA9704B32604A736966255948594D55CBB05267CECD48\" } Response: { \"block\" : \"EE5286AB32F580AB65FD84A69E107C69FBEB571DEC4D99297E19E3FA5529547B\" } Optional \"work\" version 9.0+ Work value (16 hexadecimal digits string, 64 bit). Uses work value for block from external source","title":"receive"},{"location":"commands/rpc-protocol/#receive_minimum","text":"enable_control required, version 8.0+ Returns receive minimum for node wallet Request: { \"action\" : \"receive_minimum\" } Response: { \"amount\" : \"1000000000000000000000000\" }","title":"receive_minimum"},{"location":"commands/rpc-protocol/#receive_minimum_set","text":"enable_control required, version 8.0+ Set amount as new receive minimum for node wallet until restart Request: { \"action\" : \"receive_minimum_set\" , \"amount\" : \"1000000000000000000000000000000\" } Response: { \"success\" : \"\" }","title":"receive_minimum_set"},{"location":"commands/rpc-protocol/#search_pending","text":"enable_control required Tells the node to look for pending blocks for any account in wallet Request: { \"action\" : \"search_pending\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"started\" : \"1\" }","title":"search_pending"},{"location":"commands/rpc-protocol/#search_pending_all","text":"enable_control required, version 8.0+ Tells the node to look for pending blocks for any account in all available wallets Request: { \"action\" : \"search_pending_all\" } Response: { \"success\" : \"\" }","title":"search_pending_all"},{"location":"commands/rpc-protocol/#send","text":"enable_control required Send amount from source in wallet to destination Request: { \"action\" : \"send\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"source\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"destination\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"amount\" : \"1000000\" } Response: { \"block\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Proof of Work is precomputed for one transaction in the background when you are using the node wallet to track accounts. If it has been a while since your last transaction it will send instantly, the next one will need to wait for Proof of Work to be generated. If the request times out, then the send may or may not have gone through. If you want to the ability to retry a failed send, all send calls must specify the id parameter as follows Highly recommended \"id\" version 10.0+ You can (and should) specify a unique id for each spend to provide idempotency . That means that if you call send two times with the same id, the second request won't send any additional Nano, and will return the first block instead. The id can be any string. This may be a required parameter in the future. If you accidentally reuse an id, the send will not go through (it will be seen as a duplicate request), so make sure your ids are unique! They must be unique per node, and are not segregated per wallet. Using the same id for requests with different parameters (wallet, source, destination, and amount) is undefined behavior and may result in an error in the future. Request: { \"action\" : \"send\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"source\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"destination\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"amount\" : \"1000000\" , \"id\" : \"7081e2b8fec9146e\" } Response: { \"block\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Sending the request again will yield the same block, and will not affect the ledger. Optional \"work\" version 9.0+ Work value (16 hexadecimal digits string, 64 bit). Uses work value for block from external source Request: { \"action\" : \"send\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"source\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"destination\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"amount\" : \"1000000\" , \"work\" : \"2bf29ef00786a6bc\" }","title":"send"},{"location":"commands/rpc-protocol/#sign-optional-wallet","text":"See sign Node RPC command above","title":"sign (optional wallet)"},{"location":"commands/rpc-protocol/#wallet_add","text":"enable_control required Add an adhoc private key key to wallet Request: { \"action\" : \"wallet_add\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"key\" : \"34F0A37AAD20F4A260F0A5B3CB3D7FB50673212263E58A380BC10474BB039CE4\" } Response: { \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" } Optional disabling work generation version 9.0+ Boolean, false by default. Disables work generation after adding account Request: { \"action\" : \"wallet_add\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"key\" : \"34F0A37AAD20F4A260F0A5B3CB3D7FB50673212263E58A380BC10474BB039CE4\" , \"work\" : \"false\" }","title":"wallet_add"},{"location":"commands/rpc-protocol/#wallet_add_watch","text":"enable_control required, version 11.0+ Add watch-only accounts to wallet Request: { \"action\" : \"wallet_add_watch\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"accounts\" : [ \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"xrb_111111111111111111111111111111111111111111111111111000000000\" ] } Response: { \"success\" : \"\" }","title":"wallet_add_watch"},{"location":"commands/rpc-protocol/#wallet_balances","text":"Returns how many raw is owned and how many have not yet been received by all accounts in wallet Request: { \"action\" : \"wallet_balances\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"balances\" : { \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" : { \"balance\" : \"10000\" , \"pending\" : \"10000\" } } } Optional \"threshold\" version 9.0+ Number (128 bit, decimal). Returns wallet accounts balances more or equal to threshold","title":"wallet_balances"},{"location":"commands/rpc-protocol/#wallet_change_seed","text":"enable_control required Changes seed for wallet to seed . Notes: Clear all deterministic accounts in wallet! To restore account from new seed use RPC accounts_create Request: { \"action\" : \"wallet_change_seed\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"seed\" : \"74F2B37AAD20F4A260F0A5B3CB3D7FB51673212263E58A380BC10474BB039CEE\" } Response: { \"success\" : \"\" , \"last_restored_account\" : \"xrb_1mhdfre3zczr86mp44jd3xft1g1jg66jwkjtjqixmh6eajfexxti7nxcot9c\" , \"restored_count\" : \"1\" } Optional \"count\" version 18.0+ Number, 0 by default. Manually set count of accounts to restore from seed","title":"wallet_change_seed"},{"location":"commands/rpc-protocol/#wallet_contains","text":"Check whether wallet contains account Request: { \"action\" : \"wallet_contains\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" } Response: { \"exists\" : \"1\" }","title":"wallet_contains"},{"location":"commands/rpc-protocol/#wallet_create","text":"enable_control required Creates a new random wallet id Request: { \"action\" : \"wallet_create\" } Response: { \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Optional \"seed\" version 18.0+ Seed value (64 hexadecimal digits string, 256 bit). Changes seed for a new wallet to seed , returning last restored account from given seed & restored count","title":"wallet_create"},{"location":"commands/rpc-protocol/#wallet_destroy","text":"enable_control required Destroys wallet and all contained accounts Request: { \"action\" : \"wallet_destroy\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"destroyed\" : \"1\" }","title":"wallet_destroy"},{"location":"commands/rpc-protocol/#wallet_export","text":"Return a json representation of wallet Request: { \"action\" : \"wallet_export\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"json\" : \"{\\\"0000000000000000000000000000000000000000000000000000000000000000\\\": \\\"0000000000000000000000000000000000000000000000000000000000000001\\\"}\" }","title":"wallet_export"},{"location":"commands/rpc-protocol/#wallet_frontiers","text":"Returns a list of pairs of account and block hash representing the head block starting for accounts from wallet Request: { \"action\" : \"wallet_frontiers\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"frontiers\" : { \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } }","title":"wallet_frontiers"},{"location":"commands/rpc-protocol/#wallet_history","text":"version 18.0+ Reports send/receive information for accounts in wallet. Change blocks are skipped, open blocks will appear as receive. Response will start with most recent blocks according to local ledger. Request: { \"action\" : \"wallet_history\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"history\" : [ { \"type\" : \"send\" , \"account\" : \"xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\" , \"amount\" : \"30000000000000000000000000000000000\" , \"block_account\" : \"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\" \"hash\" : \"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\" \"local_timestamp\" : \"1527698508\" }, \"type\" : \"send\" , \"account\" : \"xrb_38ztgpejb7yrm7rr586nenkn597s3a1sqiy3m3uyqjicht7kzuhnihdk6zpz\" , \"amount\" : \"40000000000000000000000000000000000\" , \"block_account\" : \"xrb_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\" \"hash\" : \"CE898C131AAEE25E05362F247760F8A3ACF34A9796A5AE0D9204E86B0637965E\" \"local_timestamp\" : \"1527698492\" } ] } Optional \"modified_since\" UNIX timestamp (number), 0 by default. Return only accounts modified in local database after specific timestamp","title":"wallet_history"},{"location":"commands/rpc-protocol/#wallet_info","text":"version 15.0+ Returns the sum of all accounts balances in wallet , number of accounts in wallet, number of deterministic & adhoc (non-deterministic) accounts, deterministic index (index of last account derived from seed. Equal to deterministic accounts number if no accounts were removed) Request: { \"action\" : \"wallet_info\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"balance\" : \"10000\" , \"pending\" : \"10000\" , \"accounts_count\" : \"3\" , \"adhoc_count\" : \"1\" , \"deterministic_count\" : \"2\" , \"deterministic_index\" : \"2\" }","title":"wallet_info"},{"location":"commands/rpc-protocol/#wallet_ledger","text":"enable_control required, version 11.0+ Returns frontier, open block, change representative block, balance, last modified timestamp from local database & block count for accounts from wallet Request: { \"action\" : \"wallet_ledger\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"accounts\" : { \"xrb_11119gbh8hb4hj1duf7fdtfyf5s75okzxdgupgpgm1bj78ex3kgy7frt3s9n\" : { \"frontier\" : \"E71AF3E9DD86BBD8B4620EFA63E065B34D358CFC091ACB4E103B965F95783321\" , \"open_block\" : \"643B77F1ECEFBDBE1CC909872964C1DBBE23A6149BD3CEF2B50B76044659B60F\" , \"representative_block\" : \"643B77F1ECEFBDBE1CC909872964C1DBBE23A6149BD3CEF2B50B76044659B60F\" , \"balance\" : \"0\" , \"modified_timestamp\" : \"1511476234\" , \"block_count\" : \"2\" } } } Optional \"representative\", \"weight\", \"pending\" Booleans, false by default. Additionally returns representative, voting weight, pending balance for each account Request: { \"action\" : \"wallet_ledger\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"representative\" : \"true\" , \"weight\" : \"true\" , \"pending\" : \"true\" } Response: { \"accounts\" : { \"xrb_11119gbh8hb4hj1duf7fdtfyf5s75okzxdgupgpgm1bj78ex3kgy7frt3s9n\" : { \"frontier\" : \"E71AF3E9DD86BBD8B4620EFA63E065B34D358CFC091ACB4E103B965F95783321\" , \"open_block\" : \"643B77F1ECEFBDBE1CC909872964C1DBBE23A6149BD3CEF2B50B76044659B60F\" , \"representative_block\" : \"643B77F1ECEFBDBE1CC909872964C1DBBE23A6149BD3CEF2B50B76044659B60F\" , \"balance\" : \"0\" , \"modified_timestamp\" : \"1511476234\" , \"block_count\" : \"2\" , \"representative\" : \"xrb_1anrzcuwe64rwxzcco8dkhpyxpi8kd7zsjc1oeimpc3ppca4mrjtwnqposrs\" , \"weight\" : \"0\" , \"pending\" : \"0\" } } } Optional \"modified_since\" UNIX timestamp (number), 0 by default. Return only accounts modified in local database after specific timestamp","title":"wallet_ledger"},{"location":"commands/rpc-protocol/#wallet_lock","text":"enable_control required, version 9.0+ Locks wallet Request: { \"action\" : \"wallet_lock\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"locked\" : \"1\" }","title":"wallet_lock"},{"location":"commands/rpc-protocol/#wallet_locked","text":"Checks whether wallet is locked Request: { \"action\" : \"wallet_locked\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"locked\" : \"0\" }","title":"wallet_locked"},{"location":"commands/rpc-protocol/#wallet_pending","text":"enable_control required, version 8.0+ Returns a list of block hashes which have not yet been received by accounts in this wallet Request: { \"action\" : \"wallet_pending\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" \"count\" : \"1\" } Response: { \"blocks\" : { \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" : [ \"142A538F36833D1CC78B94E11C766F75818F8B940771335C6C1B8AB880C5BB1D\" ], \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" : [ \"4C1FEEF0BEA7F50BE35489A1233FE002B212DEA554B55B1B470D78BD8F210C74\" ] } } Optional \"threshold\" Number (128 bit, decimal). Returns a list of pending block hashes with amount more or equal to threshold Request: { \"action\" : \"wallet_pending\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"count\" : \"1\" , \"threshold\" : \"1000000000000000000000000\" } Response: { \"blocks\" : { \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" : { \"142A538F36833D1CC78B94E11C766F75818F8B940771335C6C1B8AB880C5BB1D\" : \"6000000000000000000000000000000\" }, \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" : { \"4C1FEEF0BEA7F50BE35489A1233FE002B212DEA554B55B1B470D78BD8F210C74\" : \"106370018000000000000000000000000\" } } Optional \"source\" version 9.0+ Boolean, false by default. Returns a list of pending block hashes with amount and source accounts Request: { \"action\" : \"wallet_pending\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"count\" : \"1\" , \"source\" : \"true\" } Response: { \"blocks\" : { \"xrb_1111111111111111111111111111111111111111111111111117353trpda\" : { \"142A538F36833D1CC78B94E11C766F75818F8B940771335C6C1B8AB880C5BB1D\" : { \"amount\" : \"6000000000000000000000000000000\" , \"source\" : \"xrb_3dcfozsmekr1tr9skf1oa5wbgmxt81qepfdnt7zicq5x3hk65fg4fqj58mbr\" } }, \"xrb_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\" : { \"4C1FEEF0BEA7F50BE35489A1233FE002B212DEA554B55B1B470D78BD8F210C74\" : { \"amount\" : \"106370018000000000000000000000000\" , \"source\" : \"xrb_13ezf4od79h1tgj9aiu4djzcmmguendtjfuhwfukhuucboua8cpoihmh8byo\" } } } Optional \"include_active\" version 15.0+ Boolean, false by default. Include active blocks without finished confirmations Request: { \"action\" : \"wallet_pending\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"count\" : \"1\" , \"include_active\" : \"true\" } Optional \"include_only_confirmed\" version 19.0+ Boolean, false by default. Only returns block which have their confirmation height set or are undergoing confirmation height processing.","title":"wallet_pending"},{"location":"commands/rpc-protocol/#wallet_representative","text":"Returns the default representative for wallet Request: { \"action\" : \"wallet_representative\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"representative\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" }","title":"wallet_representative"},{"location":"commands/rpc-protocol/#wallet_representative_set","text":"enable_control required Sets the default representative for wallet (used only for new accounts, already existing accounts use already set representatives) Request: { \"action\" : \"wallet_representative_set\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"representative\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" } Response: { \"set\" : \"1\" } Optional \"update_existing_accounts\" version 18.0+ Boolean, false by default. Change representative for existing accounts in wallet. May require a lot of time to complete for large wallets due to work generation for change type state blocks","title":"wallet_representative_set"},{"location":"commands/rpc-protocol/#wallet_republish","text":"enable_control required, version 8.0+ Rebroadcast blocks for accounts from wallet starting at frontier down to count to the network Request: { \"action\" : \"wallet_republish\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"count\" : \"2\" } Response: { \"blocks\" : [ \"991CF190094C00F0B68E2E5F75F6BEE95A2E0BD93CEAA4A6734DB9F19B728948\" , \"A170D51B94E00371ACE76E35AC81DC9405D5D04D4CEBC399AEACE07AE05DD293\" , \"90D0C16AC92DD35814E84BFBCC739A039615D0A42A76EF44ADAEF1D99E9F8A35\" ] }","title":"wallet_republish"},{"location":"commands/rpc-protocol/#wallet_work_get","text":"enable_control required, version 8.0+ Returns a list of pairs of account and work from wallet Request: { \"action\" : \"wallet_work_get\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"works\" : { \"xrb_1111111111111111111111111111111111111111111111111111hifc8npp\" : \"432e5cf728c90f4f\" } }","title":"wallet_work_get"},{"location":"commands/rpc-protocol/#work_get","text":"enable_control required, version 8.0+ Retrieves work for account in wallet Request: { \"action\" : \"work_get\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111111hifc8npp\" } Response: { \"work\" : \"432e5cf728c90f4f\" }","title":"work_get"},{"location":"commands/rpc-protocol/#work_set","text":"enable_control required, version 8.0+ Set work for account in wallet Request: { \"action\" : \"work_set\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" , \"account\" : \"xrb_1111111111111111111111111111111111111111111111111111hifc8npp\" , \"work\" : \"0000000000000000\" } Response: { \"success\" : \"\" }","title":"work_set"},{"location":"commands/rpc-protocol/#unit-conversion-rpcs","text":"","title":"Unit Conversion RPCs"},{"location":"commands/rpc-protocol/#krai_from_raw","text":"Divide a raw amount down by the krai ratio. Request: { \"action\" : \"krai_from_raw\" , \"amount\" : \"1000000000000000000000000000\" } Response: { \"amount\" : \"1\" }","title":"krai_from_raw"},{"location":"commands/rpc-protocol/#krai_to_raw","text":"Multiply an krai amount by the krai ratio. Request: { \"action\" : \"krai_to_raw\" , \"amount\" : \"1\" } Response: { \"amount\" : \"1000000000000000000000000000\" }","title":"krai_to_raw"},{"location":"commands/rpc-protocol/#mrai_from_raw","text":"Divide a raw amount down by the Mrai ratio. Request: { \"action\" : \"mrai_from_raw\" , \"amount\" : \"1000000000000000000000000000000\" } Response: { \"amount\" : \"1\" }","title":"mrai_from_raw"},{"location":"commands/rpc-protocol/#mrai_to_raw","text":"Multiply an Mrai amount by the Mrai ratio. Request: { \"action\" : \"mrai_to_raw\" , \"amount\" : \"1\" } Response: { \"amount\" : \"1000000000000000000000000000000\" }","title":"mrai_to_raw"},{"location":"commands/rpc-protocol/#rai_from_raw","text":"Divide a raw amount down by the rai ratio. Request: { \"action\" : \"rai_from_raw\" , \"amount\" : \"1000000000000000000000000\" } Response: { \"amount\" : \"1\" }","title":"rai_from_raw"},{"location":"commands/rpc-protocol/#rai_to_raw","text":"Multiply an rai amount by the rai ratio. Request: { \"action\" : \"rai_to_raw\" , \"amount\" : \"1\" } Response: { \"amount\" : \"1000000000000000000000000\" }","title":"rai_to_raw"},{"location":"commands/rpc-protocol/#deprecated-rpcs","text":"","title":"Deprecated RPCs"},{"location":"commands/rpc-protocol/#history","text":"Deprecated : please use account_history instead. It provides a head option which is identical to the history hash option.","title":"history"},{"location":"commands/rpc-protocol/#payment_begin","text":"Deprecated , to be removed in version 22 Begin a new payment session. Searches wallet for an account that's marked as available and has a 0 balance. If one is found, the account number is returned and is marked as unavailable. If no account is found, a new account is created, placed in the wallet, and returned. Request: { \"action\" : \"payment_begin\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" }","title":"payment_begin"},{"location":"commands/rpc-protocol/#payment_end","text":"Deprecated , to be removed in version 22 End a payment session. Marks the account as available for use in a payment session. Request: { \"action\" : \"payment_end\" , \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"wallet\" : \"FFFD1BAEC8EC20814BBB9059B393051AAA8380F9B5A2E6B2489A277D81789EEE\" } Response: {}","title":"payment_end"},{"location":"commands/rpc-protocol/#payment_init","text":"Deprecated , to be removed in version 22 Marks all accounts in wallet as available for being used as a payment session. Request: { \"action\" : \"payment_init\" , \"wallet\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } Response: { \"status\" : \"Ready\" }","title":"payment_init"},{"location":"commands/rpc-protocol/#payment_wait","text":"Deprecated , to be removed in version 22 Wait for payment of 'amount' to arrive in 'account' or until 'timeout' milliseconds have elapsed. Request: { \"action\" : \"payment_wait\" , \"account\" : \"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\" , \"amount\" : \"1\" , \"timeout\" : \"1000\" } Response: { \"status\" : \"success\" }","title":"payment_wait"},{"location":"integration-guides/advanced/","text":"Cold Wallets \u00b6 When security of funds is critical, it is a best practice to split your balance between multiple wallets: One or more hot wallets to handle daily user deposits/withdraws. One or more cold wallets to securely store Nano in an offline environment. Important A cold wallet manages private keys that have never been on a network-enabled computer. This guide extends the concepts covered in External Private Key Management . It is advised that you read that section before continuing. Note Operations done on the hot, online, insecure computer will be prefaced with (HOT) . Operations done on the cold, offline, secure computer will be prefaced with (COLD) . Both the hot and cold computers need to have the nano_node software installed. The hot nano_node needs to be synced with the network; the cold nano_node by definition should not be synced as it never connects to the internet . Cold Wallet Workflow The typical work flow for a cold wallet is as follows: (HOT) Gather account and transaction data. Transfer this data using an offline method (e.g. via USB stick) to the (COLD) secure offline computer. (COLD) Verify Head Block hash. (COLD) Generate and Sign new transaction data. Tranfer the signed transaction back to the (HOT) insecure online-computer. (HOT) Publish the signed transaction to the Nano Network. sequenceDiagram participant Network participant HOT participant COLD HOT->>Network: Get Data Network->>HOT: Data Response HOT-->>COLD: Offline Transfer COLD-->>COLD: Verify COLD-->>COLD: Generate & Sign COLD-->>HOT: Return Signed HOT->>Network: Publish Signed Note over COLD,HOT: Cold/Hot Wallet transfers are done<br />offline using USB Stick or similar. Private Key Management \u00b6 The process for external private key management in a cold wallet is very similar to external private key management for a hot wallet. The primary difference is that all signing commands (and thus information containing your private key) are isolated to a clean computer with no network connection. (HOT) Account Information \u00b6 Get account information by the account_info RPC Command: Request Example curl -d '{ \"action\": \"account_info\", \"representative\": \"true\", \"account\": \"nano_3qb1qckpady6njewfotrdrcgakrgbfh7ytqfrd9r8txsx7d91b9pu6z1ixrg\" }' http://127.0.0.1:7076 Success Response { \"frontier\" : \"DC8EC06D1F32F97BD69BF59E3297563BD23779F72176A4FF553CFF52309C337E\" , \"open_block\" : \"2E1F5AD4BD2C840FD9DC3929ECE9EE6D0B4A8C870E45EDA11048DE91EC409165\" , \"representative_block\" : \"DC8EC06D1F32F97BD69BF59E3297563BD23779F72176A4FF553CFF52309C337E\" , \"balance\" : \"8900000000000000000000000\" , \"modified_timestamp\" : \"1524812177\" , \"block_count\" : \"105\" , \"representative\" : \"nano_3rropjiqfxpmrrkooej4qtmm1pueu36f9ghinpho4esfdor8785a455d16nf\" } (HOT) Balance Validation (Part 1) \u00b6 We should always assume the (HOT) computer has been compromised, so cannot trust the balance returned by account_info . We must obtain the headblock's transaction data and independently confirm the block's hash on our (COLD) offline computer. On the (HOT) online computer, this information can be obtained by the block_info RPC Command. Request Format curl -d '{ \"action\": \"block_info\", \"hash\": \"{{HEADBLOCK}}\" }' http://127.0.0.1:7076 Request Example curl -d '{ \"action\": \"block_info\", \"hash\": \"DC8EC06D1F32F97BD69BF59E3297563BD23779F72176A4FF553CFF52309C337E\" }' http://127.0.0.1:7076 Success Response { \"block_account\" : \"nano_3qb1qckpady6njewfotrdrcgakrgbfh7ytqfrd9r8txsx7d91b9pu6z1ixrg\" , \"amount\" : \"100000000000000000000000\" , \"balance\" : \"8900000000000000000000000\" , \"height\" : \"105\" , \"local_timestamp\" : \"0\" , \"contents\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"nano_3qb1qckpady6njewfotrdrcgakrgbfh7ytqfrd9r8txsx7d91b9pu6z1ixrg\\\",\\n \\\"previous\\\": \\\"829C33C4E1F41F24F50AB6AF8D0893F484E7078F0FA05F8F56CB69223E8EEE77\\\",\\n \\\"representative\\\": \\\"nano_3rropjiqfxpmrrkooej4qtmm1pueu36f9ghinpho4esfdor8785a455d16nf\\\",\\n \\\"balance\\\": \\\"8900000000000000000000000\\\",\\n \\\"link\\\": \\\"616349D5A5EBA49A73324EF29044B65E13644EC182FFC1ACA4371F897EFF22AA\\\",\\n \\\"link_as_account\\\": \\\"nano_1rd5b9ctdtx6mbsm6mqkk34deqimej9e51qzr8pcafrzj7zhyaockuye93sk\\\",\\n \\\"signature\\\": \\\"5058A5A1D371CE367D88DB232D398B33DF15FF95D84206986848F4165FFD9FB009B99D9DC6E90D2A3D96C639C7772497C6D6FFB8A67143AE9BB07DC49EB72401\\\",\\n \\\"work\\\": \\\"5621a5a58ef8964a\\\"\\n }\\n\" } Info Below are a few important points to remember: Contents are returned as a stringified JSON object. The type of the block is \"state\" . This guide only covers on how to trustlessly process \"state\" blocks on an offline computer. Transfer the response over to the (COLD) computer. (COLD) Balance Validation (Part 2) \u00b6 On the (COLD) computer, we need to verify the block hash using the block_hash RPC Command.. This allows us to create a safe transaction referencing the reported head block's balance. Request Format curl -d '{ \"action\": \"block_hash\", \"block\": \"<CONTENTS>\" }' http://127.0.0.1:7076 Request Example curl -d '{ \"action\": \"block_hash\", \"block\": \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"nano_3qb1qckpady6njewfotrdrcgakrgbfh7ytqfrd9r8txsx7d91b9pu6z1ixrg\\\",\\n \\\"previous\\\": \\\"829C33C4E1F41F24F50AB6AF8D0893F484E7078F0FA05F8F56CB69223E8EEE77\\\",\\n \\\"representative\\\": \\\"nano_3rropjiqfxpmrrkooej4qtmm1pueu36f9ghinpho4esfdor8785a455d16nf\\\",\\n \\\"balance\\\": \\\"8900000000000000000000000\\\",\\n \\\"link\\\": \\\"616349D5A5EBA49A73324EF29044B65E13644EC182FFC1ACA4371F897EFF22AA\\\",\\n \\\"link_as_account\\\": \\\"nano_1rd5b9ctdtx6mbsm6mqkk34deqimej9e51qzr8pcafrzj7zhyaockuye93sk\\\",\\n \\\"signature\\\": \\\"5058A5A1D371CE367D88DB232D398B33DF15FF95D84206986848F4165FFD9FB009B99D9DC6E90D2A3D96C639C7772497C6D6FFB8A67143AE9BB07DC49EB72401\\\",\\n \\\"work\\\": \\\"5621a5a58ef8964a\\\"\\n }\\n\" }' http://127.0.0.1:7076 Success Response { \"hash\" : \"DC8EC06D1F32F97BD69BF59E3297563BD23779F72176A4FF553CFF52309C337E\" } Using the responded hash on the (COLD) computer guarentees that the transaction we are about to create on the (COLD) computer will have a safe, expected outcome. Important Lets consider the following scenarios where malicious software on the (HOT) computer modifies data: You are creating a send transaction. Malicious software alters the balance field of the head block to be lower than it actually is in an attempt to get you to send too much Nano to the destination address. This alters the block's hash, but the malicious software could report the honest headblock's hash. By independently computing the headblock's hash on the (COLD) computer, the generated transaction would be rejected by the network since the previous field references a non-existent block which is certainly not the headblock of your account. Use the responded hash for the previous field in your new transaction. When computing final account balance, compute it relative to the balance field of the headblock on the (COLD) computer. Complete the rest of the block creation as described in section External Private Key Management . Once the block is created and signed on the (COLD) computer, transfer the contents over to the (HOT) computer. From the (HOT) computer, run the process RPC command to broadcast the signed transaction to the network. Notifications \u00b6 WebSocket Support \u00b6 Available in Version 19.0+ only The Nano node offers notification of confirmed blocks over WebSockets. This offers higher throughput over the HTTP callback, and uses a single ingoing connection instead of an outgoing connection for every block. The HTTP callback is still available and both mechanisms can be used at the same time. Example A sample client is available at https://github.com/cryptocode/nano-websocket-sample-nodejs/blob/master/index.js Configuration For details on configuring websockets within a node, see the websocket section of Running a Node Configuration . With the above configuration, localhost clients should connect to ws://[::1]:7078 Subscribe and unsubscribe \u00b6 To subscribe to all confirmed blocks: { \"action\" : \"subscribe\" , \"topic\" : \"confirmation\" } To unsubscribe: { \"action\" : \"unsubscribe\" , \"topic\" : \"confirmation\" } Future versions may include account filtering and additional topics. Optional acknowledgement All WebSocket actions can request an acknowledgement. { \"action\" : \"subscribe\" , \"topic\" : \"confirmation\" , \"ack\" : true , \"id\" : \"<optional unique id>\" } If the subscription succeeds, the following message will be sent back (note that no message ordering is guaranteed): { \"ack\" : \"subscribe\" , \"time\" : \"1552766057328\" , \"id\" : \"<optional unique id>\" } Sample results \u00b6 Confirmation Differences from the HTTP callback The \"block\" contains JSON instead of an escaped string. This makes parsing easier. The JSON received by the client contains a topic, event time (milliseconds since epoch) and the message itself. Future versions of the node may offer more topics, as well as filtering capabilities. Subtype is part of block (if it's a state block) There is no \"is_send\" property since \"subtype\" signifies the intent for state blocks. { \"topic\" : \"confirmation\" , \"time\" : \"1552766057328\" , \"message\" : { \"account\" : \"nano_16c4ush661bbn2hxc6iqrunwoyqt95in4hmw6uw7tk37yfyi77s7dyxaw8ce\" , \"amount\" : \"1000000000000000000000000\" , \"hash\" : \"3E746498A3DBF5DF9CB498E00B8C9B20769112498E35EF23B3C0EF46DCF192EA\" , \"block\" : { \"type\" : \"state\" , \"subtype\" : \"send\" , \"account\" : \"nano_16c4ush661bbn2hxc6iqrunwoyqt95in4hmw6uw7tk37yfyi77s7dyxaw8ce\" , \"previous\" : \"21EE146C2EAD2CA30D84C43A5EEF4BCEC90F103E45905F254336E8CF591330D3\" , \"representative\" : \"nano_3dmtrrws3pocycmbqwawk6xs7446qxa36fcncush4s1pejk16ksbmakis32c\" , \"balance\" : \"135902000000000000000000000000\" , \"link\" : \"1942DE5E420129A193D51217C6E9CAFAFA38E1413E7C26F85D4825F37D029725\" , \"link_as_account\" : \"nano_16c4ush661bbn2hxc6iqrunwoyqt95in4hmw6uw7tk37yfyi77s7dyxaw8ce\" , \"signature\" : \"CD585FC15C50BC589B9C41C5D632B26E1C66744E97DCEDA878342E10D2C219CD7BCF5F49117F29E94B6B1C8D85794DACE2CAE14D6E6C944167E7F381368CD208\" , \"work\" : \"466ac84fc9edd4b3\" } } } Vote { \"topic\" : \"vote\" , \"time\" : \"1554995525343\" , \"message\" : { \"account\" : \"nano_1n5aisgwmq1oibg8c7aerrubboccp3mfcjgm8jaas1fwhxmcndaf4jrt75fy\" , \"signature\" : \"1950700796914893705657789944906107642480343124305202910152471520450456881722545967829502369630995363643731706156278026749554294222131169148120786048025353\" , \"sequence\" : \"855471574\" , \"blocks\" : [ \"6FB9DE5D7908DEB8A2EA391AEA95041587CBF3420EF8A606F1489FECEE75C869\" ] } } Optional filters \u00b6 Some topics support filters. Note that, if empty options are supplied (see examples below), an empty filter will be used and nothing will be broadcasted. Confirmation filters Filters for confirmation can be used to subscribe only to selected accounts. Once filters are given, blocks from accounts that do not match the options are not broadcasted. Note that legacy blocks are never broadcasted if filters are given, even if they match the accounts. { \"action\" : \"subscribe\" , \"topic\" : \"confirmation\" , \"options\" : { \"all_local_accounts\" : true , \"accounts\" : [ \"nano_16c4ush661bbn2hxc6iqrunwoyqt95in4hmw6uw7tk37yfyi77s7dyxaw8ce\" , \"nano_3dmtrrws3pocycmbqwawk6xs7446qxa36fcncush4s1pejk16ksbmakis32c\" ] } } When all_local_accounts is set to true , blocks that mention accounts in any wallet will be broadcasted. accounts is a list of additional accounts to subscribe to. Both prefixes are supported. Vote filters Filters for votes can be used to subscribe only to votes from selected representatives. Once filters are given, votes from representatives that do not match the options are not broadcasted. { \"action\" : \"subscribe\" , \"topic\" : \"vote\" , \"options\" : { \"representatives\" : [ \"nano_16c4ush661bbn2hxc6iqrunwoyqt95in4hmw6uw7tk37yfyi77s7dyxaw8ce\" , \"nano_3dmtrrws3pocycmbqwawk6xs7446qxa36fcncush4s1pejk16ksbmakis32c\" ] } } HTTP callback \u00b6 Send JSON POST requests with every confirmed block to callback server configured for the node. Configuration For details on configuring the HTTP callback within a node, see the HTTP callback section of Running a Node Configuration . Example Callback { \"account\" : \"nano_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\" , \"hash\" : \"B785D56473DE6330AC9A2071F19BD44BCAF1DE5C200A826B4BBCC85E588620FB\" , \"block\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"nano_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\\\",\\n \\\"previous\\\": \\\"82D68AE43E3E04CBBF9ED150999A347C2ABBE74B38D6E506C18DF7B1994E06C2\\\",\\n \\\"representative\\\": \\\"nano_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\\\",\\n \\\"balance\\\": \\\"5256159500000000000000000000000000000\\\",\\n \\\"link\\\": \\\"8B95FEB05496327471F4729F0B0919E1994F9116FD213F44C76F696B7ECD386A\\\",\\n \\\"link_as_account\\\": \\\"nano_34woztr7b7jkgjrzawnz3e6jmresbyajfzb39x4eguubffzetg5c96f3s16p\\\",\\n \\\"signature\\\": \\\"FBE5CC5491B54FE9CD8C48312A7A6D3945835FD97F4526571E9BED50E407A27ED8FB0E4AA0BF67E2831B8DB32A74E686A62BF4EC162E8FBB6E665196135C050B\\\",\\n \\\"work\\\": \\\"824ca671ce7067ac\\\"\\n }\\n\" , \"amount\" : \"2500000000000000000000000000000\" } Send state blocks have special fields \"is_send\" & \"subtype\" { \"account\" : \"nano_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\" , \"hash\" : \"82D68AE43E3E04CBBF9ED150999A347C2ABBE74B38D6E506C18DF7B1994E06C2\" , \"block\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"nano_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\\\",\\n \\\"previous\\\": \\\"BE716FE4E21E0DC923ED67543601090A17547474CBA6D6F4B3FD6C113775860F\\\",\\n \\\"representative\\\": \\\"nano_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\\\",\\n \\\"balance\\\": \\\"5256157000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"5D1AA8A45F8736519D707FCB375976A7F9AF795091021D7E9C7548D6F45DD8D5\\\",\\n \\\"link_as_account\\\": \\\"nano_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\",\\n \\\"signature\\\": \\\"5AF10D3DDD0E3D7A0EF18670560D194C35A519943150650BBBE0CBDB2A47A1E41817DA69112F996A9898E11F1D79EF51C041BD57C1686B81E7F9DFCCFFBAB000\\\",\\n \\\"work\\\": \\\"13ae0ea3e2af9004\\\"\\n }\\n\" , \"amount\" : \"90000000000000000000000000000000000\" , \"is_send\" : \"true\" , \"subtype\" : \"send\" } Warning It is recommended to fetch the block using the hash provided in the callback rather than trust this data is valid, and check that data instead, since a malicious 3 rd party can also make a fake callback request to your endpoint. Running Nano as a service \u00b6 There are 3 different ways to enable RPC for the node: In process rpc_enable = true rpc_in_process = true (default, V19.0+) Child process V19.0+ only rpc_enable = true rpc_path = [path to nano_rpc] rpc_in_process = false ipc . tcp . enable = true ipc . tcp . port = ipc_port of rpc_config.json Out of node process V19.0+ only rpc_enable = false rpc_path = [path to nano_rpc] rpc_in_process = false ipc . tcp . enable = true ipc . tcp . port == ipc_port of rpc_config.json The choice depends on the setup and security that you want. The easiest way is to use in_process : edit config.json & rpc_config.json (V19.0+) after first launch. ./nano_node --daemon sed -i 's/\"rpc_enable\": \"false\"/\"rpc_enable\": \"true\"/g' ~/Nano/config.json sed -i 's/\"enable_control\": \"false\"/\"enable_control\": \"true\"/g' ~/Nano/rpc_config.json Launch nano_node in test mode ./nano_node --daemon --network=test Check if RPC is enabled with curl (use different terminal or session) curl -g -d '{ \"action\": \"block_count\" }' '[::1]:7076' To stop node, use curl -g -d '{ \"action\": \"stop\" }' '[::1]:7076' Launch nano_node as a service with systemd sudo touch /etc/systemd/system/nano_node.service sudo chmod 664 /etc/systemd/system/nano_node.service sudo nano /etc/systemd/system/nano_node.service Paste your specific user, group, path settings (example) [Unit] Description=Nano node service After=network.target [Service] ExecStart=/path_to_nano_node/nano_node --daemon Restart=on-failure User=username Group=groupname [Install] WantedBy=multi-user.target Start nano_node service sudo service nano_node start Enable at startup sudo systemctl enable nano_node Tip To manage node, use RPC commands or CLI Known issues \u00b6 Error initiating bootstrap ... Too many open files Increase max open files limit. Edit /etc/security/limits.conf & add * soft nofile 65535 * hard nofile 65535 root soft nofile 65535 root hard nofile 65535 Then restart session & nano_node service. Check changes with ulimit -n IPC Integration \u00b6 As of v18, the Nano node exposes a low level IPC interface over which multiple future APIs can be marshalled. Currently, the IPC interface supports the legacy RPC JSON format. The HTTP based RPC server is still available. Transports \u00b6 TCP and unix domain sockets are supported. Named pipes and shared memory may be supported in future releases. IPC clients \u00b6 A demo web server written in Go is available at https://github.com/nanocurrency/rpc-go . This allows HTTP clients to make JSON requests via IPC, which is compatible with the existing format. The web server can communicate with a node over domain sockets or TCP. A NodeJS client is available at https://github.com/meltingice/nano-ipc-js A Python client is being developed at https://github.com/guilhermelawless/nano-ipc-py Configuration \u00b6 For details on configuring IPC within a node, see the IPC section of Running a Node Configuration . IPC request/response format \u00b6 A client must make requests using the following framing format: REQUEST ::= HEADER PAYLOAD HEADER ::= u8('N') ENCODING u8(0) u8(0) ENCODING ::= u8(1) PAYLOAD ::= <encoding specific> Only one encoding currently exists: 1 (legacy RPC) The encoding is followed by two reserved zero-bytes. These allow for future extensions, such as versioning and extended headers. Note that the framing format does not include a length field - this is optionally placed in the respective payloads. The reason is that some encodings might want to be \"streamy\", sending responses in chunks, or end with a sentinel. LEGACY_RPC_PAYLOAD ::= be32(length) JSON request LEGACY_RPC_RESPONSE ::= be32(length) JSON response In short, JSON requests and responses are 32-bit big-endian length-prefixed.","title":"Advanced"},{"location":"integration-guides/advanced/#cold-wallets","text":"When security of funds is critical, it is a best practice to split your balance between multiple wallets: One or more hot wallets to handle daily user deposits/withdraws. One or more cold wallets to securely store Nano in an offline environment. Important A cold wallet manages private keys that have never been on a network-enabled computer. This guide extends the concepts covered in External Private Key Management . It is advised that you read that section before continuing. Note Operations done on the hot, online, insecure computer will be prefaced with (HOT) . Operations done on the cold, offline, secure computer will be prefaced with (COLD) . Both the hot and cold computers need to have the nano_node software installed. The hot nano_node needs to be synced with the network; the cold nano_node by definition should not be synced as it never connects to the internet . Cold Wallet Workflow The typical work flow for a cold wallet is as follows: (HOT) Gather account and transaction data. Transfer this data using an offline method (e.g. via USB stick) to the (COLD) secure offline computer. (COLD) Verify Head Block hash. (COLD) Generate and Sign new transaction data. Tranfer the signed transaction back to the (HOT) insecure online-computer. (HOT) Publish the signed transaction to the Nano Network. sequenceDiagram participant Network participant HOT participant COLD HOT->>Network: Get Data Network->>HOT: Data Response HOT-->>COLD: Offline Transfer COLD-->>COLD: Verify COLD-->>COLD: Generate & Sign COLD-->>HOT: Return Signed HOT->>Network: Publish Signed Note over COLD,HOT: Cold/Hot Wallet transfers are done<br />offline using USB Stick or similar.","title":"Cold Wallets"},{"location":"integration-guides/advanced/#private-key-management","text":"The process for external private key management in a cold wallet is very similar to external private key management for a hot wallet. The primary difference is that all signing commands (and thus information containing your private key) are isolated to a clean computer with no network connection.","title":"Private Key Management"},{"location":"integration-guides/advanced/#hot-account-information","text":"Get account information by the account_info RPC Command:","title":"(HOT) Account Information"},{"location":"integration-guides/advanced/#hot-balance-validation-part-1","text":"We should always assume the (HOT) computer has been compromised, so cannot trust the balance returned by account_info . We must obtain the headblock's transaction data and independently confirm the block's hash on our (COLD) offline computer. On the (HOT) online computer, this information can be obtained by the block_info RPC Command.","title":"(HOT) Balance Validation (Part 1)"},{"location":"integration-guides/advanced/#cold-balance-validation-part-2","text":"On the (COLD) computer, we need to verify the block hash using the block_hash RPC Command.. This allows us to create a safe transaction referencing the reported head block's balance.","title":"(COLD) Balance Validation (Part 2)"},{"location":"integration-guides/advanced/#notifications","text":"","title":"Notifications"},{"location":"integration-guides/advanced/#websocket-support","text":"Available in Version 19.0+ only The Nano node offers notification of confirmed blocks over WebSockets. This offers higher throughput over the HTTP callback, and uses a single ingoing connection instead of an outgoing connection for every block. The HTTP callback is still available and both mechanisms can be used at the same time. Example A sample client is available at https://github.com/cryptocode/nano-websocket-sample-nodejs/blob/master/index.js Configuration For details on configuring websockets within a node, see the websocket section of Running a Node Configuration . With the above configuration, localhost clients should connect to ws://[::1]:7078","title":"WebSocket Support"},{"location":"integration-guides/advanced/#subscribe-and-unsubscribe","text":"To subscribe to all confirmed blocks: { \"action\" : \"subscribe\" , \"topic\" : \"confirmation\" } To unsubscribe: { \"action\" : \"unsubscribe\" , \"topic\" : \"confirmation\" } Future versions may include account filtering and additional topics. Optional acknowledgement All WebSocket actions can request an acknowledgement. { \"action\" : \"subscribe\" , \"topic\" : \"confirmation\" , \"ack\" : true , \"id\" : \"<optional unique id>\" } If the subscription succeeds, the following message will be sent back (note that no message ordering is guaranteed): { \"ack\" : \"subscribe\" , \"time\" : \"1552766057328\" , \"id\" : \"<optional unique id>\" }","title":"Subscribe and unsubscribe"},{"location":"integration-guides/advanced/#sample-results","text":"Confirmation Differences from the HTTP callback The \"block\" contains JSON instead of an escaped string. This makes parsing easier. The JSON received by the client contains a topic, event time (milliseconds since epoch) and the message itself. Future versions of the node may offer more topics, as well as filtering capabilities. Subtype is part of block (if it's a state block) There is no \"is_send\" property since \"subtype\" signifies the intent for state blocks. { \"topic\" : \"confirmation\" , \"time\" : \"1552766057328\" , \"message\" : { \"account\" : \"nano_16c4ush661bbn2hxc6iqrunwoyqt95in4hmw6uw7tk37yfyi77s7dyxaw8ce\" , \"amount\" : \"1000000000000000000000000\" , \"hash\" : \"3E746498A3DBF5DF9CB498E00B8C9B20769112498E35EF23B3C0EF46DCF192EA\" , \"block\" : { \"type\" : \"state\" , \"subtype\" : \"send\" , \"account\" : \"nano_16c4ush661bbn2hxc6iqrunwoyqt95in4hmw6uw7tk37yfyi77s7dyxaw8ce\" , \"previous\" : \"21EE146C2EAD2CA30D84C43A5EEF4BCEC90F103E45905F254336E8CF591330D3\" , \"representative\" : \"nano_3dmtrrws3pocycmbqwawk6xs7446qxa36fcncush4s1pejk16ksbmakis32c\" , \"balance\" : \"135902000000000000000000000000\" , \"link\" : \"1942DE5E420129A193D51217C6E9CAFAFA38E1413E7C26F85D4825F37D029725\" , \"link_as_account\" : \"nano_16c4ush661bbn2hxc6iqrunwoyqt95in4hmw6uw7tk37yfyi77s7dyxaw8ce\" , \"signature\" : \"CD585FC15C50BC589B9C41C5D632B26E1C66744E97DCEDA878342E10D2C219CD7BCF5F49117F29E94B6B1C8D85794DACE2CAE14D6E6C944167E7F381368CD208\" , \"work\" : \"466ac84fc9edd4b3\" } } } Vote { \"topic\" : \"vote\" , \"time\" : \"1554995525343\" , \"message\" : { \"account\" : \"nano_1n5aisgwmq1oibg8c7aerrubboccp3mfcjgm8jaas1fwhxmcndaf4jrt75fy\" , \"signature\" : \"1950700796914893705657789944906107642480343124305202910152471520450456881722545967829502369630995363643731706156278026749554294222131169148120786048025353\" , \"sequence\" : \"855471574\" , \"blocks\" : [ \"6FB9DE5D7908DEB8A2EA391AEA95041587CBF3420EF8A606F1489FECEE75C869\" ] } }","title":"Sample results"},{"location":"integration-guides/advanced/#optional-filters","text":"Some topics support filters. Note that, if empty options are supplied (see examples below), an empty filter will be used and nothing will be broadcasted. Confirmation filters Filters for confirmation can be used to subscribe only to selected accounts. Once filters are given, blocks from accounts that do not match the options are not broadcasted. Note that legacy blocks are never broadcasted if filters are given, even if they match the accounts. { \"action\" : \"subscribe\" , \"topic\" : \"confirmation\" , \"options\" : { \"all_local_accounts\" : true , \"accounts\" : [ \"nano_16c4ush661bbn2hxc6iqrunwoyqt95in4hmw6uw7tk37yfyi77s7dyxaw8ce\" , \"nano_3dmtrrws3pocycmbqwawk6xs7446qxa36fcncush4s1pejk16ksbmakis32c\" ] } } When all_local_accounts is set to true , blocks that mention accounts in any wallet will be broadcasted. accounts is a list of additional accounts to subscribe to. Both prefixes are supported. Vote filters Filters for votes can be used to subscribe only to votes from selected representatives. Once filters are given, votes from representatives that do not match the options are not broadcasted. { \"action\" : \"subscribe\" , \"topic\" : \"vote\" , \"options\" : { \"representatives\" : [ \"nano_16c4ush661bbn2hxc6iqrunwoyqt95in4hmw6uw7tk37yfyi77s7dyxaw8ce\" , \"nano_3dmtrrws3pocycmbqwawk6xs7446qxa36fcncush4s1pejk16ksbmakis32c\" ] } }","title":"Optional filters"},{"location":"integration-guides/advanced/#http-callback","text":"Send JSON POST requests with every confirmed block to callback server configured for the node. Configuration For details on configuring the HTTP callback within a node, see the HTTP callback section of Running a Node Configuration . Example Callback { \"account\" : \"nano_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\" , \"hash\" : \"B785D56473DE6330AC9A2071F19BD44BCAF1DE5C200A826B4BBCC85E588620FB\" , \"block\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"nano_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\\\",\\n \\\"previous\\\": \\\"82D68AE43E3E04CBBF9ED150999A347C2ABBE74B38D6E506C18DF7B1994E06C2\\\",\\n \\\"representative\\\": \\\"nano_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\\\",\\n \\\"balance\\\": \\\"5256159500000000000000000000000000000\\\",\\n \\\"link\\\": \\\"8B95FEB05496327471F4729F0B0919E1994F9116FD213F44C76F696B7ECD386A\\\",\\n \\\"link_as_account\\\": \\\"nano_34woztr7b7jkgjrzawnz3e6jmresbyajfzb39x4eguubffzetg5c96f3s16p\\\",\\n \\\"signature\\\": \\\"FBE5CC5491B54FE9CD8C48312A7A6D3945835FD97F4526571E9BED50E407A27ED8FB0E4AA0BF67E2831B8DB32A74E686A62BF4EC162E8FBB6E665196135C050B\\\",\\n \\\"work\\\": \\\"824ca671ce7067ac\\\"\\n }\\n\" , \"amount\" : \"2500000000000000000000000000000\" } Send state blocks have special fields \"is_send\" & \"subtype\" { \"account\" : \"nano_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\" , \"hash\" : \"82D68AE43E3E04CBBF9ED150999A347C2ABBE74B38D6E506C18DF7B1994E06C2\" , \"block\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"nano_1ipx847tk8o46pwxt5qjdbncjqcbwcc1rrmqnkztrfjy5k7z4imsrata9est\\\",\\n \\\"previous\\\": \\\"BE716FE4E21E0DC923ED67543601090A17547474CBA6D6F4B3FD6C113775860F\\\",\\n \\\"representative\\\": \\\"nano_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\\\",\\n \\\"balance\\\": \\\"5256157000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"5D1AA8A45F8736519D707FCB375976A7F9AF795091021D7E9C7548D6F45DD8D5\\\",\\n \\\"link_as_account\\\": \\\"nano_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\\\",\\n \\\"signature\\\": \\\"5AF10D3DDD0E3D7A0EF18670560D194C35A519943150650BBBE0CBDB2A47A1E41817DA69112F996A9898E11F1D79EF51C041BD57C1686B81E7F9DFCCFFBAB000\\\",\\n \\\"work\\\": \\\"13ae0ea3e2af9004\\\"\\n }\\n\" , \"amount\" : \"90000000000000000000000000000000000\" , \"is_send\" : \"true\" , \"subtype\" : \"send\" } Warning It is recommended to fetch the block using the hash provided in the callback rather than trust this data is valid, and check that data instead, since a malicious 3 rd party can also make a fake callback request to your endpoint.","title":"HTTP callback"},{"location":"integration-guides/advanced/#running-nano-as-a-service","text":"There are 3 different ways to enable RPC for the node: In process rpc_enable = true rpc_in_process = true (default, V19.0+) Child process V19.0+ only rpc_enable = true rpc_path = [path to nano_rpc] rpc_in_process = false ipc . tcp . enable = true ipc . tcp . port = ipc_port of rpc_config.json Out of node process V19.0+ only rpc_enable = false rpc_path = [path to nano_rpc] rpc_in_process = false ipc . tcp . enable = true ipc . tcp . port == ipc_port of rpc_config.json The choice depends on the setup and security that you want. The easiest way is to use in_process : edit config.json & rpc_config.json (V19.0+) after first launch. ./nano_node --daemon sed -i 's/\"rpc_enable\": \"false\"/\"rpc_enable\": \"true\"/g' ~/Nano/config.json sed -i 's/\"enable_control\": \"false\"/\"enable_control\": \"true\"/g' ~/Nano/rpc_config.json Launch nano_node in test mode ./nano_node --daemon --network=test Check if RPC is enabled with curl (use different terminal or session) curl -g -d '{ \"action\": \"block_count\" }' '[::1]:7076' To stop node, use curl -g -d '{ \"action\": \"stop\" }' '[::1]:7076' Launch nano_node as a service with systemd sudo touch /etc/systemd/system/nano_node.service sudo chmod 664 /etc/systemd/system/nano_node.service sudo nano /etc/systemd/system/nano_node.service Paste your specific user, group, path settings (example) [Unit] Description=Nano node service After=network.target [Service] ExecStart=/path_to_nano_node/nano_node --daemon Restart=on-failure User=username Group=groupname [Install] WantedBy=multi-user.target Start nano_node service sudo service nano_node start Enable at startup sudo systemctl enable nano_node Tip To manage node, use RPC commands or CLI","title":"Running Nano as a service"},{"location":"integration-guides/advanced/#known-issues","text":"Error initiating bootstrap ... Too many open files Increase max open files limit. Edit /etc/security/limits.conf & add * soft nofile 65535 * hard nofile 65535 root soft nofile 65535 root hard nofile 65535 Then restart session & nano_node service. Check changes with ulimit -n","title":"Known issues"},{"location":"integration-guides/advanced/#ipc-integration","text":"As of v18, the Nano node exposes a low level IPC interface over which multiple future APIs can be marshalled. Currently, the IPC interface supports the legacy RPC JSON format. The HTTP based RPC server is still available.","title":"IPC Integration"},{"location":"integration-guides/advanced/#transports","text":"TCP and unix domain sockets are supported. Named pipes and shared memory may be supported in future releases.","title":"Transports"},{"location":"integration-guides/advanced/#ipc-clients","text":"A demo web server written in Go is available at https://github.com/nanocurrency/rpc-go . This allows HTTP clients to make JSON requests via IPC, which is compatible with the existing format. The web server can communicate with a node over domain sockets or TCP. A NodeJS client is available at https://github.com/meltingice/nano-ipc-js A Python client is being developed at https://github.com/guilhermelawless/nano-ipc-py","title":"IPC clients"},{"location":"integration-guides/advanced/#configuration","text":"For details on configuring IPC within a node, see the IPC section of Running a Node Configuration .","title":"Configuration"},{"location":"integration-guides/advanced/#ipc-requestresponse-format","text":"A client must make requests using the following framing format: REQUEST ::= HEADER PAYLOAD HEADER ::= u8('N') ENCODING u8(0) u8(0) ENCODING ::= u8(1) PAYLOAD ::= <encoding specific> Only one encoding currently exists: 1 (legacy RPC) The encoding is followed by two reserved zero-bytes. These allow for future extensions, such as versioning and extended headers. Note that the framing format does not include a length field - this is optionally placed in the respective payloads. The reason is that some encodings might want to be \"streamy\", sending responses in chunks, or end with a sentinel. LEGACY_RPC_PAYLOAD ::= be32(length) JSON request LEGACY_RPC_RESPONSE ::= be32(length) JSON response In short, JSON requests and responses are 32-bit big-endian length-prefixed.","title":"IPC request/response format"},{"location":"integration-guides/build-options/","text":"Only Official Builds Supported The fastest and most recommended method of installation is through Docker management Only official release builds are recommended and supported for use on the main network Builds created from git should be done using the available tags - building from branches is not recommended, including building off the master branch as that is used during development of features Official release builds \u00b6 OS Binaries Each release cycle official builds of the node for Linux, MacOS and Windows are generated and linked to from the related GitHub Release as well as on Nano.org . Other sources The node can be also be installed from other sources including Docker and RHEL/CentOS rpm: sudo yum-config-manager --add-repo https://repo.nano.org/nanocurrency.repo sudo yum install nanocurrency This installs nano_node to bin. Beta builds \u00b6 OS Binaries Each beta release cycle official beta builds of the node for Linux, MacOS and Windows are released and can be found at https://beta.nano.org . Go to the Beta Network page for more details. Other sources The beta node can be also be installed from other sources including Docker and RHEL/CentOS rpm: sudo yum-config-manager --add-repo https://repo.nano.org/nanocurrency-beta.repo sudo yum install nanocurrency-beta This installs nano_node-beta to bin. Nano Folder \u00b6 Contents \u00b6 The Nano folder contains: wallets file (wallets.ldb), log files , ledger file (data.ldb), config file ( config.json ) and related lock files. Locations \u00b6 OS Location Windows C: \\U sers \\< user> \\A ppData \\L ocal \\N ano \\ OSX /Users/<user>/Library/Nano/ Linux /home/<user>/Nano/ Moving folder locations Some users desire to change the blockchain download location. A solution is available for the no gui nano_node (see https://github.com/nanocurrency/nano-node/issues/79 ), but no concrete solution is available for the GUI client. However, a workaround can be acheived via the use of symbolic links. Below is a short tutorial for Windows builds: Rename/delete the Nano folder in your appdata Local folder (if you haven't run the wallet yet, skip this step). This is necessary because the command to create a symbolic link in windows will fail if the the input directory already exists. Decide on where you want to store the blockchain and create a symbolic link. The command is (in an administrative command-prompt): mklink /d \"C:\\Users\\<user>\\AppData\\Local\\Nano\\\" \"E:\\Some\\Other\\Directory\" . This command creates a symbolic link for a directory ( /d ) that 'redirects' all requests for files/directories in the Local\\Nano folder to the Other\\Directory . This means that a file created in the input directory will actually be in the output directory (on the other disk). Verify it works. Create a file in your Nano folder in your appdata, and you should see it appear in the directory you linked it to (and vice-versa). If you have old wallets or a partially-downloaded blockchain, copy them back into the local directory. Start the wallet. Build Instructions - Ubuntu \u00b6 Unsupported configuration This documentation is intended only for developers of the Nano Node software, and will not result in a supported configuration. End-users are advised to use releases. The fastest and most recommended method of installation is through Docker . Running node as a service . To manage a node, use RPC commands or the CLI . Node \u00b6 Install boost library apt-get update apt-get install libboost-all-dev (Optional) Build and Install boost v1.66 instead (Ubuntu repo has v1.58) Install required dependencies: sudo apt install g++ git cmake -y wget https://dl.bintray.com/boostorg/release/1.66.0/source/boost_1_66_0.tar.bz2 tar --bzip2 -xf boost_1_66_0.tar.bz2 cd boost_1_66_0 ./bootstrap.sh sudo ./b2 install Download and extract nano node cd ~ wget https://github.com/nanocurrency/nano-node/releases/download/V11.2/nano-11.2.0-Linux.tar.bz2 tar xvf nano-11.2.0-Linux.tar.bz2 Initiate nano_node to generate ~/Nano ./nano-node-11.2.0-Linux/bin/nano_node --daemon Press ctrl+c to kill process Update config.json nano ~/Nano/config.json Change: \"rpc_enable\": \"true\" Save and quit Find path and user of nano_node binary cd ~/nano-node-11.2.0-Linux/bin/ pwd -P This should output something similar to: /home/stanley/nano-node-11.2.0-Linux/bin Write down this path for our service file in a future step ls -l This should output something similar to: -rwxr-xr-x 1 stanley stanley 8.9M Feb 16 02:25 nano_node Write down the user and group (in this example, both the user and group is stanley) to the left of nano_node, this should be the same as your username Create service file sudo touch /etc/systemd/system/nano_node.service sudo chmod 664 /etc/systemd/system/nano_node.service sudo nano /etc/systemd/system/nano_node.service Service file [Unit] Description=Nano node service After=network.target [Service] ExecStart=/home/stanley/nano-node-11.2.0-Linux/bin/nano_node --daemon #Update this with the link copied from the last step Restart=on-failure User=stanley #This user from the last step Group=stanley #The group from the last step [Install] WantedBy=multi-user.target Be sure to remove the comments (the parts starting at #) as they may cause problems. Start the service sudo service nano_node start Enable the node to run on boot sudo systemctl enable nano_node Create a symlink to nano_node to easily access later ln -s ~/nano-node-11.2.0-Linux/bin/nano_node /usr/local/sbin/nano_node You should now have a brand new node up and running, and the blocks syncing. Check Status nano_node --debug_block_count This will show you how far along the node is to syncing the blocks. You can compare this to the current block count from Aggregate Network Stats at https://nanocrawler.cc/network to see how far along the syncing process your are. QT Wallet \u00b6 Install dependencies sudo apt-get update && sudo apt-get upgrade sudo apt-get install git cmake g++ curl wget Build Boost 1.67.0 wget -O boost_1_67_0.tar.gz https://netix.dl.sourceforge.net/project/boost/boost/1.67.0/boost_1_67_0.tar.gz tar xzvf boost_1_67_0.tar.gz cd boost_1_67_0 ./bootstrap.sh --with-libraries=filesystem,log,program_options,thread ./b2 --prefix=../[boost] link=static install cd .. Install QT5 sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler Build nano_wallet git clone --recursive https://github.com/nanocurrency/nano-node.git nano_build cd nano_build git submodule update --init --recursive cmake -G \"Unix Makefiles\" -DNANO_GUI=ON -DBOOST_ROOT=../[boost]/ make nano_wallet cp nano_wallet ../nano_wallet && cd .. Run nano_wallet ./nano_wallet Troubleshooting \u00b6 This application failed to start because it could not find or load the Qt platform plugin \"xcb\".** If you get this error, make sure you have QT5 installed. If it's installed, locate the file 'libqxcb.so' on your system and then tell nano_wallet where this file can be found (set it to the 'plugins' directory). locate libqxcb.so # returns /usr/lib/qt/plugins/platforms/libqxcb.so or something similar export QT_PLUGIN_PATH=/usr/lib/qt/plugins nano_wallet If you don't want to run this each time you can setup an alias to do this for you: echo 'alias nano_wallet=\"QT_PLUGIN_PATH=/usr/lib/qt/plugins nano_wallet\"' >> ~/.bashrc source ~/.bashrc Error starting nano exception while running wallet: No such node (Wallet)** If you get this error, it might be related to pre-existing configuration file issues on your system. You can try the following to generate a fresh configuration (your existing/older configuration will be under ~/Nano.old). Please be careful with the following if you already run a wallet, as these details will be forgotten by the nano_wallet due to starting with a fresh configuration: mv ~/Nano{,.old} nano_wallet Wallet crashes with an Aborted (core dumped) error** This may be related to a display issue. Try setting the environment variable GDK_BACKEND=x11 before running nano_wallet. GDK_BACKEND=x11 ./nano_wallet Build Instructions - General \u00b6 Unsupported configuration This documentation is intended only for developers of the Nano Node software, and will not result in a supported configuration. End-users are advised to use releases. The fastest and most recommended method of installation is through Docker . Running node as a service . To manage a node, use RPC commands or the CLI . Requirements Required Source Boost 1.67 extracted to [boost.src] (OR sh nano-node/util/build_prep/bootstrap_boost.sh -m ) (wallet) Qt 5.x open source edition extracted to [qt.src] Nano node source in [nano-node.src] Required build tools (macOS) XCode >= 7.3 (Windows) Visual Studio 2015 (Windows) NSIS package builder (*nix) Clang >= 3.5 or GCC >= 5 CMake Boost \u00b6 Option 1 Inside nano-node directory run: sh util/build_prep/bootstrap_boost.sh -m This will build the required Boost libraries at /usr/local/boost/ . Option 2 Inside [boost.src] run: ./bootstrap.sh --with-libraries = filesystem,log,program_options,thread ./b2 --prefix =[ boost ] --build-dir =[ boost.build ] link = static install If on Windows: an additional b2 option address-model=64 for x64 builds should be included. QT Wallet \u00b6 In [qt.build] execute: [ qt.src ] /configure -shared -opensource -nomake examples -nomake tests -confirm-license -prefix [ qt ] make make install If on Windows: use nmake instead of make . Node \u00b6 CMake variables Format: cmake -D VARNAME=VARVALUE BOOST_ROOT=\\[boost\\] ( /usr/local/boost/ if bootstrapped) CMAKE_BUILD_TYPE=Release (default) ACTIVE_NETWORK=nano_live_network (default) Qt5_DIR=[qt]lib/cmake/Qt5 (to build GUI wallet) NANO_GUI=ON (to build GUI wallet) ENABLE_AVX2=ON , optional PERMUTE_WITH_GATHER=ON , optional PERMUTE_WITH_SHUFFLES=ON (for CPU with AXV2 support, choose fastest method for your CPU with https://github.com/sneves/blake2-avx2/ ) CRYPTOPP_CUSTOM=ON (more conservative building of Crypto++ for wider range of systems) NANO_SIMD_OPTIMIZATIONS=OFF (Enable CPU-specific SIMD optimization: SSE/AVX or NEON, e.g.) NANO_SECURE_RPC=ON (to build node with TLS) Build Node git submodule update --init --recursive Generate with cmake then build with your compiler (*nix) to build node without GUI execute: make nano_node (*nix) to build wallet with GUI execute: make nano_wallet Building a package (macOS) cpack -G \"DragNDrop\" (Windows) cpack -G \"NSIS\" (*nix) cpack -G \"TBZ2\" Testing Nano In order to run the tests, the corresponding CMake variable must be set: -D NANO_TEST=ON . With this variable set, make will also build test files, and will produce core_test and slow_test binaries, which can be executed like ./core_test . To run a node on the test network, set CMake variable: -DACTIVE_NETWORK=nano_test_network Beta Network Participation More information can be found on the Beta Network page To run a node on the beta network, set CMake variable: -DACTIVE_NETWORK=nano_beta_network Build Instructions - ARM \u00b6 These instructions are for creating an ArchlinuxARM 64bit build. Unsupported configuration This documentation is intended only for developers of the Nano Node software, and will not result in a supported configuration. End-users are advised to use releases. The fastest and most recommended method of installation is through Docker . Running node as a service . To manage a node, use RPC commands or the CLI . Dependencies \u00b6 pacman -Syu pacman -S base-devel git gcc cmake curl wget Static Boost \u00b6 wget -O boost_1_67_0.tar.gz http://sourceforge.net/projects/boost/files/boost/1.67.0/boost_1_67_0.tar.gz/download tar xzvf boost_1_67_0.tar.gz cd boost_1_67_0 ./bootstrap.sh ./b2 --prefix = ../ [ boost ] link = static install cd .. Node \u00b6 git clone --recursive https://github.com/nanocurrency/nano-node.git nano_build cd nano_build cmake -DBOOST_ROOT = ../ [ boost ] -G \"Unix Makefiles\" make nano_node cp nano_node ../nano_node && cd .. && ./nano_node --diagnostics Build Instructions - Unix \u00b6 These instructions are for creating a build on the following systems: Ubuntu 16.04 LTS Server Ubuntu 16.10+ Debian 8 Jessie (Debian 8 requires Cmake 3.4+) Debian 9 Stretch See further below for CentOS 7 and OSX . Unsupported configuration This documentation is intended only for developers of the Nano Node software, and will not result in a supported configuration. End-users are advised to use releases. The fastest and most recommended method of installation is through Docker . Running node as a service . To manage a node, use RPC commands or the CLI . Dependencies \u00b6 sudo apt-get update && sudo apt-get upgrade sudo apt-get install git cmake g++ curl wget Static Boost \u00b6 wget -O boost_1_67_0.tar.gz https://netix.dl.sourceforge.net/project/boost/boost/1.67.0/boost_1_67_0.tar.gz tar xzvf boost_1_67_0.tar.gz cd boost_1_67_0 ./bootstrap.sh --with-libraries = filesystem,log,program_options,system,thread ./b2 --prefix = ../ [ boost ] link = static install cd .. Node \u00b6 git clone --recursive https://github.com/nanocurrency/nano-node.git nano_build cd nano_build cmake -DBOOST_ROOT = ../ [ boost ] / -G \"Unix Makefiles\" make nano_node cp nano_node ../nano_node && cd .. && ./nano_node --diagnostics Build Instructions - CentOS 7 \u00b6 Requirements GCC compiler version 4.9+ or other compiler with C++14 language support (default Centos 7 compilers are outdated) Cmake 3.4+ Dependencies \u00b6 sudo yum check-update sudo yum install git libstdc++-static curl wget Configure repository with modern GCC \u00b6 sudo yum install centos-release-scl sudo yum install devtoolset-7-gcc* scl enable devtoolset-7 bash Modern Cmake \u00b6 wget https://cmake.org/files/v3.12/cmake-3.12.1.tar.gz tar zxvf cmake-3.12.1.tar.gz && cd cmake-3.12.1 ./bootstrap --prefix = /usr/local make -j $( nproc ) sudo make install cd .. Static Boost \u00b6 wget -O boost_1_67_0.tar.gz https://netix.dl.sourceforge.net/project/boost/boost/1.67.0/boost_1_67_0.tar.gz tar xzvf boost_1_67_0.tar.gz && cd boost_1_67_0 ./bootstrap.sh --with-libraries = filesystem,log,program_options,system,thread ./b2 --prefix = ../ [ boost ] link = static install cd .. Node \u00b6 git clone --recursive https://github.com/nanocurrency/nano-node.git nano_build cd nano_build cmake -DBOOST_ROOT = ../ [ boost ] / -G \"Unix Makefiles\" make nano_node cp nano_node .. && cd .. && ./nano_node --diagnostics Build Instructions - OSX \u00b6 git clone https://github.com/nanocurrency/nano-node.git cd nano-node sh util/build_prep/bootstrap_boost.sh -m git submodule update --init --recursive cmake -DBOOST_ROOT=../[boost]/ -G \"Unix Makefiles\" make ./nano_node/nano_node --daemon","title":"Build Options"},{"location":"integration-guides/build-options/#official-release-builds","text":"OS Binaries Each release cycle official builds of the node for Linux, MacOS and Windows are generated and linked to from the related GitHub Release as well as on Nano.org . Other sources The node can be also be installed from other sources including Docker and RHEL/CentOS rpm: sudo yum-config-manager --add-repo https://repo.nano.org/nanocurrency.repo sudo yum install nanocurrency This installs nano_node to bin.","title":"Official release builds"},{"location":"integration-guides/build-options/#beta-builds","text":"OS Binaries Each beta release cycle official beta builds of the node for Linux, MacOS and Windows are released and can be found at https://beta.nano.org . Go to the Beta Network page for more details. Other sources The beta node can be also be installed from other sources including Docker and RHEL/CentOS rpm: sudo yum-config-manager --add-repo https://repo.nano.org/nanocurrency-beta.repo sudo yum install nanocurrency-beta This installs nano_node-beta to bin.","title":"Beta builds"},{"location":"integration-guides/build-options/#nano-folder","text":"","title":"Nano Folder"},{"location":"integration-guides/build-options/#contents","text":"The Nano folder contains: wallets file (wallets.ldb), log files , ledger file (data.ldb), config file ( config.json ) and related lock files.","title":"Contents"},{"location":"integration-guides/build-options/#locations","text":"OS Location Windows C: \\U sers \\< user> \\A ppData \\L ocal \\N ano \\ OSX /Users/<user>/Library/Nano/ Linux /home/<user>/Nano/ Moving folder locations Some users desire to change the blockchain download location. A solution is available for the no gui nano_node (see https://github.com/nanocurrency/nano-node/issues/79 ), but no concrete solution is available for the GUI client. However, a workaround can be acheived via the use of symbolic links. Below is a short tutorial for Windows builds: Rename/delete the Nano folder in your appdata Local folder (if you haven't run the wallet yet, skip this step). This is necessary because the command to create a symbolic link in windows will fail if the the input directory already exists. Decide on where you want to store the blockchain and create a symbolic link. The command is (in an administrative command-prompt): mklink /d \"C:\\Users\\<user>\\AppData\\Local\\Nano\\\" \"E:\\Some\\Other\\Directory\" . This command creates a symbolic link for a directory ( /d ) that 'redirects' all requests for files/directories in the Local\\Nano folder to the Other\\Directory . This means that a file created in the input directory will actually be in the output directory (on the other disk). Verify it works. Create a file in your Nano folder in your appdata, and you should see it appear in the directory you linked it to (and vice-versa). If you have old wallets or a partially-downloaded blockchain, copy them back into the local directory. Start the wallet.","title":"Locations"},{"location":"integration-guides/build-options/#build-instructions-ubuntu","text":"Unsupported configuration This documentation is intended only for developers of the Nano Node software, and will not result in a supported configuration. End-users are advised to use releases. The fastest and most recommended method of installation is through Docker . Running node as a service . To manage a node, use RPC commands or the CLI .","title":"Build Instructions - Ubuntu"},{"location":"integration-guides/build-options/#node","text":"Install boost library apt-get update apt-get install libboost-all-dev (Optional) Build and Install boost v1.66 instead (Ubuntu repo has v1.58) Install required dependencies: sudo apt install g++ git cmake -y wget https://dl.bintray.com/boostorg/release/1.66.0/source/boost_1_66_0.tar.bz2 tar --bzip2 -xf boost_1_66_0.tar.bz2 cd boost_1_66_0 ./bootstrap.sh sudo ./b2 install Download and extract nano node cd ~ wget https://github.com/nanocurrency/nano-node/releases/download/V11.2/nano-11.2.0-Linux.tar.bz2 tar xvf nano-11.2.0-Linux.tar.bz2 Initiate nano_node to generate ~/Nano ./nano-node-11.2.0-Linux/bin/nano_node --daemon Press ctrl+c to kill process Update config.json nano ~/Nano/config.json Change: \"rpc_enable\": \"true\" Save and quit Find path and user of nano_node binary cd ~/nano-node-11.2.0-Linux/bin/ pwd -P This should output something similar to: /home/stanley/nano-node-11.2.0-Linux/bin Write down this path for our service file in a future step ls -l This should output something similar to: -rwxr-xr-x 1 stanley stanley 8.9M Feb 16 02:25 nano_node Write down the user and group (in this example, both the user and group is stanley) to the left of nano_node, this should be the same as your username Create service file sudo touch /etc/systemd/system/nano_node.service sudo chmod 664 /etc/systemd/system/nano_node.service sudo nano /etc/systemd/system/nano_node.service Service file [Unit] Description=Nano node service After=network.target [Service] ExecStart=/home/stanley/nano-node-11.2.0-Linux/bin/nano_node --daemon #Update this with the link copied from the last step Restart=on-failure User=stanley #This user from the last step Group=stanley #The group from the last step [Install] WantedBy=multi-user.target Be sure to remove the comments (the parts starting at #) as they may cause problems. Start the service sudo service nano_node start Enable the node to run on boot sudo systemctl enable nano_node Create a symlink to nano_node to easily access later ln -s ~/nano-node-11.2.0-Linux/bin/nano_node /usr/local/sbin/nano_node You should now have a brand new node up and running, and the blocks syncing. Check Status nano_node --debug_block_count This will show you how far along the node is to syncing the blocks. You can compare this to the current block count from Aggregate Network Stats at https://nanocrawler.cc/network to see how far along the syncing process your are.","title":"Node"},{"location":"integration-guides/build-options/#qt-wallet","text":"Install dependencies sudo apt-get update && sudo apt-get upgrade sudo apt-get install git cmake g++ curl wget Build Boost 1.67.0 wget -O boost_1_67_0.tar.gz https://netix.dl.sourceforge.net/project/boost/boost/1.67.0/boost_1_67_0.tar.gz tar xzvf boost_1_67_0.tar.gz cd boost_1_67_0 ./bootstrap.sh --with-libraries=filesystem,log,program_options,thread ./b2 --prefix=../[boost] link=static install cd .. Install QT5 sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler Build nano_wallet git clone --recursive https://github.com/nanocurrency/nano-node.git nano_build cd nano_build git submodule update --init --recursive cmake -G \"Unix Makefiles\" -DNANO_GUI=ON -DBOOST_ROOT=../[boost]/ make nano_wallet cp nano_wallet ../nano_wallet && cd .. Run nano_wallet ./nano_wallet","title":"QT Wallet"},{"location":"integration-guides/build-options/#troubleshooting","text":"This application failed to start because it could not find or load the Qt platform plugin \"xcb\".** If you get this error, make sure you have QT5 installed. If it's installed, locate the file 'libqxcb.so' on your system and then tell nano_wallet where this file can be found (set it to the 'plugins' directory). locate libqxcb.so # returns /usr/lib/qt/plugins/platforms/libqxcb.so or something similar export QT_PLUGIN_PATH=/usr/lib/qt/plugins nano_wallet If you don't want to run this each time you can setup an alias to do this for you: echo 'alias nano_wallet=\"QT_PLUGIN_PATH=/usr/lib/qt/plugins nano_wallet\"' >> ~/.bashrc source ~/.bashrc Error starting nano exception while running wallet: No such node (Wallet)** If you get this error, it might be related to pre-existing configuration file issues on your system. You can try the following to generate a fresh configuration (your existing/older configuration will be under ~/Nano.old). Please be careful with the following if you already run a wallet, as these details will be forgotten by the nano_wallet due to starting with a fresh configuration: mv ~/Nano{,.old} nano_wallet Wallet crashes with an Aborted (core dumped) error** This may be related to a display issue. Try setting the environment variable GDK_BACKEND=x11 before running nano_wallet. GDK_BACKEND=x11 ./nano_wallet","title":"Troubleshooting"},{"location":"integration-guides/build-options/#build-instructions-general","text":"Unsupported configuration This documentation is intended only for developers of the Nano Node software, and will not result in a supported configuration. End-users are advised to use releases. The fastest and most recommended method of installation is through Docker . Running node as a service . To manage a node, use RPC commands or the CLI . Requirements Required Source Boost 1.67 extracted to [boost.src] (OR sh nano-node/util/build_prep/bootstrap_boost.sh -m ) (wallet) Qt 5.x open source edition extracted to [qt.src] Nano node source in [nano-node.src] Required build tools (macOS) XCode >= 7.3 (Windows) Visual Studio 2015 (Windows) NSIS package builder (*nix) Clang >= 3.5 or GCC >= 5 CMake","title":"Build Instructions - General"},{"location":"integration-guides/build-options/#boost","text":"Option 1 Inside nano-node directory run: sh util/build_prep/bootstrap_boost.sh -m This will build the required Boost libraries at /usr/local/boost/ . Option 2 Inside [boost.src] run: ./bootstrap.sh --with-libraries = filesystem,log,program_options,thread ./b2 --prefix =[ boost ] --build-dir =[ boost.build ] link = static install If on Windows: an additional b2 option address-model=64 for x64 builds should be included.","title":"Boost"},{"location":"integration-guides/build-options/#qt-wallet_1","text":"In [qt.build] execute: [ qt.src ] /configure -shared -opensource -nomake examples -nomake tests -confirm-license -prefix [ qt ] make make install If on Windows: use nmake instead of make .","title":"QT Wallet"},{"location":"integration-guides/build-options/#node_1","text":"CMake variables Format: cmake -D VARNAME=VARVALUE BOOST_ROOT=\\[boost\\] ( /usr/local/boost/ if bootstrapped) CMAKE_BUILD_TYPE=Release (default) ACTIVE_NETWORK=nano_live_network (default) Qt5_DIR=[qt]lib/cmake/Qt5 (to build GUI wallet) NANO_GUI=ON (to build GUI wallet) ENABLE_AVX2=ON , optional PERMUTE_WITH_GATHER=ON , optional PERMUTE_WITH_SHUFFLES=ON (for CPU with AXV2 support, choose fastest method for your CPU with https://github.com/sneves/blake2-avx2/ ) CRYPTOPP_CUSTOM=ON (more conservative building of Crypto++ for wider range of systems) NANO_SIMD_OPTIMIZATIONS=OFF (Enable CPU-specific SIMD optimization: SSE/AVX or NEON, e.g.) NANO_SECURE_RPC=ON (to build node with TLS) Build Node git submodule update --init --recursive Generate with cmake then build with your compiler (*nix) to build node without GUI execute: make nano_node (*nix) to build wallet with GUI execute: make nano_wallet Building a package (macOS) cpack -G \"DragNDrop\" (Windows) cpack -G \"NSIS\" (*nix) cpack -G \"TBZ2\" Testing Nano In order to run the tests, the corresponding CMake variable must be set: -D NANO_TEST=ON . With this variable set, make will also build test files, and will produce core_test and slow_test binaries, which can be executed like ./core_test . To run a node on the test network, set CMake variable: -DACTIVE_NETWORK=nano_test_network Beta Network Participation More information can be found on the Beta Network page To run a node on the beta network, set CMake variable: -DACTIVE_NETWORK=nano_beta_network","title":"Node"},{"location":"integration-guides/build-options/#build-instructions-arm","text":"These instructions are for creating an ArchlinuxARM 64bit build. Unsupported configuration This documentation is intended only for developers of the Nano Node software, and will not result in a supported configuration. End-users are advised to use releases. The fastest and most recommended method of installation is through Docker . Running node as a service . To manage a node, use RPC commands or the CLI .","title":"Build Instructions - ARM"},{"location":"integration-guides/build-options/#dependencies","text":"pacman -Syu pacman -S base-devel git gcc cmake curl wget","title":"Dependencies"},{"location":"integration-guides/build-options/#static-boost","text":"wget -O boost_1_67_0.tar.gz http://sourceforge.net/projects/boost/files/boost/1.67.0/boost_1_67_0.tar.gz/download tar xzvf boost_1_67_0.tar.gz cd boost_1_67_0 ./bootstrap.sh ./b2 --prefix = ../ [ boost ] link = static install cd ..","title":"Static Boost"},{"location":"integration-guides/build-options/#node_2","text":"git clone --recursive https://github.com/nanocurrency/nano-node.git nano_build cd nano_build cmake -DBOOST_ROOT = ../ [ boost ] -G \"Unix Makefiles\" make nano_node cp nano_node ../nano_node && cd .. && ./nano_node --diagnostics","title":"Node"},{"location":"integration-guides/build-options/#build-instructions-unix","text":"These instructions are for creating a build on the following systems: Ubuntu 16.04 LTS Server Ubuntu 16.10+ Debian 8 Jessie (Debian 8 requires Cmake 3.4+) Debian 9 Stretch See further below for CentOS 7 and OSX . Unsupported configuration This documentation is intended only for developers of the Nano Node software, and will not result in a supported configuration. End-users are advised to use releases. The fastest and most recommended method of installation is through Docker . Running node as a service . To manage a node, use RPC commands or the CLI .","title":"Build Instructions - Unix"},{"location":"integration-guides/build-options/#dependencies_1","text":"sudo apt-get update && sudo apt-get upgrade sudo apt-get install git cmake g++ curl wget","title":"Dependencies"},{"location":"integration-guides/build-options/#static-boost_1","text":"wget -O boost_1_67_0.tar.gz https://netix.dl.sourceforge.net/project/boost/boost/1.67.0/boost_1_67_0.tar.gz tar xzvf boost_1_67_0.tar.gz cd boost_1_67_0 ./bootstrap.sh --with-libraries = filesystem,log,program_options,system,thread ./b2 --prefix = ../ [ boost ] link = static install cd ..","title":"Static Boost"},{"location":"integration-guides/build-options/#node_3","text":"git clone --recursive https://github.com/nanocurrency/nano-node.git nano_build cd nano_build cmake -DBOOST_ROOT = ../ [ boost ] / -G \"Unix Makefiles\" make nano_node cp nano_node ../nano_node && cd .. && ./nano_node --diagnostics","title":"Node"},{"location":"integration-guides/build-options/#build-instructions-centos-7","text":"Requirements GCC compiler version 4.9+ or other compiler with C++14 language support (default Centos 7 compilers are outdated) Cmake 3.4+","title":"Build Instructions - CentOS 7"},{"location":"integration-guides/build-options/#dependencies_2","text":"sudo yum check-update sudo yum install git libstdc++-static curl wget","title":"Dependencies"},{"location":"integration-guides/build-options/#configure-repository-with-modern-gcc","text":"sudo yum install centos-release-scl sudo yum install devtoolset-7-gcc* scl enable devtoolset-7 bash","title":"Configure repository with modern GCC"},{"location":"integration-guides/build-options/#modern-cmake","text":"wget https://cmake.org/files/v3.12/cmake-3.12.1.tar.gz tar zxvf cmake-3.12.1.tar.gz && cd cmake-3.12.1 ./bootstrap --prefix = /usr/local make -j $( nproc ) sudo make install cd ..","title":"Modern Cmake"},{"location":"integration-guides/build-options/#static-boost_2","text":"wget -O boost_1_67_0.tar.gz https://netix.dl.sourceforge.net/project/boost/boost/1.67.0/boost_1_67_0.tar.gz tar xzvf boost_1_67_0.tar.gz && cd boost_1_67_0 ./bootstrap.sh --with-libraries = filesystem,log,program_options,system,thread ./b2 --prefix = ../ [ boost ] link = static install cd ..","title":"Static Boost"},{"location":"integration-guides/build-options/#node_4","text":"git clone --recursive https://github.com/nanocurrency/nano-node.git nano_build cd nano_build cmake -DBOOST_ROOT = ../ [ boost ] / -G \"Unix Makefiles\" make nano_node cp nano_node .. && cd .. && ./nano_node --diagnostics","title":"Node"},{"location":"integration-guides/build-options/#build-instructions-osx","text":"git clone https://github.com/nanocurrency/nano-node.git cd nano-node sh util/build_prep/bootstrap_boost.sh -m git submodule update --init --recursive cmake -DBOOST_ROOT=../[boost]/ -G \"Unix Makefiles\" make ./nano_node/nano_node --daemon","title":"Build Instructions - OSX"},{"location":"integration-guides/key-management/","text":"Mnemonic Seed \u00b6 Nano's private key(s) from mnemonic derivation follows the BIP 39 / 44 standard. Only hardened paths are defined. Nano's coin-type is 165' (0x800000a5) 44'/165'/0' derives the first private key, 44'/165'/1' derives the second private key, and so on. The BIP39 seed modifier \"ed25519 seed\" is used which makes wallets compatible with each other. This was chosen due to it being used by the Ledger Nano implementation. Demo Examples \u00b6 https://github.com/roosmaa/nano-bip39-demo https://github.com/joltwallet/bip-mnemonic Test Vectors \u00b6 Given 24-Word Mnemonic: edge defense waste choose enrich upon flee junk siren film clown finish luggage leader kid quick brick print evidence swap drill paddle truly occur Given Passphrase: some password Derived BIP39 Seed: 0dc285fde768f7ff29b66ce7252d56ed92fe003b605907f7a4f683c3dc8586d34a914d3c71fc099bb38ee4a59e5b081a3497b7a323e90cc68f67b5837690310c Derived Private Key for 44'/165'/0' : 3be4fc2ef3f3b7374e6fc4fb6e7bb153f8a2998b3b3dab50853eabe128024143 Derived Public key: 5b65b0e8173ee0802c2c3e6c9080d1a16b06de1176c938a924f58670904e82c4 Derived Address: nano_1pu7p5n3ghq1i1p4rhmek41f5add1uh34xpb94nkbxe8g4a6x1p69emk8y1d External Management \u00b6 For larger, more robust systems, external private key management is recommended. In this setup, the node operator generates and stores private keys in an external database and only queries the nano_node to: Find pending blocks for an account Sign transactions given a private key. More advanced systems may choose to implement signing themselves. Broadcast the signed transaction to the network. Note WALLET_IDs are not used for External Private Key Management since private keys are not stored in the nano_node. Much of this section builds off of the Blocks Specifications documentation. External accounting systems \u00b6 In order to properly implement accounting systems external to the Nano node the following best practices should be put into place which ensure only fully confirmed blocks are used for external tracking of credits, debits, etc. Block confirmation procedures \u00b6 Before crediting funds to an account internally based on a deposit on the network, the block sending the funds must be confirmed. This is done by verifying the network has reached quorum on the block. To validate confirmation on a block the following methods can be used: Block callback Setup the config file with the necessary information to receive HTTP callbacks for all blocks that have reached quorum on the network and are thus confirmed. The config values requiring update to configure this are callback_address , callback_port and callback_target in the config.json file. To provide redundancy around callback function it is recommended to also use confirmation history polling outlined below. Confirmation history polling Calls to confirmation_history RPC command will return a list of up to 2048 recently confirmed blocks which can be searched for the necessary hashes you wish to verify confirmation for. Consistent polling of confirmation_history is recommended to capture confirmations on all blocks on the network. Block confirmation request If the need arises to manually trigger a block confirmation, either due to missing a confirmation notification or node restart, the block_confirm RPC command can be called. This will start the confirmation process on the network and results can be discovered through the resulting callbacks and confirmation history polling mentioned above. Tracking confirmed balances \u00b6 External accounting systems that track balances arriving to the node must track hashes of blocks that have been received in order to guarantee idempotency. Once confirmation of a block has been validated, the block hash should be recorded for the account along with any credits, debits or other related information. Any attempts to credit or debit accounts external to the node should check that no previous conflicting or duplicate activity was already recorded for that same block hash. Expanding Private Keys \u00b6 A Nano private key is a 256-bit piece of data produced from a cryptographically secure random number generator. Secure Private Keys Generating private keys from an insecure source may result in loss of funds. Be sure to backup any generated private key; if lost the funds in the account will become inaccessible. Step 1: Generate secure private key The bash command below generates a valid private key from a cryptographically secure random number generator. Always use a cryptographically secure processes for generating any private keys. Command Example cat /dev/urandom | tr -dc '0-9A-F' | head -c ${ 1 :- 64 } Success Result 781186FB9EF17DB6E3D1056550D9FAE5D5BBADA6A6BC370E4CBB938B1DC71DA3 Step 2: Expand private key From the private key, a public key can be derived, and the public key can be translated into a Nano Address using the key_expand RPC command. Request Example curl -d '{ \"action\": \"key_expand\", \"key\": \"781186FB9EF17DB6E3D1056550D9FAE5D5BBADA6A6BC370E4CBB938B1DC71DA3\" }' http://127.0.0.1:7076 Success Response { \"private\" : \"781186FB9EF17DB6E3D1056550D9FAE5D5BBADA6A6BC370E4CBB938B1DC71DA3\" , \"public\" : \"3068BB1CA04525BB0E416C485FE6A67FD52540227D267CC8B6E8DA958A7FA039\" , \"account\" : \"nano_1e5aqegc1jb7qe964u4adzmcezyo6o146zb8hm6dft8tkp79za3sxwjym5rx\" } Creating Transactions \u00b6 Using external keys, transactions are generated in two steps: creation and broadcast. This section will be more heavy on example rather than precise specifications. Send Transaction \u00b6 Step 1: Get Account Info To send funds to an account, first call the account_info RPC command to gather necessary account information to craft your transaction. Setting \"representative\": \"true\" makes the nano_node also return the account's representative address, a necessary piece of data for creating a transaction. Request Example curl -d '{ \"action\": \"account_info\", \"representative\": \"true\", \"account\": \"nano_1e5aqegc1jb7qe964u4adzmcezyo6o146zb8hm6dft8tkp79za3sxwjym5rx\" }' http://127.0.0.1:7076 Success Response { \"frontier\" : \"92BA74A7D6DC7557F3EDA95ADC6341D51AC777A0A6FF0688A5C492AB2B2CB40D\" , \"open_block\" : \"B292BFFAAE9013BE630B31144EF15205E986940080687C0441CCFE6EAB67FE53\" , \"representative_block\" : \"B292BFFAAE9013BE630B31144EF15205E986940080687C0441CCFE6EAB67FE53\" , \"balance\" : \"4618869000000000000000000000000\" , \"modified_timestamp\" : \"1524626644\" , \"block_count\" : \"4\" , \"representative\" : \"nano_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\" } Step 2: Build block_create request Using details from the account_info call response, along with other information, we can create the block_create RPC request. For more details on values, see the Blocks Specifications documentation. Field Value \"type\" always the constant \"state\" \"previous\" \"frontier\" from account_info response \"account\" \"address\" used in the account_info call above that the block will be created for \"representative\" \"representative\" address returned in the account_info call \"balance\" balance of the account in raw raw after this transaction is completed (decreased if sending, increased if receiving). In this example, we will send 1 nano nano ( 10^{30} raw 10^{30} raw ) to address nano_1q3hqecaw15cjt7thbtxu3pbzr1eihtzzpzxguoc37bj1wc5ffoh7w74gi6p . \"link\" destination address the funds will move between \"key\" account's private key Request Example curl -d '{ \"action\": \"block_create\", \"type\": \"state\", \"previous\": \"92BA74A7D6DC7557F3EDA95ADC6341D51AC777A0A6FF0688A5C492AB2B2CB40D\", \"account\": \"nano_1e5aqegc1jb7qe964u4adzmcezyo6o146zb8hm6dft8tkp79za3sxwjym5rx\", \"representative\": \"nano_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\", \"balance\": \"3618869000000000000000000000000\", \"link\": \"nano_1q3hqecaw15cjt7thbtxu3pbzr1eihtzzpzxguoc37bj1wc5ffoh7w74gi6p\", \"key\": \"781186FB9EF17DB6E3D1056550D9FAE5D5BBADA6A6BC370E4CBB938B1DC71DA3\" }' http://127.0.0.1:7076 Success Response { \"hash\" : \"8DB5C07E0E62E9DFE8558CB9BD654A115B02245B38CD369753CECE36DAD13C05\" , \"block\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"nano_1e5aqegc1jb7qe964u4adzmcezyo6o146zb8hm6dft8tkp79za3sxwjym5rx\\\",\\n \\\"previous\\\": \\\"92BA74A7D6DC7557F3EDA95ADC6341D51AC777A0A6FF0688A5C492AB2B2CB40D\\\",\\n \\\"representative\\\": \\\"nano_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\\\",\\n \\\"balance\\\": \\\"3618869000000000000000000000000\\\",\\n \\\"link\\\": \\\"5C2FBB148E006A8E8BA7A75DD86C9FE00C83F5FFDBFD76EAA09531071436B6AF\\\",\\n \\\"link_as_account\\\": \\\"nano_1q3hqecaw15cjt7thbtxu3pbzr1eihtzzpzxguoc37bj1wc5ffoh7w74gi6p\\\",\\n \\\"signature\\\": \\\"79240D56231EF1885F354473733AF158DC6DA50E53836179565A20C0BE89D473ED3FF8CD11545FF0ED162A0B2C4626FD6BF84518568F8BB965A4884C7C32C205\\\",\\n \\\"work\\\": \\\"fbffed7c73b61367\\\"\\n }\\n\" } Additional details The newlines ( \"\\n\" ) in the response are for display purposes only and are ignored. Always ensure that every quotation mark is properly escaped. block_create RPC commands generally take longer than other RPC commands because the nano_node has to generate the Proof-of-Work for the transaction. The response block data is already properly escaped for the process RPC command. The nano_node creating and signing this transaction has no concept of what the transaction amount is, nor network state; all the nano_node knows is that it is creating a block whose previous block on the account chain has hash 92BA74A7D6DC7557F3EDA95ADC6341D51AC777A0A6FF0688A5C492AB2B2CB40D results in the account having a balance of 3618869000000000000000000000000 . If the account's balance at block hash 92BA74A7D6DC7557F3EDA95ADC6341D51AC777A0A6FF0688A5C492AB2B2CB40D was actually 5618869000000000000000000000000 , then 2 nano nano would have been sent to nano_1q3hqecaw15cjt7thbtxu3pbzr1eihtzzpzxguoc37bj1wc5ffoh7w74gi6p . What if I receive funds on my account and then broadcast the above crafted send? Would this result in me sending excess funds to the recipient? If you followed this guide, then the answer is \"no\". When you issued the account_info RPC command, you received the account's balance at a specific blockhash on its account-chain. In your crafted transaction, you specify that hash in the \"previous\" field. If funds were signed into your account, the headblock on your account-chain would change. Since your send no longer refers to the headblock on your account-chain when broadcasted, the network would reject your transaction. Warning Since only the resulting balance is recorded, the transaction amount is interpreted as the difference in balance from the previous block on the account-chain and the newly created block. For this reason, it is crucial that you obtain the current account balance and headblock in the same atomic account_info RPC command. When not following this guide closely, the following inappropriate sequence of events could lead to erroneous amounts sent to a recipient. An account's balance, say 5 nano nano , was obtained using the account_balance RPC command ( never use this command for transaction related operations ). This balance is valid as of hypothetical BLOCK_A . By another process you control, a receive ( BLOCK_B ) was signed and broadcasted into your account-chain (race-condition). Lets say this receive increased the funds on the account chain by 10 nano nano , resulting in a final balance 15 nano nano . The account's frontier block is obtained by the accounts_frontiers RPC command, returning the hash of BLOCK_B . Other transaction metadata is obtained by other RPC commands. With the collected data, if a send transaction was created for 3 nano nano , the final balance would be computed as 5 - 3 5 - 3 , or 2 nano nano . When this is broadcasted, since it is referring to the current head block on the account, BLOCK_B , the network would accept it. But, because the balance as of BLOCK_B was actually 15 nano nano , this would result in 12 nano nano being sent to the recipient. For this reason, only populate transaction data source from a single account_info RPC call . Step 3: Broadcast the transaction As a result of the command above, the nano_node will return a signed, but not yet broadcasted transaction. Broadcasting of the signed transaction is covered in the Broadcasting Transactions section. Receive Transaction \u00b6 Step 1: Get Account Info Receiving funds is very similar to sending funds outlined in the previous section, starting with calling account_info to get block details for the account frontier. The scenario below pretends that our previous example of a send transaction was not broadcast and confirmed on the network because the starting account_info details are identical. Request Example curl -d '{ \"action\": \"account_info\", \"representative\": \"true\", \"account\": \"nano_1e5aqegc1jb7qe964u4adzmcezyo6o146zb8hm6dft8tkp79za3sxwjym5rx\" }' http://127.0.0.1:7076 Success Response { \"frontier\" : \"92BA74A7D6DC7557F3EDA95ADC6341D51AC777A0A6FF0688A5C492AB2B2CB40D\" , \"open_block\" : \"B292BFFAAE9013BE630B31144EF15205E986940080687C0441CCFE6EAB67FE53\" , \"representative_block\" : \"B292BFFAAE9013BE630B31144EF15205E986940080687C0441CCFE6EAB67FE53\" , \"balance\" : \"4618869000000000000000000000000\" , \"modified_timestamp\" : \"1524626644\" , \"block_count\" : \"4\" , \"representative\" : \"nano_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\" } Step 2: Build block_create request Using details from the account_info call response, along with other information, we can create the block_create RPC request. The two differences between the send transaction are the \"link\" and \"balance\" fields. For more details on values, see the Blocks Specifications documentation. Field Value \"type\" always the constant \"state\" \"previous\" \"frontier\" from account_info response \"account\" \"address\" used in the account_info call above that the block will be created for \"representative\" \"representative\" address returned in the account_info call \"balance\" balance of the account in raw raw after this transaction is completed (decreased if sending, increased if receiving). In this example, we will receive 7 nano nano ( 7 x 10^{30} raw 7 x 10^{30} raw ) based on the assumed details of the block the \"link\" hash refers to (block contents not shown in this example). \"link\" block hash of its paired send transaction, assumed to be a 7 nano nano send from block hash CBC911F57B6827649423C92C88C0C56637A4274FF019E77E24D61D12B5338783 \"key\" account's private key Request Example curl -d '{ \"action\": \"block_create\", \"type\": \"state\", \"previous\": \"92BA74A7D6DC7557F3EDA95ADC6341D51AC777A0A6FF0688A5C492AB2B2CB40D\", \"account\": \"nano_1e5aqegc1jb7qe964u4adzmcezyo6o146zb8hm6dft8tkp79za3sxwjym5rx\", \"representative\": \"nano_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\", \"balance\": \"11618869000000000000000000000000\", \"link\": \"CBC911F57B6827649423C92C88C0C56637A4274FF019E77E24D61D12B5338783\", \"key\": \"781186FB9EF17DB6E3D1056550D9FAE5D5BBADA6A6BC370E4CBB938B1DC71DA3\" }' http://127.0.0.1:7076 Success Response { \"hash\" : \"350D145570578A36D3D5ADE58DC7465F4CAAF257DD55BD93055FF826057E2CDD\" , \"block\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"nano_1e5aqegc1jb7qe964u4adzmcezyo6o146zb8hm6dft8tkp79za3sxwjym5rx\\\",\\n \\\"previous\\\": \\\"92BA74A7D6DC7557F3EDA95ADC6341D51AC777A0A6FF0688A5C492AB2B2CB40D\\\",\\n \\\"representative\\\": \\\"nano_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\\\",\\n \\\"balance\\\": \\\"11618869000000000000000000000000\\\",\\n \\\"link\\\": \\\"CBC911F57B6827649423C92C88C0C56637A4274FF019E77E24D61D12B5338783\\\",\\n \\\"link_as_account\\\": \\\"nano_3kyb49tqpt39ekc49kbej51ecsjqnimnzw1swxz4boix4ctm93w517umuiw8\\\",\\n \\\"signature\\\": \\\"EEFFE1EFCCC8F2F6F2F1B79B80ABE855939DD9D6341323186494ADEE775DAADB3B6A6A07A85511F2185F6E739C4A54F1454436E22255A542ED879FD04FEED001\\\",\\n \\\"work\\\": \\\"c5cf86de24b24419\\\"\\n }\\n\" } Additional details Here the follow scenario occurs: Previous balance was 4618869000000000000000000000000 raw raw Increased our balance by 7000000000000000000000000000000 raw raw Final balance becomes 11618869000000000000000000000000 raw raw Step 3: Broadcast the transaction As a result of the command above, the nano_node will return a signed, but not yet broadcasted transaction. Broadcasting of the signed transaction is covered in the Broadcasting Transactions section. Manually receiving first block The very first transaction on an account-chain, which is always a receive, is a bit special since it doesn't have a \"previous\" block. The process however, is very similar to a conventional receive transaction. Field Description previous Value is 0 (32 0's) account Same as normal receive. representative Choose a reliable, trustworthy representative. balance Same as normal receive. This will be the transaction amount of the pairing send. link Same as normal receive. key Same as normal receive. Broadcasting Transactions \u00b6 Broadcast using process RPC command Common to all of these transactions is the need to broadcast the completed block to the network. This is achieved by the process RPC command which accepts the block as stringified JSON data. A successful broadcast will return the broadcasted block's hash. Request Example curl -d '{ \"action\": \"process\", \"block\": \"{ \\\"type\\\": \\\"state\\\", \\\"account\\\": \\\"nano_1e5aqegc1jb7qe964u4adzmcezyo6o146zb8hm6dft8tkp79za3sxwjym5rx\\\", \\\"previous\\\": \\\"92BA74A7D6DC7557F3EDA95ADC6341D51AC777A0A6FF0688A5C492AB2B2CB40D\\\", \\\"representative\\\": \\\"nano_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\\\", \\\"balance\\\": \\\"11618869000000000000000000000000\\\", \\\"link\\\": \\\"CBC911F57B6827649423C92C88C0C56637A4274FF019E77E24D61D12B5338783\\\", \\\"signature\\\": \\\"EEFFE1EFCCC8F2F6F2F1B79B80ABE855939DD9D6341323186494ADEE775DAADB3B6A6A07A85511F2185F6E739C4A54F1454436E22255A542ED879FD04FEED001\\\", \\\"work\\\": \\\"c5cf86de24b24419\\\" }\" }' http://127.0.0.1:7076 Success Response { \"hash\" : \"42A723D2B60462BF7C9A003FE9A70057D3A6355CA5F1D0A57581000000000000\" } Info Below are a few helpful pieces of information to consider: It may take a few seconds for the transaction to appear. If the transaction fails to appear, you may call the same process RPC command with the same block data with no risk. Account-chains must be continuous and unbroken . If for some reason a transaction fails to properly broadcast, subsequent transactions on the account-chain after that transaction will not be accepted by the network since the \"previous\" field in the transaction data refers to a non-existant block. If this situation occurs, rebroadcasting the missing transaction(s) will make the subsequent blocks valid in the network's ledger. Rebroadcasting blocks for an account-chain The following command rebroadcasts all hashes on an account-chain starting at block hash provided: Request Example curl -d '{ \"action\": \"republish\", \"hash\": \"48006BF3146C18CAD3A53A957BF64EF7C57820B21FCCE373FA637559DA260358\" }' http://127.0.0.1:7076 Internal Management \u00b6 The nano_node software has a built-in private-key manager that is suitable for smaller operations (<1000 accounts). External Key Management allows more powerful and robust systems at the cost of additional complexity. External Key Management is recommended for larger operations. Creating a Wallet \u00b6 To create an account, you first must create a wallet to hold the seed that will subsequently create the account. Request Example curl -d '{ \"action\": \"wallet_create\" }' http://127.0.0.1:7076 Success Response { \"wallet\" : \"E3E67B1B3FFA46F606240F1D0B964873D42E9C6D0B7A0BF376A2E128541CC446\" } The nano_node responds with the WALLET_ID. If you lose your WALLET_ID, it can only be recovered via a CLI command. To reiterate, the WALLET_ID is not a seed . The seed can be extracted for backup in Backing Up Seed . Many of the RPC commands in this guide require the WALLET_ID. Recovering WALLET_ID \u00b6 If you lose your WALLET_ID, you can print out all your WALLET_IDs and public addresses in those wallets with the --wallet_list CLI command as follows: Command Format docker exec ${ NANO_NAME } nano_node --wallet_list Success Response Wallet_ID : E3E67B1B3FFA46F606240F1D0B964873D42E9C6D0B7A0BF376A2E128541CC446 nano_16odwi933gpzmkgdcy9tt5zef5ka3jcfubc97fwypsokg7sji4mb9n6qtbme Wallet_ID : DB0711484E35A4C75230D898853A86BFAFE9F87FCE99C83A4C2668C39607DD4B In this example, the nano_node's internal private-key management system contains two wallets, each with a different 256-bit seed. The first wallet has a single account and the second wallet has zero accounts. Account creation will be covered later. Backing Up Seed \u00b6 The following command will print the seed for a given wallet to stdout. Replace ${WALLET_ID} with the WALLET_ID that you would like to display the seed of. Command Format docker exec ${ NANO_NAME :- nano_node_1 } nano_node --wallet_decrypt_unsafe --wallet ${ WALLET_ID } Success Response Seed : D56143E7561D71C1AF4D563C6AF79EECE93E82479818AD8ED88BED1AAE8BE4E5 Pub : nano_16odwi933gpzmkgdcy9tt5zef5ka3jcfubc97fwypsokg7sji4mb9n6qtbme Prv : 1F6FEB5D1E05C10B904E1112F430C3FA93ACC7067206B63AD155199501794E3E Info The nano_node responds with three pieces of information: The seed of the wallet (back this up). The pairing public address The private key (deterministically derived from seed) of accounts within the wallet. Additional notes: If you change the seed in a wallet, future created accounts will be derived from that seed. Changing seeds on a wallet that already has accounts can cause accidental loss of funds from improper seed or private key backup. It is recommended to always create a new wallet when restoring a seed. Error Response Wallet doesn't exist Warning If anyone has access to the seed, they can freely access funds, so keep this very secure. Since the above command prints to stdout, it is recommended to wipe stdout afterwards using: clear && printf '\\e[3J' Restoring/Changing Seed \u00b6 Warning Only change the seed of a wallet that contains no accounts. Changing the seed of a wallet that already has accounts may lead to a false sense of security: accounts are generated by the seed that is currently in the wallet. Generating accounts, then switching the seed and backing up the new seed does not backup the previously generated accounts. Request Format curl -d '{ \"action\": \"wallet_change_seed\", \"wallet\": \"<WALLET_ID>\", \"seed\": \"<SEED>\" }' http://127.0.0.1:7076 Request Example curl -d '{ \"action\":\"wallet_change_seed\", \"wallet\":\"DB0711484E35A4C75230D898853A86BFAFE9F87FCE99C83A4C2668C39607DD4B\", \"seed\":\"D56143E7561D71C1AF4D563C6AF79EECE93E82479818AD8ED88BED1AAE8BE4E5\" }' http://127.0.0.1:7076 Success Response { \"success\" : \"\" } Error Response Response if the wallet_id isn't found in nano_node: { \"error\" : \"Wallet not found\" } Response if the seed field contains non-hexidecimal values or is too long: { \"error\" : \"Bad seed\" } Warning If the hexidecimal seed represents less than 256 bits, the seed will be 0-padded on the left to become 256 bits. Account Create \u00b6 After creating a wallet, it's corresponding WALLET_ID, and backing up the seed (not the wallet_id) , the wallet can be populated with accounts. To create a new account in a wallet use the account_create RPC command: Request Format curl -d '{ \"action\": \"account_create\", \"wallet\": \"<WALLET_ID>\" }' http://127.0.0.1:7076 Success Response { \"account\" : \"nano_16odwi933gpzmkgdcy9tt5zef5ka3jcfubc97fwypsokg7sji4mb9n6qtbme\" } Error Response { \"error\" : \"Wallet not found\" } Bulk Account Create \u00b6 To generate many accounts in bulk, it is more efficient to create them all at once using the accounts_create RPC command: Request Format curl -d '{ \"action\": \"accounts_create\", \"wallet\": \"<WALLET_ID>\", \"count\": \"<NUM_ACCOUNTS>\" }' http://127.0.0.1:7076 Request Example curl -d '{ \"action\": \"accounts_create\", \"wallet\": \"DB0711484E35A4C75230D898853A86BFAFE9F87FCE99C83A4C2668C39607DD4B\", \"count\":\"5\" }' http://127.0.0.1:7076 Success Response { \"accounts\" : [ \"nano_35kgi43t5hgi64715qnppmz1yb6re1igfcrkfx4ppirkqpfmecnpd1mdmafu\" , \"nano_3t13y6b7h93yn9hehn8p6yqx1yqzrxxs33drhzep8huhymwxamn15pba75oj\" , \"nano_11exxzfoosai96w7gnrjrn7m6i8bodch37ib8jgxsm5k96na6e1wda8np881\" , \"nano_3xbsso8pkemwatwdnkcyn1bfcmrb8dpcg3pit9zqxj9mkxa6ifiankff6m9x\" , \"nano_1q5gpy46moe1csj8md8oq3x57sxqmwskk8mmr7c63q1yebnjcsxg1yib19kn\" ] } Receiving Funds \u00b6 As long as the nano_node is synced and unlocked (nano_node locking is not covered in this guide), nano_node automatically creates and signs receive transactions for all accounts in the wallet's internal private-key management system. Tip In the event that a receive is not automatically generated, it can be manually generated using the receive RPC command. Semi-Manual Receiving Funds \u00b6 If the nano_node does not automatically sign in a pending transaction, transactions can be manually signed in. The easiest way is to explicitly command the nano_node to check all of the accounts in all of its wallets for pending blocks. Request Example curl -d '{ \"action\": \"search_pending_all\" }' http://127.0.0.1:7076 Success Response { \"success\" : \"\" } Note As the number of accounts in a nano_node grows, this command becomes increasingly computationally expensive. Sending funds \u00b6 The send RPC command sends funds from an account in the specified wallet to a destination address. Request Format curl -d '{ \"action\": \"send\", \"wallet\": \"<WALLET_ID>\", \"source\": \"<SOURCE_ADDRESS>\", \"destination\": \"<DESTINATION_ADDRESS>\", \"amount\": \"1000000\", \"id\": \"7081e2b8fec9146e\" }' http://127.0.0.1:7076 Field Description wallet WALLET_ID containing the source address source Address you control starting with \"nano_\" destination Destination address starting with \"nano_\" amount Amount to send in raw id Any string Important The \"id\" field is a safety mechanism that prevents issuing a transaction multiple times by repeating the RPC command. If a transaction is successful, any subsequent send RPC commands with the same identifier will be ignored by the nano_node. If the request times out, then the send may or may not have gone through. Most exchange \"double withdraw\" issues are caused by naive error-handling routines which re-issue the send request without the \"id\" parameter. The \"id\" field is local to your nano_node instance and does not offer protection when sent to different instances of nano_node that manage the same seed. As previously mentioned, having a seed loaded in multiple online nano_node is strongly discouraged. If managing more than 1000 accounts, building a separate system for managing keys and accounts externally is recommended Below is a sample command to send 1 nano nano from nano_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000 to nano_16odwi933gpzmkgdcy9tt5zef5ka3jcfubc97fwypsokg7sji4mb9n6qtbme . Request Example curl -d '{ \"action\": \"send\", \"wallet\": \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\", \"source\": \"nano_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\", \"destination\": \"nano_16odwi933gpzmkgdcy9tt5zef5ka3jcfubc97fwypsokg7sji4mb9n6qtbme\", \"amount\": \"1000000000000000000000000000000\", \"id\": \"7081e2b8fec9146e\" }' http://127.0.0.1:7076 Success Response { \"block\" : \"000D1BAEC8EC208142C99059B393051BAC8380F9B5A2E6B2489A277D81789F3F\" } On success, the nano_node returns the hash of the transaction's block. Republishing Transactions \u00b6 It may take a few seconds for the transaction to appear on the Nano Network. If the transaction fails to appear, you may call the republish RPC command with the oldest missing transaction's hash. Account-chains must be continuous and unbroken . If for some reason a transaction fails to properly broadcast, subsequent transactions on the account-chain will not be accepted by the network since the \"previous\" field in the transaction data refers to a block unknown to to other nodes on the network. Tip Republishing the missing transaction(s) will make all the subsequent blocks valid in the network's ledger. Republishing does not create new transactions. The following command rebroadcasts all hashes on an acccount-chain starting at block with hash ${BLOCK_HASH} : Request Example curl -d '{ \"action\": \"republish\", \"hash\": \"AF9C1D46AAE66CC8F827904ED02D4B3D95AA98B1FF058352BA6B670BEFD40231\" }' http://127.0.0.1:7076 Success Response { \"success\" : \"\" , \"blocks\" : [ \"AF9C1D46AAE66CC8F827904ED02D4B3D95AA98B1FF058352BA6B670BEFD40231\" , \"C9A111580A21F3E63F2283DAF6450D5178BFAC2A6C38E09B76EEA9CE37EC9CE0\" ] } On success, the nano_node returns the hashes of all republished blocks.","title":"Key Management"},{"location":"integration-guides/key-management/#mnemonic-seed","text":"Nano's private key(s) from mnemonic derivation follows the BIP 39 / 44 standard. Only hardened paths are defined. Nano's coin-type is 165' (0x800000a5) 44'/165'/0' derives the first private key, 44'/165'/1' derives the second private key, and so on. The BIP39 seed modifier \"ed25519 seed\" is used which makes wallets compatible with each other. This was chosen due to it being used by the Ledger Nano implementation.","title":"Mnemonic Seed"},{"location":"integration-guides/key-management/#demo-examples","text":"https://github.com/roosmaa/nano-bip39-demo https://github.com/joltwallet/bip-mnemonic","title":"Demo Examples"},{"location":"integration-guides/key-management/#test-vectors","text":"Given 24-Word Mnemonic: edge defense waste choose enrich upon flee junk siren film clown finish luggage leader kid quick brick print evidence swap drill paddle truly occur Given Passphrase: some password Derived BIP39 Seed: 0dc285fde768f7ff29b66ce7252d56ed92fe003b605907f7a4f683c3dc8586d34a914d3c71fc099bb38ee4a59e5b081a3497b7a323e90cc68f67b5837690310c Derived Private Key for 44'/165'/0' : 3be4fc2ef3f3b7374e6fc4fb6e7bb153f8a2998b3b3dab50853eabe128024143 Derived Public key: 5b65b0e8173ee0802c2c3e6c9080d1a16b06de1176c938a924f58670904e82c4 Derived Address: nano_1pu7p5n3ghq1i1p4rhmek41f5add1uh34xpb94nkbxe8g4a6x1p69emk8y1d","title":"Test Vectors"},{"location":"integration-guides/key-management/#external-management","text":"For larger, more robust systems, external private key management is recommended. In this setup, the node operator generates and stores private keys in an external database and only queries the nano_node to: Find pending blocks for an account Sign transactions given a private key. More advanced systems may choose to implement signing themselves. Broadcast the signed transaction to the network. Note WALLET_IDs are not used for External Private Key Management since private keys are not stored in the nano_node. Much of this section builds off of the Blocks Specifications documentation.","title":"External Management"},{"location":"integration-guides/key-management/#external-accounting-systems","text":"In order to properly implement accounting systems external to the Nano node the following best practices should be put into place which ensure only fully confirmed blocks are used for external tracking of credits, debits, etc.","title":"External accounting systems"},{"location":"integration-guides/key-management/#block-confirmation-procedures","text":"Before crediting funds to an account internally based on a deposit on the network, the block sending the funds must be confirmed. This is done by verifying the network has reached quorum on the block. To validate confirmation on a block the following methods can be used:","title":"Block confirmation procedures"},{"location":"integration-guides/key-management/#tracking-confirmed-balances","text":"External accounting systems that track balances arriving to the node must track hashes of blocks that have been received in order to guarantee idempotency. Once confirmation of a block has been validated, the block hash should be recorded for the account along with any credits, debits or other related information. Any attempts to credit or debit accounts external to the node should check that no previous conflicting or duplicate activity was already recorded for that same block hash.","title":"Tracking confirmed balances"},{"location":"integration-guides/key-management/#expanding-private-keys","text":"A Nano private key is a 256-bit piece of data produced from a cryptographically secure random number generator. Secure Private Keys Generating private keys from an insecure source may result in loss of funds. Be sure to backup any generated private key; if lost the funds in the account will become inaccessible. Step 1: Generate secure private key The bash command below generates a valid private key from a cryptographically secure random number generator. Always use a cryptographically secure processes for generating any private keys.","title":"Expanding Private Keys"},{"location":"integration-guides/key-management/#creating-transactions","text":"Using external keys, transactions are generated in two steps: creation and broadcast. This section will be more heavy on example rather than precise specifications.","title":"Creating Transactions"},{"location":"integration-guides/key-management/#send-transaction","text":"Step 1: Get Account Info To send funds to an account, first call the account_info RPC command to gather necessary account information to craft your transaction. Setting \"representative\": \"true\" makes the nano_node also return the account's representative address, a necessary piece of data for creating a transaction.","title":"Send Transaction"},{"location":"integration-guides/key-management/#receive-transaction","text":"Step 1: Get Account Info Receiving funds is very similar to sending funds outlined in the previous section, starting with calling account_info to get block details for the account frontier. The scenario below pretends that our previous example of a send transaction was not broadcast and confirmed on the network because the starting account_info details are identical.","title":"Receive Transaction"},{"location":"integration-guides/key-management/#broadcasting-transactions","text":"Broadcast using process RPC command Common to all of these transactions is the need to broadcast the completed block to the network. This is achieved by the process RPC command which accepts the block as stringified JSON data. A successful broadcast will return the broadcasted block's hash.","title":"Broadcasting Transactions"},{"location":"integration-guides/key-management/#internal-management","text":"The nano_node software has a built-in private-key manager that is suitable for smaller operations (<1000 accounts). External Key Management allows more powerful and robust systems at the cost of additional complexity. External Key Management is recommended for larger operations.","title":"Internal Management"},{"location":"integration-guides/key-management/#creating-a-wallet","text":"To create an account, you first must create a wallet to hold the seed that will subsequently create the account.","title":"Creating a Wallet"},{"location":"integration-guides/key-management/#recovering-wallet_id","text":"If you lose your WALLET_ID, you can print out all your WALLET_IDs and public addresses in those wallets with the --wallet_list CLI command as follows:","title":"Recovering WALLET_ID"},{"location":"integration-guides/key-management/#backing-up-seed","text":"The following command will print the seed for a given wallet to stdout. Replace ${WALLET_ID} with the WALLET_ID that you would like to display the seed of.","title":"Backing Up Seed"},{"location":"integration-guides/key-management/#restoringchanging-seed","text":"Warning Only change the seed of a wallet that contains no accounts. Changing the seed of a wallet that already has accounts may lead to a false sense of security: accounts are generated by the seed that is currently in the wallet. Generating accounts, then switching the seed and backing up the new seed does not backup the previously generated accounts.","title":"Restoring/Changing Seed"},{"location":"integration-guides/key-management/#account-create","text":"After creating a wallet, it's corresponding WALLET_ID, and backing up the seed (not the wallet_id) , the wallet can be populated with accounts. To create a new account in a wallet use the account_create RPC command:","title":"Account Create"},{"location":"integration-guides/key-management/#bulk-account-create","text":"To generate many accounts in bulk, it is more efficient to create them all at once using the accounts_create RPC command:","title":"Bulk Account Create"},{"location":"integration-guides/key-management/#receiving-funds","text":"As long as the nano_node is synced and unlocked (nano_node locking is not covered in this guide), nano_node automatically creates and signs receive transactions for all accounts in the wallet's internal private-key management system. Tip In the event that a receive is not automatically generated, it can be manually generated using the receive RPC command.","title":"Receiving Funds"},{"location":"integration-guides/key-management/#semi-manual-receiving-funds","text":"If the nano_node does not automatically sign in a pending transaction, transactions can be manually signed in. The easiest way is to explicitly command the nano_node to check all of the accounts in all of its wallets for pending blocks.","title":"Semi-Manual Receiving Funds"},{"location":"integration-guides/key-management/#sending-funds","text":"The send RPC command sends funds from an account in the specified wallet to a destination address.","title":"Sending funds"},{"location":"integration-guides/key-management/#republishing-transactions","text":"It may take a few seconds for the transaction to appear on the Nano Network. If the transaction fails to appear, you may call the republish RPC command with the oldest missing transaction's hash. Account-chains must be continuous and unbroken . If for some reason a transaction fails to properly broadcast, subsequent transactions on the account-chain will not be accepted by the network since the \"previous\" field in the transaction data refers to a block unknown to to other nodes on the network. Tip Republishing the missing transaction(s) will make all the subsequent blocks valid in the network's ledger. Republishing does not create new transactions. The following command rebroadcasts all hashes on an acccount-chain starting at block with hash ${BLOCK_HASH} :","title":"Republishing Transactions"},{"location":"integration-guides/the-basics/","text":"Block Lattice Design \u00b6 Nano's ledger is built on a data-structure called a \"Block Lattice.\" Every account (private/public key pair) has their own blockchain (account-chain). Only the holder of the private key may sign and publish blocks to their own account-chain. Each block represents a transaction. Action Description Send Send funds from users account to another account Receive Receive funds from a given \"Send\" transaction The system is akin to writing (send) and cashing (receive) a Cashier's Check. There are a few things to consider about transactions: The receiving account does not have to be online during the Send transaction. The transaction will stay as pending indefinitely until a Receive transaction is created. Once funds are sent, they cannot be revoked by the sender. Representatives \u00b6 The Nano Network achieves consensus using a variant of the Delegated Proof-of-Stake (DPoS) model. In this setup, representatives (accounts where nano_node with the private keys are running 24/7) vote on the outcome of conflicting transaction. Info Below are some helpful things to remember about Nano's representatives and consensus: A representative's voting power is directly proportional to the amount of funds delegated to that account by other users of the protocol. An account's representative has no bearing on its transactions or nano_node operation. Choosing a representative with good uptime that is also a unique entity (to prevent sybil attacks) helps maintain high Nano network security. If an account's representative goes offline, the account's funds are no longer used to help secure the network; however, the account is unaffected. Anyone that runs a full-time node may be a representative and be delegated voting weight from other users of the protocol. An account can freely change its representative anytime within any transaction or explicitly by publishing a block which only changes the representative (sends no funds), which most wallets support. Proof-of-Work \u00b6 Every Nano transaction contains a small Proof-of-Work (PoW) which is only used as an anti-spam measure. It is not used in the consensus mechanism. Within the Nano Protocol, Proof-of-Work is used only as an anti-spam measure. In general, PoW is the solving of a simple math problem where a solution can only be found by repeatedly guessing and checking. The harder the problem, the more guesses it takes on average to find an answer. Once found, the non-unique solution can then be verified with a single check. This allows computers to prove (on average) that they spent a certain amount of computation power. Info Nano's Proof of Work uses the blake2b cryptographic hash function Calculating Work \u00b6 The \"work\" field in transactions contains a 64-bit nonce found using the blake2b hash function. The nonce satisfies the equation. blake2b(nonce || prev\\_block\\_hash) >= threshold blake2b(nonce || prev\\_block\\_hash) >= threshold Currently the mainnet's threshold is 0xffffffc000000000 . When running a node the work is automatically calculated for you, but options exist for delegating work generation to work peers and allowing GPU acceleration by enabling OpenCL . Info Any random nonce has a 1.49 * 10^{-8} 1.49 * 10^{-8} chance of being a correct solution. This results in an average of 67,108,864 67,108,864 guesses to generate a valid nonce that requires only a single blake2b hash to validate. First Account Block \u00b6 The first block on an account-chain doesn't have a previous (head) block, so a variant of the above equation is used to calculate the \"work\" field: blake2b(nonce || public\\_key) >= threshold blake2b(nonce || public\\_key) >= threshold Account, Key, Seed and Wallet IDs \u00b6 When dealing with the various IDs in the node it is important to understand the function and implication of each one. Similar IDs, Different Functions There are several things that can have a similar form but may have very different functions, and mixing them up can result in loss of funds. Use caution when handling them. Wallet ID \u00b6 This is a series of 32 random bytes of data and is not the seed . It is used in several RPC actions and command line options for the node. It is a purely local UUID that is a reference to a block of data about a specific wallet (set of seed/private keys/info about them) in your node's local database file. The reason this is necessary is because we want to store information about each account in a wallet: whether it's been used, what its account is so we don't have to generate it every time, its balance, etc. Also, so we can hold ad hoc accounts, which are accounts that are not derived from the seed. This identifier is only useful in conjunction with your node's database file and it will not recover funds if that database is lost or corrupted . This is the value that you get back when using the wallet_create etc RPC commands, and what the node expects for RPC commands with a \"wallet\" field as input. Seed \u00b6 This is a series of 32 random bytes of data, usually represented as a 64 character, uppercase hexadecimal string (0-9A-F). This value is used to derive account private keys for accounts by combining it with an index and then putting that into the following hash function where || means concatentation and i is a 32bit unsigned integer: PrivK[i] = blake2b(outLen = 32, input = seed || i) Private keys are derived deterministically from the seed, which means that as long as you put the same seed and index into the derivation function, you will get the same resulting private key every time. Therefore, knowing just the seed allows you to be able to access all the derived private keys from index 0 to 2^32 - 1 (because the index value is a unsigned 32 bit integer). Wallet implementations will commonly start from index 0 and increment it by 1 each time you create a new account so that recovering accounts is as easy as importing the seed and then repeating this account creation process. Account private key \u00b6 This is also a 32 byte value, usually represented as a 64 character, uppercase hexadecimal string(0-9A-F). It can either be random (an ad-hoc key ) or derived from a seed, as described above. This is what represents control of a specific account on the ledger. If you know or can know the private key of someone's account, you can transact as if you own that account. Account public key \u00b6 This is also a 32 byte value, usually represented as a 64 character, uppercase hexadecimal string (0-9A-F). It is derived from an account private key by using the ed25519 curve using blake2b as the hash function (instead of sha). Usually account public keys will not be passed around in this form, rather the below address is used. Account public address \u00b6 This is what you think of as someone's Nano address: it's a string that starts with nano_ (previously xrb_ ), then has 52 characters which are the account public key but encoded with a specific base32 encoding algorithm to prevent human transcription errors by limiting ambiguity between different characters (no O and 0 for example). Then the final 8 characters are a checksum of the account public key to aid in discovering typos, also encoded with the same base32 scheme. So for address nano_1anrzcuwe64rwxzcco8dkhpyxpi8kd7zsjc1oeimpc3ppca4mrjtwnqposrs : Prefix Encoded Account Public Key Checksum nano_ 1anrzcuwe64rwxzcco8dkhpyxpi8kd7zsjc1oeimpc3ppca4mrjt wnqposrs Units \u00b6 Nano can be represented using more than one unit of measurement. While the most common unit is the nano nano , the smallest unit is the raw raw . Below is the formula for converting between raw raw and nano nano . 1 nano = 10^{30} raw 1 nano = 10^{30} raw Important All RPC commands expect units to be represented as raw raw . Always keep units in integer raw raw amounts to prevent any floating-point error or unit confusion. Depending on your implementation language, you may require a big number library to perform arithmetic directly on raw raw . See Distribution and Units page for more details on units. Because final balances are recorded rather than transaction amounts, API calls must be done carefully to avoid loss of funds. Incorrect arithmetic or use of fields may change an intended receive to a send to a non-existent address. Blocks Specifications \u00b6 All new transactions on the Nano Protocol are communicated via blocks. The account's entire state, including the balance after each transaction, is recorded in every block. Transaction amounts are interpreted as the difference in balance between consecutive blocks. If an account balance decreases, the transaction that caused the decrease is considered a send. Similarly, if an account balance increases, the transaction that caused the increase is considered a receive. Important Because final balances are recorded rather than transaction amounts, API calls must be done carefully to avoid sending erroneous amounts. Block Format \u00b6 Because each block contains the current state of the account, the \"type\" of the block is always \"state\" . The following field examples include data types used within RPC calls for building blocks: Key Type Description type Constant \"state\" previous 32-Byte HEX Previous head block on account; 0 if open block link 32-Byte HEX Multipurpose Field - See Link Table below representative String Representative nano_ address account String This account's nano_ address balance Decimal String in raw Resulting balance work 8-Byte HEX Proof of Work Nonce signature 64-Byte HEX ED25519+Blake2b 512-bit signature Depending on the action each transaction intends to perform, the \"link\" field will have a different value for block_create RPC command: Action Type Description Example Change HEX Must be 0 0000000000000000000000000000000000000000000000000000000000000000 Send STR Destination \"nano_\" address nano_1utx843j4hgac1ixbtdygpayqcqho35oy3ufkfp19pj4rdb3sezqt975f8ae Receive HEX Pairing block's hash (block sending funds) F076D8F6254F089A8E66D0C934FA63D927F4458FC1D96815066D83B3658ABA26 Note Any transaction may also simultaneously change the representative. The above description of the \"Change\" action is for creating a block with an explicit representative change where no funds are transferred (balance is not changed). In the completed, signed transaction json, the \"link\" field is always hexadecimal. The first block on an account must be receiving funds (cannot be an explicit representative change). The first block is often referred to as \"opening the account\". Self-Signed Blocks \u00b6 If you choose to implement your own signing, the order of data (in bytes) to hash prior to signing is as follows. All values are binary representations No ASCII/UTF-8 strings. Order of data: block preamble (32-Bytes, value 0x6 ) account (32-Bytes) previous (32-Bytes) representative (32-Bytes) balance (16-Bytes) link (32-Bytes) The digital signing algorithm (which internally applies another Blake2b hashing) is applied on the resulting digest. Private/public key usage Make sure that your private key uses the correct partnering public key while signing as using an incorrect public key may leak information about your private key. Block Creation Examples \u00b6 Read these examples in order to correctly interpret balances and block hashes on the example account-chain. Note All example \"work\" values included in the responses are not valid ( 0000000000000000 ). Receive \u00b6 Scenario Address creates block sending 5 nano nano to nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php Hash of block sending funds is B2EC73C1F503F47E051AD72ECB512C63BA8E1A0ACC2CEE4EA9A22FE1CBDB693F We want to receive the pending 5 nano nano into this new (unopened) account Action Create a block to receive Nano for account: nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php account-chain. Sets nano_3p1asma84n8k84joneka776q4egm5wwru3suho9wjsfyuem8j95b3c78nw8j as the representative. This receives the block hash B2EC73C1F503F47E051AD72ECB512C63BA8E1A0ACC2CEE4EA9A22FE1CBDB693F and because this is the first block on the account, it is considered \"opened\". curl -d '{ \"action\":\"block_create\", \"type\":\"state\", \"previous\":\"FC5A7FB777110A858052468D448B2DF22B648943C097C0608D1E2341007438B0\", \"account\":\"nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php\", \"representative\":\"nano_3p1asma84n8k84joneka776q4egm5wwru3suho9wjsfyuem8j95b3c78nw8j\", \"balance\":\"5000000000000000000000000000000\", \"link\":\"B2EC73C1F503F47E051AD72ECB512C63BA8E1A0ACC2CEE4EA9A22FE1CBDB693F\", \"wallet\":\"557832FF41BAF4860ED4D7023E9ACE74F1427C3F8232B6AFFB491D98DD0EA1A2\" }' http://127.0.0.1:7076 { \"hash\" : \"597395E83BD04DF8EF30AF04234EAAFE0606A883CF4AEAD2DB8196AAF5C4444F\" , \"block\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php\\\",\\n \\\"previous\\\": \\\"FC5A7FB777110A858052468D448B2DF22B648943C097C0608D1E2341007438B0\\\",\\n \\\"representative\\\": \\\"nano_3p1asma84n8k84joneka776q4egm5wwru3suho9wjsfyuem8j95b3c78nw8j\\\",\\n \\\"balance\\\": \\\"5000000000000000000000000000001\\\",\\n \\\"link\\\": \\\"B2EC73C1F503F47E051AD72ECB512C63BA8E1A0ACC2CEE4EA9A22FE1CBDB693F\\\",\\n \\\"link_as_account\\\": \\\"nano_3eqegh1zc1znhr4joosgsfakrrxtjrf1om3exs9cmajhw97xptbzi3kfba1j\\\",\\n \\\"signature\\\": \\\"90CBD62F5466E35DB3BFE5EFDBC6283BD30C0591A3787C9458D11F2AF6188E45E6E71B5F4A8E3598B1C80080D6024867878E355161AD1935CD757477991D3B0B\\\",\\n \\\"work\\\": \\\"0000000000000000\\\"\\n }\\n\" } Info The \"balance\" field is in raw raw format. For more information, see units . Take note of the field \"link_as_account\" . This is if the \"link\" field were to be interpreted as a 256-bit public key and translated into an \"nano_...\" address. This field is only provided for convenience and is stripped away before it is broadcast to the network. If you are creating and signing your own blocks external to nano_node, you do not need to include a \"link_as_account\" field. Send \u00b6 Scenario We want to send from our account nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php . We want to send 2 nano nano to account nano_1q3hqecaw15cjt7thbtxu3pbzr1eihtzzpzxguoc37bj1wc5ffoh7w74gi6p . Response curl -d '{ \"action\":\"block_create\", \"type\":\"state\", \"previous\":\"597395E83BD04DF8EF30AF04234EAAFE0606A883CF4AEAD2DB8196AAF5C4444F\", \"account\":\"nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php\", \"representative\":\"nano_3p1asma84n8k84joneka776q4egm5wwru3suho9wjsfyuem8j95b3c78nw8j\", \"balance\":\"3000000000000000000000000000000\", \"link\":\"nano_1q3hqecaw15cjt7thbtxu3pbzr1eihtzzpzxguoc37bj1wc5ffoh7w74gi6p\", \"wallet\":\"557832FF41BAF4860ED4D7023E9ACE74F1427C3F8232B6AFFB491D98DD0EA1A2\" }' http://127.0.0.1:7076 { \"hash\" : \"128106287002E595F479ACD615C818117FCB3860EC112670557A2467386249D4\" , \"block\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php\\\",\\n \\\"previous\\\": \\\"597395E83BD04DF8EF30AF04234EAAFE0606A883CF4AEAD2DB8196AAF5C4444F\\\",\\n \\\"representative\\\": \\\"nano_3p1asma84n8k84joneka776q4egm5wwru3suho9wjsfyuem8j95b3c78nw8j\\\",\\n \\\"balance\\\": \\\"3000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"5C2FBB148E006A8E8BA7A75DD86C9FE00C83F5FFDBFD76EAA09531071436B6AF\\\",\\n \\\"link_as_account\\\": \\\"nano_1q3hqecaw15cjt7thbtxu3pbzr1eihtzzpzxguoc37bj1wc5ffoh7w74gi6p\\\",\\n \\\"signature\\\": \\\"D7975EE2F6FAE1FC7DA336FB9DD5F7E30FC1A6825021194E614F0588073D1A4901E34E3CAE8739F1DE2FD85A73D2A0B26F8BE6539E0548C9A45E1C1887BFFC05\\\",\\n \\\"work\\\": \\\"0000000000000000\\\"\\n }\\n\" } Info Because the account balance was reduced from 5000000000000000000000000000000 raw raw to 3000000000000000000000000000000 raw raw , the block is interpreted as a send. The \"link\" field is populated with the public key of the account we are sending to. Change \u00b6 Scenario We want to change the representative of our account nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php We want the representative to be nano_1anrzcuwe64rwxzcco8dkhpyxpi8kd7zsjc1oeimpc3ppca4mrjtwnqposrs Response curl -d '{ \"action\":\"block_create\", \"type\":\"state\", \"previous\":\"128106287002E595F479ACD615C818117FCB3860EC112670557A2467386249D4\", \"account\":\"nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php\", \"representative\":\"nano_1anrzcuwe64rwxzcco8dkhpyxpi8kd7zsjc1oeimpc3ppca4mrjtwnqposrs\", \"balance\":\"3000000000000000000000000000000\", \"link\":\"0000000000000000000000000000000000000000000000000000000000000000\", \"wallet\":\"557832FF41BAF4860ED4D7023E9ACE74F1427C3F8232B6AFFB491D98DD0EA1A2\" }' http://127.0.0.1:7076 { \"hash\" : \"2A322FD5ACAF50C057A8CF5200A000CF1193494C79C786B579E0B4A7D10E5A1E\" , \"block\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php\\\",\\n \\\"previous\\\": \\\"128106287002E595F479ACD615C818117FCB3860EC112670557A2467386249D4\\\",\\n \\\"representative\\\": \\\"nano_1anrzcuwe64rwxzcco8dkhpyxpi8kd7zsjc1oeimpc3ppca4mrjtwnqposrs\\\",\\n \\\"balance\\\": \\\"3000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"0000000000000000000000000000000000000000000000000000000000000000\\\",\\n \\\"link_as_account\\\": \\\"nano_1111111111111111111111111111111111111111111111111111hifc8npp\\\",\\n \\\"signature\\\": \\\"7E9A7B368DBEB280B01C22633DC82F6CEF00F529E07B76A0232614D2BCDAF85BF52AC9DA4DBE4468B6F144CE82F2FDE44080C8363F903A6EC3D999252CB1E801\\\",\\n \\\"work\\\": \\\"0000000000000000\\\"\\n }\\n\" } Note Note that the \"\"link\" field is all 0's. As another sanity check, we notice the all 0 public key gets translated into the burn address nano_1111111111111111111111111111111111111111111111111111hifc8npp Change & Send \u00b6 Scenario We want to change our representative at the same time we perform a send or receive of funds. We want to send 2 more nano nano to account nano_1q3hqecaw15cjt7thbtxu3pbzr1eihtzzpzxguoc37bj1wc5ffoh7w74gi6p We want to revert our representative back to nano_3p1asma84n8k84joneka776q4egm5wwru3suho9wjsfyuem8j95b3c78nw8j Response curl -d '{ \"action\":\"block_create\", \"type\":\"state\", \"previous\":\"2A322FD5ACAF50C057A8CF5200A000CF1193494C79C786B579E0B4A7D10E5A1E\", \"account\":\"nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php\", \"representative\":\"nano_3p1asma84n8k84joneka776q4egm5wwru3suho9wjsfyuem8j95b3c78nw8j\", \"balance\":\"1000000000000000000000000000000\", \"link\":\"nano_1q3hqecaw15cjt7thbtxu3pbzr1eihtzzpzxguoc37bj1wc5ffoh7w74gi6p\", \"wallet\":\"557832FF41BAF4860ED4D7023E9ACE74F1427C3F8232B6AFFB491D98DD0EA1A2\" }' http://127.0.0.1:7076 { \"hash\" : \"9664412A834F0C27056C7BC4A363FBAE86DF8EF51341A5A5EA14061727AE519F\" , \"block\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php\\\",\\n \\\"previous\\\": \\\"2A322FD5ACAF50C057A8CF5200A000CF1193494C79C786B579E0B4A7D10E5A1E\\\",\\n \\\"representative\\\": \\\"nano_3p1asma84n8k84joneka776q4egm5wwru3suho9wjsfyuem8j95b3c78nw8j\\\",\\n \\\"balance\\\": \\\"1000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"5C2FBB148E006A8E8BA7A75DD86C9FE00C83F5FFDBFD76EAA09531071436B6AF\\\",\\n \\\"link_as_account\\\": \\\"nano_1q3hqecaw15cjt7thbtxu3pbzr1eihtzzpzxguoc37bj1wc5ffoh7w74gi6p\\\",\\n \\\"signature\\\": \\\"4D388F982188E337D22E0E66CD24BCABD09BED1E920940C453039B55B6A4724D7BD106019AACC1840480938FF4FA024F041E6E6A32B3641C28E0262025020B03\\\",\\n \\\"work\\\": \\\"0000000000000000\\\"\\n }\\n\" } URI and QR Code Standards \u00b6 Note: amount values should always be in RAW. Send to an address \u00b6 nano:nano_<encoded address>[?][amount=<raw amount>][&][label=<label>][&][message=<message>] Just the address nano:nano_3wm37qz19zhei7nzscjcopbrbnnachs4p1gnwo5oroi3qonw6inwgoeuufdp Address and an amount (as RAW) nano:nano_3wm37qz19zhei7nzscjcopbrbnnachs4p1gnwo5oroi3qonw6inwgoeuufdp?amount=1000 Address and a label nano:nano_3wm37qz19zhei7nzscjcopbrbnnachs4p1gnwo5oroi3qonw6inwgoeuufdp?label=Developers%20Fund%20Address Send to an address with amount, label and message nano:nano_3wm37qz19zhei7nzscjcopbrbnnachs4p1gnwo5oroi3qonw6inwgoeuufdp?amount=10&label=Developers%20Fund&message=Donate%20Now Representative change \u00b6 nanorep:nano_<encoded address>[?][label=<label>][&][message=<message>] Change to representative with label and message nanorep:nano_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou?label=Official%20Rep%202&message=Thank%20you%20for%20changing%20your%20representative%21 Private Key Import \u00b6 nanokey:<encoded private key>[?][label=<label>][&][message=<message>] Seed Import \u00b6 nanoseed:<encoded seed>[?][label=<label>][&][message=<message>][&][lastindex=<index>] Process a JSON blob block \u00b6 (to be sent as the block argument to the RPC call process ) nanoblock:<blob>","title":"The Basics"},{"location":"integration-guides/the-basics/#block-lattice-design","text":"Nano's ledger is built on a data-structure called a \"Block Lattice.\" Every account (private/public key pair) has their own blockchain (account-chain). Only the holder of the private key may sign and publish blocks to their own account-chain. Each block represents a transaction. Action Description Send Send funds from users account to another account Receive Receive funds from a given \"Send\" transaction The system is akin to writing (send) and cashing (receive) a Cashier's Check. There are a few things to consider about transactions: The receiving account does not have to be online during the Send transaction. The transaction will stay as pending indefinitely until a Receive transaction is created. Once funds are sent, they cannot be revoked by the sender.","title":"Block Lattice Design"},{"location":"integration-guides/the-basics/#representatives","text":"The Nano Network achieves consensus using a variant of the Delegated Proof-of-Stake (DPoS) model. In this setup, representatives (accounts where nano_node with the private keys are running 24/7) vote on the outcome of conflicting transaction. Info Below are some helpful things to remember about Nano's representatives and consensus: A representative's voting power is directly proportional to the amount of funds delegated to that account by other users of the protocol. An account's representative has no bearing on its transactions or nano_node operation. Choosing a representative with good uptime that is also a unique entity (to prevent sybil attacks) helps maintain high Nano network security. If an account's representative goes offline, the account's funds are no longer used to help secure the network; however, the account is unaffected. Anyone that runs a full-time node may be a representative and be delegated voting weight from other users of the protocol. An account can freely change its representative anytime within any transaction or explicitly by publishing a block which only changes the representative (sends no funds), which most wallets support.","title":"Representatives"},{"location":"integration-guides/the-basics/#proof-of-work","text":"Every Nano transaction contains a small Proof-of-Work (PoW) which is only used as an anti-spam measure. It is not used in the consensus mechanism. Within the Nano Protocol, Proof-of-Work is used only as an anti-spam measure. In general, PoW is the solving of a simple math problem where a solution can only be found by repeatedly guessing and checking. The harder the problem, the more guesses it takes on average to find an answer. Once found, the non-unique solution can then be verified with a single check. This allows computers to prove (on average) that they spent a certain amount of computation power. Info Nano's Proof of Work uses the blake2b cryptographic hash function","title":"Proof-of-Work"},{"location":"integration-guides/the-basics/#calculating-work","text":"The \"work\" field in transactions contains a 64-bit nonce found using the blake2b hash function. The nonce satisfies the equation. blake2b(nonce || prev\\_block\\_hash) >= threshold blake2b(nonce || prev\\_block\\_hash) >= threshold Currently the mainnet's threshold is 0xffffffc000000000 . When running a node the work is automatically calculated for you, but options exist for delegating work generation to work peers and allowing GPU acceleration by enabling OpenCL . Info Any random nonce has a 1.49 * 10^{-8} 1.49 * 10^{-8} chance of being a correct solution. This results in an average of 67,108,864 67,108,864 guesses to generate a valid nonce that requires only a single blake2b hash to validate.","title":"Calculating Work"},{"location":"integration-guides/the-basics/#first-account-block","text":"The first block on an account-chain doesn't have a previous (head) block, so a variant of the above equation is used to calculate the \"work\" field: blake2b(nonce || public\\_key) >= threshold blake2b(nonce || public\\_key) >= threshold","title":"First Account Block"},{"location":"integration-guides/the-basics/#account-key-seed-and-wallet-ids","text":"When dealing with the various IDs in the node it is important to understand the function and implication of each one. Similar IDs, Different Functions There are several things that can have a similar form but may have very different functions, and mixing them up can result in loss of funds. Use caution when handling them.","title":"Account, Key, Seed and Wallet IDs"},{"location":"integration-guides/the-basics/#wallet-id","text":"This is a series of 32 random bytes of data and is not the seed . It is used in several RPC actions and command line options for the node. It is a purely local UUID that is a reference to a block of data about a specific wallet (set of seed/private keys/info about them) in your node's local database file. The reason this is necessary is because we want to store information about each account in a wallet: whether it's been used, what its account is so we don't have to generate it every time, its balance, etc. Also, so we can hold ad hoc accounts, which are accounts that are not derived from the seed. This identifier is only useful in conjunction with your node's database file and it will not recover funds if that database is lost or corrupted . This is the value that you get back when using the wallet_create etc RPC commands, and what the node expects for RPC commands with a \"wallet\" field as input.","title":"Wallet ID"},{"location":"integration-guides/the-basics/#seed","text":"This is a series of 32 random bytes of data, usually represented as a 64 character, uppercase hexadecimal string (0-9A-F). This value is used to derive account private keys for accounts by combining it with an index and then putting that into the following hash function where || means concatentation and i is a 32bit unsigned integer: PrivK[i] = blake2b(outLen = 32, input = seed || i) Private keys are derived deterministically from the seed, which means that as long as you put the same seed and index into the derivation function, you will get the same resulting private key every time. Therefore, knowing just the seed allows you to be able to access all the derived private keys from index 0 to 2^32 - 1 (because the index value is a unsigned 32 bit integer). Wallet implementations will commonly start from index 0 and increment it by 1 each time you create a new account so that recovering accounts is as easy as importing the seed and then repeating this account creation process.","title":"Seed"},{"location":"integration-guides/the-basics/#account-private-key","text":"This is also a 32 byte value, usually represented as a 64 character, uppercase hexadecimal string(0-9A-F). It can either be random (an ad-hoc key ) or derived from a seed, as described above. This is what represents control of a specific account on the ledger. If you know or can know the private key of someone's account, you can transact as if you own that account.","title":"Account private key"},{"location":"integration-guides/the-basics/#account-public-key","text":"This is also a 32 byte value, usually represented as a 64 character, uppercase hexadecimal string (0-9A-F). It is derived from an account private key by using the ed25519 curve using blake2b as the hash function (instead of sha). Usually account public keys will not be passed around in this form, rather the below address is used.","title":"Account public key"},{"location":"integration-guides/the-basics/#account-public-address","text":"This is what you think of as someone's Nano address: it's a string that starts with nano_ (previously xrb_ ), then has 52 characters which are the account public key but encoded with a specific base32 encoding algorithm to prevent human transcription errors by limiting ambiguity between different characters (no O and 0 for example). Then the final 8 characters are a checksum of the account public key to aid in discovering typos, also encoded with the same base32 scheme. So for address nano_1anrzcuwe64rwxzcco8dkhpyxpi8kd7zsjc1oeimpc3ppca4mrjtwnqposrs : Prefix Encoded Account Public Key Checksum nano_ 1anrzcuwe64rwxzcco8dkhpyxpi8kd7zsjc1oeimpc3ppca4mrjt wnqposrs","title":"Account public address"},{"location":"integration-guides/the-basics/#units","text":"Nano can be represented using more than one unit of measurement. While the most common unit is the nano nano , the smallest unit is the raw raw . Below is the formula for converting between raw raw and nano nano . 1 nano = 10^{30} raw 1 nano = 10^{30} raw Important All RPC commands expect units to be represented as raw raw . Always keep units in integer raw raw amounts to prevent any floating-point error or unit confusion. Depending on your implementation language, you may require a big number library to perform arithmetic directly on raw raw . See Distribution and Units page for more details on units. Because final balances are recorded rather than transaction amounts, API calls must be done carefully to avoid loss of funds. Incorrect arithmetic or use of fields may change an intended receive to a send to a non-existent address.","title":"Units"},{"location":"integration-guides/the-basics/#blocks-specifications","text":"All new transactions on the Nano Protocol are communicated via blocks. The account's entire state, including the balance after each transaction, is recorded in every block. Transaction amounts are interpreted as the difference in balance between consecutive blocks. If an account balance decreases, the transaction that caused the decrease is considered a send. Similarly, if an account balance increases, the transaction that caused the increase is considered a receive. Important Because final balances are recorded rather than transaction amounts, API calls must be done carefully to avoid sending erroneous amounts.","title":"Blocks Specifications"},{"location":"integration-guides/the-basics/#block-format","text":"Because each block contains the current state of the account, the \"type\" of the block is always \"state\" . The following field examples include data types used within RPC calls for building blocks: Key Type Description type Constant \"state\" previous 32-Byte HEX Previous head block on account; 0 if open block link 32-Byte HEX Multipurpose Field - See Link Table below representative String Representative nano_ address account String This account's nano_ address balance Decimal String in raw Resulting balance work 8-Byte HEX Proof of Work Nonce signature 64-Byte HEX ED25519+Blake2b 512-bit signature Depending on the action each transaction intends to perform, the \"link\" field will have a different value for block_create RPC command: Action Type Description Example Change HEX Must be 0 0000000000000000000000000000000000000000000000000000000000000000 Send STR Destination \"nano_\" address nano_1utx843j4hgac1ixbtdygpayqcqho35oy3ufkfp19pj4rdb3sezqt975f8ae Receive HEX Pairing block's hash (block sending funds) F076D8F6254F089A8E66D0C934FA63D927F4458FC1D96815066D83B3658ABA26 Note Any transaction may also simultaneously change the representative. The above description of the \"Change\" action is for creating a block with an explicit representative change where no funds are transferred (balance is not changed). In the completed, signed transaction json, the \"link\" field is always hexadecimal. The first block on an account must be receiving funds (cannot be an explicit representative change). The first block is often referred to as \"opening the account\".","title":"Block Format"},{"location":"integration-guides/the-basics/#self-signed-blocks","text":"If you choose to implement your own signing, the order of data (in bytes) to hash prior to signing is as follows. All values are binary representations No ASCII/UTF-8 strings. Order of data: block preamble (32-Bytes, value 0x6 ) account (32-Bytes) previous (32-Bytes) representative (32-Bytes) balance (16-Bytes) link (32-Bytes) The digital signing algorithm (which internally applies another Blake2b hashing) is applied on the resulting digest. Private/public key usage Make sure that your private key uses the correct partnering public key while signing as using an incorrect public key may leak information about your private key.","title":"Self-Signed Blocks"},{"location":"integration-guides/the-basics/#block-creation-examples","text":"Read these examples in order to correctly interpret balances and block hashes on the example account-chain. Note All example \"work\" values included in the responses are not valid ( 0000000000000000 ).","title":"Block Creation Examples"},{"location":"integration-guides/the-basics/#receive","text":"Scenario Address creates block sending 5 nano nano to nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php Hash of block sending funds is B2EC73C1F503F47E051AD72ECB512C63BA8E1A0ACC2CEE4EA9A22FE1CBDB693F We want to receive the pending 5 nano nano into this new (unopened) account Action Create a block to receive Nano for account: nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php account-chain. Sets nano_3p1asma84n8k84joneka776q4egm5wwru3suho9wjsfyuem8j95b3c78nw8j as the representative. This receives the block hash B2EC73C1F503F47E051AD72ECB512C63BA8E1A0ACC2CEE4EA9A22FE1CBDB693F and because this is the first block on the account, it is considered \"opened\". curl -d '{ \"action\":\"block_create\", \"type\":\"state\", \"previous\":\"FC5A7FB777110A858052468D448B2DF22B648943C097C0608D1E2341007438B0\", \"account\":\"nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php\", \"representative\":\"nano_3p1asma84n8k84joneka776q4egm5wwru3suho9wjsfyuem8j95b3c78nw8j\", \"balance\":\"5000000000000000000000000000000\", \"link\":\"B2EC73C1F503F47E051AD72ECB512C63BA8E1A0ACC2CEE4EA9A22FE1CBDB693F\", \"wallet\":\"557832FF41BAF4860ED4D7023E9ACE74F1427C3F8232B6AFFB491D98DD0EA1A2\" }' http://127.0.0.1:7076 { \"hash\" : \"597395E83BD04DF8EF30AF04234EAAFE0606A883CF4AEAD2DB8196AAF5C4444F\" , \"block\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php\\\",\\n \\\"previous\\\": \\\"FC5A7FB777110A858052468D448B2DF22B648943C097C0608D1E2341007438B0\\\",\\n \\\"representative\\\": \\\"nano_3p1asma84n8k84joneka776q4egm5wwru3suho9wjsfyuem8j95b3c78nw8j\\\",\\n \\\"balance\\\": \\\"5000000000000000000000000000001\\\",\\n \\\"link\\\": \\\"B2EC73C1F503F47E051AD72ECB512C63BA8E1A0ACC2CEE4EA9A22FE1CBDB693F\\\",\\n \\\"link_as_account\\\": \\\"nano_3eqegh1zc1znhr4joosgsfakrrxtjrf1om3exs9cmajhw97xptbzi3kfba1j\\\",\\n \\\"signature\\\": \\\"90CBD62F5466E35DB3BFE5EFDBC6283BD30C0591A3787C9458D11F2AF6188E45E6E71B5F4A8E3598B1C80080D6024867878E355161AD1935CD757477991D3B0B\\\",\\n \\\"work\\\": \\\"0000000000000000\\\"\\n }\\n\" } Info The \"balance\" field is in raw raw format. For more information, see units . Take note of the field \"link_as_account\" . This is if the \"link\" field were to be interpreted as a 256-bit public key and translated into an \"nano_...\" address. This field is only provided for convenience and is stripped away before it is broadcast to the network. If you are creating and signing your own blocks external to nano_node, you do not need to include a \"link_as_account\" field.","title":"Receive"},{"location":"integration-guides/the-basics/#send","text":"Scenario We want to send from our account nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php . We want to send 2 nano nano to account nano_1q3hqecaw15cjt7thbtxu3pbzr1eihtzzpzxguoc37bj1wc5ffoh7w74gi6p . Response curl -d '{ \"action\":\"block_create\", \"type\":\"state\", \"previous\":\"597395E83BD04DF8EF30AF04234EAAFE0606A883CF4AEAD2DB8196AAF5C4444F\", \"account\":\"nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php\", \"representative\":\"nano_3p1asma84n8k84joneka776q4egm5wwru3suho9wjsfyuem8j95b3c78nw8j\", \"balance\":\"3000000000000000000000000000000\", \"link\":\"nano_1q3hqecaw15cjt7thbtxu3pbzr1eihtzzpzxguoc37bj1wc5ffoh7w74gi6p\", \"wallet\":\"557832FF41BAF4860ED4D7023E9ACE74F1427C3F8232B6AFFB491D98DD0EA1A2\" }' http://127.0.0.1:7076 { \"hash\" : \"128106287002E595F479ACD615C818117FCB3860EC112670557A2467386249D4\" , \"block\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php\\\",\\n \\\"previous\\\": \\\"597395E83BD04DF8EF30AF04234EAAFE0606A883CF4AEAD2DB8196AAF5C4444F\\\",\\n \\\"representative\\\": \\\"nano_3p1asma84n8k84joneka776q4egm5wwru3suho9wjsfyuem8j95b3c78nw8j\\\",\\n \\\"balance\\\": \\\"3000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"5C2FBB148E006A8E8BA7A75DD86C9FE00C83F5FFDBFD76EAA09531071436B6AF\\\",\\n \\\"link_as_account\\\": \\\"nano_1q3hqecaw15cjt7thbtxu3pbzr1eihtzzpzxguoc37bj1wc5ffoh7w74gi6p\\\",\\n \\\"signature\\\": \\\"D7975EE2F6FAE1FC7DA336FB9DD5F7E30FC1A6825021194E614F0588073D1A4901E34E3CAE8739F1DE2FD85A73D2A0B26F8BE6539E0548C9A45E1C1887BFFC05\\\",\\n \\\"work\\\": \\\"0000000000000000\\\"\\n }\\n\" } Info Because the account balance was reduced from 5000000000000000000000000000000 raw raw to 3000000000000000000000000000000 raw raw , the block is interpreted as a send. The \"link\" field is populated with the public key of the account we are sending to.","title":"Send"},{"location":"integration-guides/the-basics/#change","text":"Scenario We want to change the representative of our account nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php We want the representative to be nano_1anrzcuwe64rwxzcco8dkhpyxpi8kd7zsjc1oeimpc3ppca4mrjtwnqposrs Response curl -d '{ \"action\":\"block_create\", \"type\":\"state\", \"previous\":\"128106287002E595F479ACD615C818117FCB3860EC112670557A2467386249D4\", \"account\":\"nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php\", \"representative\":\"nano_1anrzcuwe64rwxzcco8dkhpyxpi8kd7zsjc1oeimpc3ppca4mrjtwnqposrs\", \"balance\":\"3000000000000000000000000000000\", \"link\":\"0000000000000000000000000000000000000000000000000000000000000000\", \"wallet\":\"557832FF41BAF4860ED4D7023E9ACE74F1427C3F8232B6AFFB491D98DD0EA1A2\" }' http://127.0.0.1:7076 { \"hash\" : \"2A322FD5ACAF50C057A8CF5200A000CF1193494C79C786B579E0B4A7D10E5A1E\" , \"block\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php\\\",\\n \\\"previous\\\": \\\"128106287002E595F479ACD615C818117FCB3860EC112670557A2467386249D4\\\",\\n \\\"representative\\\": \\\"nano_1anrzcuwe64rwxzcco8dkhpyxpi8kd7zsjc1oeimpc3ppca4mrjtwnqposrs\\\",\\n \\\"balance\\\": \\\"3000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"0000000000000000000000000000000000000000000000000000000000000000\\\",\\n \\\"link_as_account\\\": \\\"nano_1111111111111111111111111111111111111111111111111111hifc8npp\\\",\\n \\\"signature\\\": \\\"7E9A7B368DBEB280B01C22633DC82F6CEF00F529E07B76A0232614D2BCDAF85BF52AC9DA4DBE4468B6F144CE82F2FDE44080C8363F903A6EC3D999252CB1E801\\\",\\n \\\"work\\\": \\\"0000000000000000\\\"\\n }\\n\" } Note Note that the \"\"link\" field is all 0's. As another sanity check, we notice the all 0 public key gets translated into the burn address nano_1111111111111111111111111111111111111111111111111111hifc8npp","title":"Change"},{"location":"integration-guides/the-basics/#change-send","text":"Scenario We want to change our representative at the same time we perform a send or receive of funds. We want to send 2 more nano nano to account nano_1q3hqecaw15cjt7thbtxu3pbzr1eihtzzpzxguoc37bj1wc5ffoh7w74gi6p We want to revert our representative back to nano_3p1asma84n8k84joneka776q4egm5wwru3suho9wjsfyuem8j95b3c78nw8j Response curl -d '{ \"action\":\"block_create\", \"type\":\"state\", \"previous\":\"2A322FD5ACAF50C057A8CF5200A000CF1193494C79C786B579E0B4A7D10E5A1E\", \"account\":\"nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php\", \"representative\":\"nano_3p1asma84n8k84joneka776q4egm5wwru3suho9wjsfyuem8j95b3c78nw8j\", \"balance\":\"1000000000000000000000000000000\", \"link\":\"nano_1q3hqecaw15cjt7thbtxu3pbzr1eihtzzpzxguoc37bj1wc5ffoh7w74gi6p\", \"wallet\":\"557832FF41BAF4860ED4D7023E9ACE74F1427C3F8232B6AFFB491D98DD0EA1A2\" }' http://127.0.0.1:7076 { \"hash\" : \"9664412A834F0C27056C7BC4A363FBAE86DF8EF51341A5A5EA14061727AE519F\" , \"block\" : \"{\\n \\\"type\\\": \\\"state\\\",\\n \\\"account\\\": \\\"nano_3igf8hd4sjshoibbbkeitmgkp1o6ug4xads43j6e4gqkj5xk5o83j8ja9php\\\",\\n \\\"previous\\\": \\\"2A322FD5ACAF50C057A8CF5200A000CF1193494C79C786B579E0B4A7D10E5A1E\\\",\\n \\\"representative\\\": \\\"nano_3p1asma84n8k84joneka776q4egm5wwru3suho9wjsfyuem8j95b3c78nw8j\\\",\\n \\\"balance\\\": \\\"1000000000000000000000000000000\\\",\\n \\\"link\\\": \\\"5C2FBB148E006A8E8BA7A75DD86C9FE00C83F5FFDBFD76EAA09531071436B6AF\\\",\\n \\\"link_as_account\\\": \\\"nano_1q3hqecaw15cjt7thbtxu3pbzr1eihtzzpzxguoc37bj1wc5ffoh7w74gi6p\\\",\\n \\\"signature\\\": \\\"4D388F982188E337D22E0E66CD24BCABD09BED1E920940C453039B55B6A4724D7BD106019AACC1840480938FF4FA024F041E6E6A32B3641C28E0262025020B03\\\",\\n \\\"work\\\": \\\"0000000000000000\\\"\\n }\\n\" }","title":"Change &amp; Send"},{"location":"integration-guides/the-basics/#uri-and-qr-code-standards","text":"Note: amount values should always be in RAW.","title":"URI and QR Code Standards"},{"location":"integration-guides/the-basics/#send-to-an-address","text":"nano:nano_<encoded address>[?][amount=<raw amount>][&][label=<label>][&][message=<message>] Just the address nano:nano_3wm37qz19zhei7nzscjcopbrbnnachs4p1gnwo5oroi3qonw6inwgoeuufdp Address and an amount (as RAW) nano:nano_3wm37qz19zhei7nzscjcopbrbnnachs4p1gnwo5oroi3qonw6inwgoeuufdp?amount=1000 Address and a label nano:nano_3wm37qz19zhei7nzscjcopbrbnnachs4p1gnwo5oroi3qonw6inwgoeuufdp?label=Developers%20Fund%20Address Send to an address with amount, label and message nano:nano_3wm37qz19zhei7nzscjcopbrbnnachs4p1gnwo5oroi3qonw6inwgoeuufdp?amount=10&label=Developers%20Fund&message=Donate%20Now","title":"Send to an address"},{"location":"integration-guides/the-basics/#representative-change","text":"nanorep:nano_<encoded address>[?][label=<label>][&][message=<message>] Change to representative with label and message nanorep:nano_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou?label=Official%20Rep%202&message=Thank%20you%20for%20changing%20your%20representative%21","title":"Representative change"},{"location":"integration-guides/the-basics/#private-key-import","text":"nanokey:<encoded private key>[?][label=<label>][&][message=<message>]","title":"Private Key Import"},{"location":"integration-guides/the-basics/#seed-import","text":"nanoseed:<encoded seed>[?][label=<label>][&][message=<message>][&][lastindex=<index>]","title":"Seed Import"},{"location":"integration-guides/the-basics/#process-a-json-blob-block","text":"(to be sent as the block argument to the RPC call process ) nanoblock:<blob>","title":"Process a JSON blob block"},{"location":"protocol-design/distribution-and-units/","text":"Distribution and Units \u00b6 Divisibility \u00b6 There are three important aspects of divisibility of the supply which are satisfied by the final distributed amount: The supply needs to be able to be divided up amongst a large number of users with users possibly wanting several accounts. Each account needs to be able to represent an adequate dynamic range of value. The supply should be able to deal with deflation over time as accounts are abandoned. Distribution \u00b6 The distribution of Nano (formerly RaiBlocks) was performed through solving manual captchas starting in late 2015 and ending in October 2017. Distribution stopped after ~39% of the Genesis amount was distributed and the rest of the supply was burnt. 1 Distribution Accounts Genesis : nano_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3 Landing : nano_13ezf4od79h1tgj9aiu4djzcmmguendtjfuhwfukhuucboua8cpoihmh8byo Faucet : nano_35jjmmmh81kydepzeuf9oec8hzkay7msr6yxagzxpcht7thwa5bus5tomgz9 Burn : nano_1111111111111111111111111111111111111111111111111111hifc8npp During distribution the Genesis seed was kept in cold storage and funds were moved to the Landing account once per week to minimize the number of live, undistributed blocks. These were subsequently moved into the Faucet account for distribution until the faucet was closed and remaining funds sent to the Burn account. Total Supply With 2^128 - 1 Nano in the original Genesis account, upon closing of the faucet the total supply which is 100% in circulation ended at 133,248,290.903662 Nano . Unit Dividers \u00b6 A 128 bit integer is used to represent account balances. A set of SI prefixes was used to make the numbers more accessible and avoid confusion. The reference wallet uses Mnano (or NANO/Nano) as a divider. Name SI Prefix Integer Power Gnano 1000000000000000000000000000000000 10^33 NANO/Nano Mnano 1000000000000000000000000000000 10^30 knano 1000000000000000000000000000 10^27 nano 1000000000000000000000000 10^24 mnano 1000000000000000000000 10^21 unano 1000000000000000000 10^18 raw 1 10^0 1 raw is the smallest possible division and NANO/Nano (Mnano) is the current standard division used in most wallets, on exchanges, etc. https://medium.com/nanocurrency/the-nano-faucet-c99e18ae1202 \u21a9","title":"Distribution and Units"},{"location":"protocol-design/distribution-and-units/#distribution-and-units","text":"","title":"Distribution and Units"},{"location":"protocol-design/distribution-and-units/#divisibility","text":"There are three important aspects of divisibility of the supply which are satisfied by the final distributed amount: The supply needs to be able to be divided up amongst a large number of users with users possibly wanting several accounts. Each account needs to be able to represent an adequate dynamic range of value. The supply should be able to deal with deflation over time as accounts are abandoned.","title":"Divisibility"},{"location":"protocol-design/distribution-and-units/#distribution","text":"The distribution of Nano (formerly RaiBlocks) was performed through solving manual captchas starting in late 2015 and ending in October 2017. Distribution stopped after ~39% of the Genesis amount was distributed and the rest of the supply was burnt. 1 Distribution Accounts Genesis : nano_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3 Landing : nano_13ezf4od79h1tgj9aiu4djzcmmguendtjfuhwfukhuucboua8cpoihmh8byo Faucet : nano_35jjmmmh81kydepzeuf9oec8hzkay7msr6yxagzxpcht7thwa5bus5tomgz9 Burn : nano_1111111111111111111111111111111111111111111111111111hifc8npp During distribution the Genesis seed was kept in cold storage and funds were moved to the Landing account once per week to minimize the number of live, undistributed blocks. These were subsequently moved into the Faucet account for distribution until the faucet was closed and remaining funds sent to the Burn account. Total Supply With 2^128 - 1 Nano in the original Genesis account, upon closing of the faucet the total supply which is 100% in circulation ended at 133,248,290.903662 Nano .","title":"Distribution"},{"location":"protocol-design/distribution-and-units/#unit-dividers","text":"A 128 bit integer is used to represent account balances. A set of SI prefixes was used to make the numbers more accessible and avoid confusion. The reference wallet uses Mnano (or NANO/Nano) as a divider. Name SI Prefix Integer Power Gnano 1000000000000000000000000000000000 10^33 NANO/Nano Mnano 1000000000000000000000000000000 10^30 knano 1000000000000000000000000000 10^27 nano 1000000000000000000000000 10^24 mnano 1000000000000000000000 10^21 unano 1000000000000000000 10^18 raw 1 10^0 1 raw is the smallest possible division and NANO/Nano (Mnano) is the current standard division used in most wallets, on exchanges, etc. https://medium.com/nanocurrency/the-nano-faucet-c99e18ae1202 \u21a9","title":"Unit Dividers"},{"location":"protocol-design/network-attacks/","text":"Nano has a number of mechanisms built in to protect from a range of possible attacks on the system. Here we go over all attacks there could be on the system and what safeguards are in place. Block gap synchronization \u00b6 Risk Low risk Impacts Network amplify, denial of service Description Each block has a link to its previous block. If a new block arrives where we can't find the previous block, this leaves the node deciding whether it's out of sync or if someone is sending junk data. If a node is out of sync, synchronizing involves a TCP connection to a node that offers bootstrapping which is much more traffic than sending a single UDP packet containing a block; this is a network amplification attack. Defense For blocks with no previous link, nodes will wait until a certain threshold of votes have been observed before initiating a connection to a bootstrap node to synchronize. If a block doesn't receive enough votes it can be assumed to be junk data. Transaction flooding \u00b6 Risk Moderate Impacts High I/O Description Transaction flooding is simply sending as many valid transactions as possible in order to saturate the network. Usually an attacker will send transactions to other accounts they control so it can be continued indefinitely. Defense Each block has a small amount of work associated with it, around 5 seconds to generate and 1 microsecond to validate. This work difference causes an attacker to dedicate a large amount to sustain an attack while wasting a small amount of resources by everyone else. Nodes that are not full historical nodes are able to prune old transactions from their chain, this clamps the storage usage from this type of attack for almost all users. Sybil attack to change ledger entries \u00b6 Risk None Impacts Completely destructive Description A Sybil attack is a person creating a lot of nodes on the network, possibly thousands on a single machine, in order to get a disproportionate vote on networks where each node gets an equal vote. Defense The Nano voting system is weighted based on account balance. Adding extra nodes in to the network will not gain an attacker extra votes. Penny-spend attack \u00b6 Risk Moderate Impacts Ledger bloat Description A penny-spend attack is where an attacker spends infinitesimal quantities to a large number of accounts in order to waste the storage resources of nodes. Defense Blocks publishing is rate-limited by work so this limits accounts to a certain extent. Nodes that are not full historical nodes can prune accounts below a statistical metric where the account is probably not a valid account. Finally, Nano is tuned to use minimal permanent storage space so space required to store one additional account is proportional to the size of one block + indexing ~ 96b + 32b ~ 128b. This equates to 1GB being able to store 8 million penny-spend account. If nodes want to be aggressive, they can calculate a distribution based on access frequency and delegate infrequently used accounts to slower storage. >50% attack \u00b6 Risk Low Impacts Completely destructive Description The metric of consensus for Nano is a balance weighted voting system. If an attacker is able to gain over 50% of the voting strength, they can cause the network to oscillate their decisions rendering the system useless. An attacker must have at least some value tied up in the network as a balance which they're willing to forfeit as an expense to performing this type of attack since this attack ruins the integrity of the system. An attacker is able to lower the amount of balance they must forfeit by preventing good nodes from voting through a network DDOS. Defense There are multiple levels of defense against this type of attack: Primary defense : voting weight being tied to investment in the system; attempting to flip the ledger would be destructive to the system as a whole which would destroy their investment. Secondary defense : cost of this attack is proportional to the market cap of all of Nano. In proof of work systems, technology can be invented that gives disproportionate control compared to monetary investment and if the attack is successful, this technology could be repurposed after the attack is complete. With Nano the cost of attacking the system scales with the system and if an attack were to be successful the cost of the attack can't be recovered. Tertiary defense : In order to maintain the maximum quorum of voters, the next line of defense is representative voting. Account holders who are unable to reliably participate in voting for connectivity reasons can name a representative who can vote with the weight of their balance. Forks in Nano are never accidental so nodes can make policy decisions on how to interact with forked blocks. The only time non-attacker accounts are vulnerable to block forks is if they receive a balance from an attacking account. Accounts wanting to be secure from block forks can wait a little or a lot longer before receiving from an account who generated forks or opt to never receive at all. Receivers could also generate separate accounts for receiving from dubious accounts in order to protect the rest of their balance. A final line of defense that has not yet been implemented is block cementing. Nano goes to great efforts to get block forks to settle quickly via voting. Nodes could be configured to cement blocks after a certain period of time, possibly a few minutes, which would prevent them from being rolled back. More research has to be done to figure out of this policy would be beneficial and what type of parameters would be the best. More than likely the network is sufficiently secured through focusing on fast settling time. The most sophisticated version of a >50% attack is detailed in the diagram below. \"Offline\" is the percentage of representatives who have been named but are not online to vote. \"Stake\" is the amount of investment the attacker is voting with and will be lost if they successfully attack the system. \"Active\" are representatives that are online and voting according to the protocol. An attacker can offset the amount of stake they must forfeit by knocking other voters offline via a network denial of service attack. If this attack can be sustained, the representatives being attacked will become unsynchronized and this is demonstrated by \"Unsynced\". Finally, an attacker can gain a short burst in relative voting strength by switching their denial of service attack to a new set of representatives while the old set is resynchronizing their ledger, this is demonstrated by \"Attacked\". If an attacker is able to cause Stake > Active by a combination of these circumstances, they would be able to successfully flip votes on the ledger at the expense of their stake. We can estimate how much this type of attack could cost by examining the market cap of other systems. If we estimate 33% of representatives are offline or attacked via denial of service, an attacker would need to purchase 33% of the market cap in order to attack the system via voting. Voting attack cost: Euro - M1 in 2014 ~6 trillion, attack amount 2 trillion USD - M0 in 2014 ~4 trillion, attack amount 1.2 trillion UK pound sterling - M0 in 2007 ~1.5 trillion, attack amount 500 billion Bitcoin - Market cap 2014 ~3 billion, attack amount 1 billion Bootstrap poisoning \u00b6 Risk Low Impacts New-user denial of service Description The longer an attacker is able to hold an old private key with a balance, the higher the probability of balances that existed at that time no longer having representatives that are participating in voting because their balances or representatives have transferred to new people. This means if a node is bootstrapped to an old representation of the network where the attacker has a quorum of voting stake compare to representatives at that point in time, they would be able to oscillate voting decisions to that node. If this new user wanted to interact with anyone besides the attacking node all of their transactions would be denied since they have different head blocks. The net result is nodes can waste the time of new nodes in the network by feeding them bad information. Defense Nodes can be paired with an initial database of accounts and known-good block heads; this is a replacement for downloading the database all the way back to the genesis block. The closer the download is to be current, the higher the probability of accurately defending against this attack. In the end this attack is probably no worse than feeding junk data to nodes while bootstrapping since they wouldn't be able to transact with anyone who has a contemporary database.","title":"Network Attacks"},{"location":"protocol-design/network-attacks/#block-gap-synchronization","text":"Risk Low risk Impacts Network amplify, denial of service Description Each block has a link to its previous block. If a new block arrives where we can't find the previous block, this leaves the node deciding whether it's out of sync or if someone is sending junk data. If a node is out of sync, synchronizing involves a TCP connection to a node that offers bootstrapping which is much more traffic than sending a single UDP packet containing a block; this is a network amplification attack. Defense For blocks with no previous link, nodes will wait until a certain threshold of votes have been observed before initiating a connection to a bootstrap node to synchronize. If a block doesn't receive enough votes it can be assumed to be junk data.","title":"Block gap synchronization"},{"location":"protocol-design/network-attacks/#transaction-flooding","text":"Risk Moderate Impacts High I/O Description Transaction flooding is simply sending as many valid transactions as possible in order to saturate the network. Usually an attacker will send transactions to other accounts they control so it can be continued indefinitely. Defense Each block has a small amount of work associated with it, around 5 seconds to generate and 1 microsecond to validate. This work difference causes an attacker to dedicate a large amount to sustain an attack while wasting a small amount of resources by everyone else. Nodes that are not full historical nodes are able to prune old transactions from their chain, this clamps the storage usage from this type of attack for almost all users.","title":"Transaction flooding"},{"location":"protocol-design/network-attacks/#sybil-attack-to-change-ledger-entries","text":"Risk None Impacts Completely destructive Description A Sybil attack is a person creating a lot of nodes on the network, possibly thousands on a single machine, in order to get a disproportionate vote on networks where each node gets an equal vote. Defense The Nano voting system is weighted based on account balance. Adding extra nodes in to the network will not gain an attacker extra votes.","title":"Sybil attack to change ledger entries"},{"location":"protocol-design/network-attacks/#penny-spend-attack","text":"Risk Moderate Impacts Ledger bloat Description A penny-spend attack is where an attacker spends infinitesimal quantities to a large number of accounts in order to waste the storage resources of nodes. Defense Blocks publishing is rate-limited by work so this limits accounts to a certain extent. Nodes that are not full historical nodes can prune accounts below a statistical metric where the account is probably not a valid account. Finally, Nano is tuned to use minimal permanent storage space so space required to store one additional account is proportional to the size of one block + indexing ~ 96b + 32b ~ 128b. This equates to 1GB being able to store 8 million penny-spend account. If nodes want to be aggressive, they can calculate a distribution based on access frequency and delegate infrequently used accounts to slower storage.","title":"Penny-spend attack"},{"location":"protocol-design/network-attacks/#50-attack","text":"Risk Low Impacts Completely destructive Description The metric of consensus for Nano is a balance weighted voting system. If an attacker is able to gain over 50% of the voting strength, they can cause the network to oscillate their decisions rendering the system useless. An attacker must have at least some value tied up in the network as a balance which they're willing to forfeit as an expense to performing this type of attack since this attack ruins the integrity of the system. An attacker is able to lower the amount of balance they must forfeit by preventing good nodes from voting through a network DDOS. Defense There are multiple levels of defense against this type of attack: Primary defense : voting weight being tied to investment in the system; attempting to flip the ledger would be destructive to the system as a whole which would destroy their investment. Secondary defense : cost of this attack is proportional to the market cap of all of Nano. In proof of work systems, technology can be invented that gives disproportionate control compared to monetary investment and if the attack is successful, this technology could be repurposed after the attack is complete. With Nano the cost of attacking the system scales with the system and if an attack were to be successful the cost of the attack can't be recovered. Tertiary defense : In order to maintain the maximum quorum of voters, the next line of defense is representative voting. Account holders who are unable to reliably participate in voting for connectivity reasons can name a representative who can vote with the weight of their balance. Forks in Nano are never accidental so nodes can make policy decisions on how to interact with forked blocks. The only time non-attacker accounts are vulnerable to block forks is if they receive a balance from an attacking account. Accounts wanting to be secure from block forks can wait a little or a lot longer before receiving from an account who generated forks or opt to never receive at all. Receivers could also generate separate accounts for receiving from dubious accounts in order to protect the rest of their balance. A final line of defense that has not yet been implemented is block cementing. Nano goes to great efforts to get block forks to settle quickly via voting. Nodes could be configured to cement blocks after a certain period of time, possibly a few minutes, which would prevent them from being rolled back. More research has to be done to figure out of this policy would be beneficial and what type of parameters would be the best. More than likely the network is sufficiently secured through focusing on fast settling time. The most sophisticated version of a >50% attack is detailed in the diagram below. \"Offline\" is the percentage of representatives who have been named but are not online to vote. \"Stake\" is the amount of investment the attacker is voting with and will be lost if they successfully attack the system. \"Active\" are representatives that are online and voting according to the protocol. An attacker can offset the amount of stake they must forfeit by knocking other voters offline via a network denial of service attack. If this attack can be sustained, the representatives being attacked will become unsynchronized and this is demonstrated by \"Unsynced\". Finally, an attacker can gain a short burst in relative voting strength by switching their denial of service attack to a new set of representatives while the old set is resynchronizing their ledger, this is demonstrated by \"Attacked\". If an attacker is able to cause Stake > Active by a combination of these circumstances, they would be able to successfully flip votes on the ledger at the expense of their stake. We can estimate how much this type of attack could cost by examining the market cap of other systems. If we estimate 33% of representatives are offline or attacked via denial of service, an attacker would need to purchase 33% of the market cap in order to attack the system via voting. Voting attack cost: Euro - M1 in 2014 ~6 trillion, attack amount 2 trillion USD - M0 in 2014 ~4 trillion, attack amount 1.2 trillion UK pound sterling - M0 in 2007 ~1.5 trillion, attack amount 500 billion Bitcoin - Market cap 2014 ~3 billion, attack amount 1 billion","title":"&gt;50% attack"},{"location":"protocol-design/network-attacks/#bootstrap-poisoning","text":"Risk Low Impacts New-user denial of service Description The longer an attacker is able to hold an old private key with a balance, the higher the probability of balances that existed at that time no longer having representatives that are participating in voting because their balances or representatives have transferred to new people. This means if a node is bootstrapped to an old representation of the network where the attacker has a quorum of voting stake compare to representatives at that point in time, they would be able to oscillate voting decisions to that node. If this new user wanted to interact with anyone besides the attacking node all of their transactions would be denied since they have different head blocks. The net result is nodes can waste the time of new nodes in the network by feeding them bad information. Defense Nodes can be paired with an initial database of accounts and known-good block heads; this is a replacement for downloading the database all the way back to the genesis block. The closer the download is to be current, the higher the probability of accurately defending against this attack. In the end this attack is probably no worse than feeding junk data to nodes while bootstrapping since they wouldn't be able to transact with anyone who has a contemporary database.","title":"Bootstrap poisoning"},{"location":"protocol-design/networking/","text":"UDP and TCP messages \u00b6 Nano is designed to use the minimum amount of computing resources possible by communicating via stateless messages that fit within a single UDP packet. UDP is used for traffic on the live network while connections via TCP are leveraged for bulk data transfer on the bootstrap network . Network Details \u00b6 Port Type Default Details 7075 UDP Enabled Primary node activity port Port configurable in config.json:node/peering_port Binds to all adapters, unicast Contents: Raw nano protocol datagrams All standard ledger activity goes through this port If blocked the node will not function 7075 TCP Enabled Node bootstrapping server Share port configuration in config.json:node/peering_port Binds to all adapters, unicast Contents: Raw nano protocol stream Transmits the ledger to new nodes in bulk If blocked other nodes will not be able retrieve the ledger from this node 7076 TCP Disabled RPC server Port configurable in config.json:rpc/port Enable in config.json:rpc_enable Binds to localhost by default for security reasons, configurable in config.json:rpc/address , unicast Contents: Unencrypted HTTP requests containing JSON object bodies Allows the node to be queried or controlled through HTTP requests If blocked the node will not be able to be queried or controlled by HTTP IPV4/IPV6 addressing \u00b6 The system is built to only operate on IPv6 and uses IPv4-mapped IPv6 addresses to connect to IPv4 hosts.","title":"Networking"},{"location":"protocol-design/networking/#udp-and-tcp-messages","text":"Nano is designed to use the minimum amount of computing resources possible by communicating via stateless messages that fit within a single UDP packet. UDP is used for traffic on the live network while connections via TCP are leveraged for bulk data transfer on the bootstrap network .","title":"UDP and TCP messages"},{"location":"protocol-design/networking/#network-details","text":"Port Type Default Details 7075 UDP Enabled Primary node activity port Port configurable in config.json:node/peering_port Binds to all adapters, unicast Contents: Raw nano protocol datagrams All standard ledger activity goes through this port If blocked the node will not function 7075 TCP Enabled Node bootstrapping server Share port configuration in config.json:node/peering_port Binds to all adapters, unicast Contents: Raw nano protocol stream Transmits the ledger to new nodes in bulk If blocked other nodes will not be able retrieve the ledger from this node 7076 TCP Disabled RPC server Port configurable in config.json:rpc/port Enable in config.json:rpc_enable Binds to localhost by default for security reasons, configurable in config.json:rpc/address , unicast Contents: Unencrypted HTTP requests containing JSON object bodies Allows the node to be queried or controlled through HTTP requests If blocked the node will not be able to be queried or controlled by HTTP","title":"Network Details"},{"location":"protocol-design/networking/#ipv4ipv6-addressing","text":"The system is built to only operate on IPv6 and uses IPv4-mapped IPv6 addresses to connect to IPv4 hosts.","title":"IPV4/IPV6 addressing"},{"location":"protocol-design/overview/","text":"Protocol Design Overview \u00b6 The Nano protocol is a complex piece of software aiming at a simple, singular goal: transfer value as efficiently as possible. Doing so on a network that is decentralized for the long-term involves many moving parts. Below are some detailed explanations of various pieces of the protocol intended for advanced developers and those with deep knowledge of the network. Contributing to the code If you are interested in helping develop the C++ based Nano node we will help you out! Check out our details on contributing code to the Nano node to get started. Feature Details \u00b6 Feature Description Distribution and Units Original distribution details and Nano unit breakdowns Networking Details about the network protocols nodes use to communicate with peers Network Attacks Explanation of some of the potential attack vectors on the Nano network Signing, Hashing and Key Derivation Details of the algorithms and functions used for these activities Contributing code to the Nano node \u00b6 About the code base \u00b6 Nano is written in C++14 and supports Linux, macOS and Windows. Libraries We use Boost to help us write efficient cross platform code, including the async IO library for networking (asio). Make sure you have the correct Boost version installed. Submodules Name Details cryptopp Provides the implementation for blake2, AES and other cryptographic schemes. phc\u2011winner\u2011argon2 When encrypting with AES, the password first goes through key derivation, and argon2 is our hash of choice for doing that. lmdb The database library used for the ledger and wallet, with local patches for Windows. This is a very fast and portable key/value store with ordered keys. It is extremely resilient to crashes in the program, OS, and power-downs without corruption. miniupnp This library is used to do port mapping if the gateway supports it. Qt Wallet To build the GUI, set the NANO_GUI flag in cmake. The desktop wallet uses Qt5, but without the MOC compiler. Hence, you cannot use the signals and slots mechanism. The majority of the Qt wallet code resides in the qt subproject, while the QApplication startup code resides in nano_wallet . Using CMake CMake is used to generate build files and project files for various IDE's. Please familiarize yourself with basic cmake usage, such as how to change cache variables via the command line, ccmake or CMake GUI. This is much more convenient that editing the CMakeLists.txt file directly. Find out more about building in Integration Guides Build Options . Testing \u00b6 Add tests If you add new functionality, adding unit tests to avoid regressions in the future is required. The easiest way to get started writing your first test is to base it off one of the existing tests. You'll find these in the core_test directory. Make sure the NANO_TEST cache variable in cmake is set. You should also switch the ACTIVE_NETWORK variable to nano_test_network. Run tests before creating a pull request Please run the tests before submitting a PR. Go to the build directory and run the core_test binary. If you get a lot of failures, such as frontier_req.begin failing, make sure ACTIVE_NETWORK is set to nano_test_network GitHub collaboration \u00b6 Communication is the key to working together efficiently. A good way to get in touch with the developers is to join the #development channel on Discord . If you have an idea of an improvement or new feature, consider discussing it first with the team, either on Discord, or by adding an issue. Maybe someone is already working on it, or have suggestions on how to improve on the idea. Security Vulnerability Disclosure Do NOT discuss potential security vulnerabilities on the issue tracker, public forums or open discussion channels If you discover a bug you believe to pose a security risk to the Nano network, please contact bugs@nano.org with a proof of concept with full details of the bug including: Repository of the bug High-level summary Detailed description Steps to reproduce Supporting material/references The potential security impact of the bug Code Process \u00b6 Fork and do all your work on a branch Nano prefers the standard GitHub workflow. You create a fork of the Nano repository, make branches for features/issues, and commit and push these. Create pull requests Before: Review your code locally. Have you followed the guidelines in this document? Run tests. Did you consider adding a test case for your feature? Run ASAN and TSAN to detect memory or threading bugs Commit and push your fork Create pull request on the upstream repository: Make sure you add a description that clearly describes the purpose of the PR. If the PR solves one or more issues, please reference these in the description. After: Check that CI completes successfully. If not, fix the problem and push an update. Respond to comments and reviews in a timely fashion. Resolve conflicts If time passes between your pull request (PR) submission and the team accepting it, merge conflicts may occur due to activity on master, such as merging other PR's before yours. In order for your PR to be accepted, you must resolve these conflicts. The preferred process is to rebase your changes, resolve any conflicts, and push your changes again. 2 3 Check out your branch git fetch upstream git rebase upstream/master Resolve conflicts in your favorite editor git add {filename} git rebase --continue Commit and push your branch Consider squashing or amending commits In the review process, you're likely to get feedback. You'll commit and push more changes, get more feedback, etc. This can lead to a messy git history, and can make stuff like bisecting harder. Once your PR is OK'ed, please squash the commits into a one. 4 Note that you can also update the last commit with git commit --amend . Say your last commit had a typo. Instead of committing and having to squash it later, simply commit with amend and push the branch. Code standard \u00b6 Formatting \u00b6 clang-format is used to enforce most of the formatting rules, such as: Tabs for indentation. Open braces go on new lines. Space before open parenthesis. Space after comma. Please run ci/clang-format-all.sh before pushing your code to ensure that the formatting is good. If you want to do formatting from the IDE, chances are there's a plugin available. The definition file .clang-format is located in the project root directory. Make sure you set up your editor to use tabs. Use tabs for indentation, and spaces for alignment 5 . That way, you can use any tab size you want in your favorite editor, but the code will still look good for people with different settings. Coding guidelines \u00b6 Use auto type inference for local variables if it's clear from the context what the type will be. Use your best judgement, sometimes adding explicit types can increase readability 1 Handle exceptions, including IO exceptions for file and network operations. Be liberal with assert . Use asserts to check invariants, not potential runtime errors, which should be handled gracefully. Asserts are for detecting bugs, not error handling. Be liberal with BOOST_LOG statements, except in performance critical paths. Add comments to explain complex and subtle situations, but avoid comments that reiterates what the code already says. Use RAII and C++11 smart pointers to manage memory and other resources. Performance and scalabiliy considerations \u00b6 When making changes, think about performance and scalability. Pick good data structures and think about algorithmic complexity. For small data sets, std::vector should be your to-go container, as a linear scan through contiguous memory is often faster than any alternative. Nested loops yield quadratic behavior - is there an alternative? A typical example is removing an inner lookup loop with a map. Make sure your change doesn't conflict with the scalability characteristics described in the white paper. Security \u00b6 Your code will be reviewed with security in mind, but please do your part before creating a pull request: Familiarize yourself with best practices for writing secure C++ code. In particular: Consult https://wiki.sei.cmu.edu/confluence/display/cplusplus Avoid using ANSI C functions. Many of these are prone to buffer overruns. Avoid using C strings and direct buffer manipulation. Use static analysis tools, such as valgrind, XCode instrumentation, linters and sanitizers. These tools are also great for debugging crashes and performance problems. General tips for contributors \u00b6 Read the white paper Peruse the code and don't be shy about asking questions if there are parts you don't understand. Make sure you understand the GitHub workflow. Participate in the community by reading and replying to GitHub issues, Reddit posts and tweets. This gives you a great insight into the pain points that exists with the software. http://www.acodersjourney.com/2016/02/c-11-auto/ \u21a9 https://help.github.com/articles/resolving-merge-conflicts-after-a-git-rebase/ \u21a9 https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/ \u21a9 https://github.com/todotxt/todo.txt-android/wiki/Squash-All-Commits-Related-to-a-Single-Issue-into-a-Single-Commit \u21a9 https://dmitryfrank.com/articles/indent_with_tabs_align_with_spaces \u21a9","title":"Overview"},{"location":"protocol-design/overview/#protocol-design-overview","text":"The Nano protocol is a complex piece of software aiming at a simple, singular goal: transfer value as efficiently as possible. Doing so on a network that is decentralized for the long-term involves many moving parts. Below are some detailed explanations of various pieces of the protocol intended for advanced developers and those with deep knowledge of the network. Contributing to the code If you are interested in helping develop the C++ based Nano node we will help you out! Check out our details on contributing code to the Nano node to get started.","title":"Protocol Design Overview"},{"location":"protocol-design/overview/#feature-details","text":"Feature Description Distribution and Units Original distribution details and Nano unit breakdowns Networking Details about the network protocols nodes use to communicate with peers Network Attacks Explanation of some of the potential attack vectors on the Nano network Signing, Hashing and Key Derivation Details of the algorithms and functions used for these activities","title":"Feature Details"},{"location":"protocol-design/overview/#contributing-code-to-the-nano-node","text":"","title":"Contributing code to the Nano node"},{"location":"protocol-design/overview/#about-the-code-base","text":"Nano is written in C++14 and supports Linux, macOS and Windows. Libraries We use Boost to help us write efficient cross platform code, including the async IO library for networking (asio). Make sure you have the correct Boost version installed. Submodules Name Details cryptopp Provides the implementation for blake2, AES and other cryptographic schemes. phc\u2011winner\u2011argon2 When encrypting with AES, the password first goes through key derivation, and argon2 is our hash of choice for doing that. lmdb The database library used for the ledger and wallet, with local patches for Windows. This is a very fast and portable key/value store with ordered keys. It is extremely resilient to crashes in the program, OS, and power-downs without corruption. miniupnp This library is used to do port mapping if the gateway supports it. Qt Wallet To build the GUI, set the NANO_GUI flag in cmake. The desktop wallet uses Qt5, but without the MOC compiler. Hence, you cannot use the signals and slots mechanism. The majority of the Qt wallet code resides in the qt subproject, while the QApplication startup code resides in nano_wallet . Using CMake CMake is used to generate build files and project files for various IDE's. Please familiarize yourself with basic cmake usage, such as how to change cache variables via the command line, ccmake or CMake GUI. This is much more convenient that editing the CMakeLists.txt file directly. Find out more about building in Integration Guides Build Options .","title":"About the code base"},{"location":"protocol-design/overview/#testing","text":"Add tests If you add new functionality, adding unit tests to avoid regressions in the future is required. The easiest way to get started writing your first test is to base it off one of the existing tests. You'll find these in the core_test directory. Make sure the NANO_TEST cache variable in cmake is set. You should also switch the ACTIVE_NETWORK variable to nano_test_network. Run tests before creating a pull request Please run the tests before submitting a PR. Go to the build directory and run the core_test binary. If you get a lot of failures, such as frontier_req.begin failing, make sure ACTIVE_NETWORK is set to nano_test_network","title":"Testing"},{"location":"protocol-design/overview/#github-collaboration","text":"Communication is the key to working together efficiently. A good way to get in touch with the developers is to join the #development channel on Discord . If you have an idea of an improvement or new feature, consider discussing it first with the team, either on Discord, or by adding an issue. Maybe someone is already working on it, or have suggestions on how to improve on the idea. Security Vulnerability Disclosure Do NOT discuss potential security vulnerabilities on the issue tracker, public forums or open discussion channels If you discover a bug you believe to pose a security risk to the Nano network, please contact bugs@nano.org with a proof of concept with full details of the bug including: Repository of the bug High-level summary Detailed description Steps to reproduce Supporting material/references The potential security impact of the bug","title":"GitHub collaboration"},{"location":"protocol-design/overview/#code-process","text":"","title":"Code Process"},{"location":"protocol-design/overview/#code-standard","text":"","title":"Code standard"},{"location":"protocol-design/overview/#formatting","text":"clang-format is used to enforce most of the formatting rules, such as: Tabs for indentation. Open braces go on new lines. Space before open parenthesis. Space after comma. Please run ci/clang-format-all.sh before pushing your code to ensure that the formatting is good. If you want to do formatting from the IDE, chances are there's a plugin available. The definition file .clang-format is located in the project root directory. Make sure you set up your editor to use tabs. Use tabs for indentation, and spaces for alignment 5 . That way, you can use any tab size you want in your favorite editor, but the code will still look good for people with different settings.","title":"Formatting"},{"location":"protocol-design/overview/#coding-guidelines","text":"Use auto type inference for local variables if it's clear from the context what the type will be. Use your best judgement, sometimes adding explicit types can increase readability 1 Handle exceptions, including IO exceptions for file and network operations. Be liberal with assert . Use asserts to check invariants, not potential runtime errors, which should be handled gracefully. Asserts are for detecting bugs, not error handling. Be liberal with BOOST_LOG statements, except in performance critical paths. Add comments to explain complex and subtle situations, but avoid comments that reiterates what the code already says. Use RAII and C++11 smart pointers to manage memory and other resources.","title":"Coding guidelines"},{"location":"protocol-design/overview/#performance-and-scalabiliy-considerations","text":"When making changes, think about performance and scalability. Pick good data structures and think about algorithmic complexity. For small data sets, std::vector should be your to-go container, as a linear scan through contiguous memory is often faster than any alternative. Nested loops yield quadratic behavior - is there an alternative? A typical example is removing an inner lookup loop with a map. Make sure your change doesn't conflict with the scalability characteristics described in the white paper.","title":"Performance and scalabiliy considerations"},{"location":"protocol-design/overview/#security","text":"Your code will be reviewed with security in mind, but please do your part before creating a pull request: Familiarize yourself with best practices for writing secure C++ code. In particular: Consult https://wiki.sei.cmu.edu/confluence/display/cplusplus Avoid using ANSI C functions. Many of these are prone to buffer overruns. Avoid using C strings and direct buffer manipulation. Use static analysis tools, such as valgrind, XCode instrumentation, linters and sanitizers. These tools are also great for debugging crashes and performance problems.","title":"Security"},{"location":"protocol-design/overview/#general-tips-for-contributors","text":"Read the white paper Peruse the code and don't be shy about asking questions if there are parts you don't understand. Make sure you understand the GitHub workflow. Participate in the community by reading and replying to GitHub issues, Reddit posts and tweets. This gives you a great insight into the pain points that exists with the software. http://www.acodersjourney.com/2016/02/c-11-auto/ \u21a9 https://help.github.com/articles/resolving-merge-conflicts-after-a-git-rebase/ \u21a9 https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/ \u21a9 https://github.com/todotxt/todo.txt-android/wiki/Squash-All-Commits-Related-to-a-Single-Issue-into-a-Single-Commit \u21a9 https://dmitryfrank.com/articles/indent_with_tabs_align_with_spaces \u21a9","title":"General tips for contributors"},{"location":"protocol-design/signing-hashing-and-key-derivation/","text":"Signing algorithm: ED25519 \u00b6 ED25519 is an elliptic curve algorithm developed in an academic setting with a focus on security from side channel attack, performance, and fixing a lot of the little annoyances in most elliptic curve systems 1 . However, it should be noted that instead of using SHA-512 in the key derivation function, Nano uses Blake2b. Incorrect, SHA-512 has been used 0000000000000000000000000000000000000000000000000000000000000000 -> 3B6A27BCCEB6A42D62A3A8D02A6F0D73653215771DE243A63AC048A18B59DA29 Correct, Blake2b digested the seed 0000000000000000000000000000000000000000000000000000000000000000 -> 19D3D919475DEED4696B5D13018151D1AF88B2BD3BCFF048B45031C1F36D1858 Hashing algorithm: Blake2 \u00b6 Compared to existing cryptocurrencies, the hash algorithm chosen is much less important since it's not being used in a Proof-of-Work context. In Nano hashing is used purely as a digest algorithm against block contents. Blake2 is a highly optimized cryptographic hash function whose predecessor was a SHA3 finalist. 2 Key derivation function: Argon2 \u00b6 The key derivation function of Argon2 is used for securing the account keys in the reference wallet. 3 http://ed25519.cr.yp.to/ \u21a9 https://blake2.net/ \u21a9 https://en.wikipedia.org/wiki/Argon2 \u21a9","title":"Signing, Hashing and Key Derivation"},{"location":"protocol-design/signing-hashing-and-key-derivation/#signing-algorithm-ed25519","text":"ED25519 is an elliptic curve algorithm developed in an academic setting with a focus on security from side channel attack, performance, and fixing a lot of the little annoyances in most elliptic curve systems 1 . However, it should be noted that instead of using SHA-512 in the key derivation function, Nano uses Blake2b. Incorrect, SHA-512 has been used 0000000000000000000000000000000000000000000000000000000000000000 -> 3B6A27BCCEB6A42D62A3A8D02A6F0D73653215771DE243A63AC048A18B59DA29 Correct, Blake2b digested the seed 0000000000000000000000000000000000000000000000000000000000000000 -> 19D3D919475DEED4696B5D13018151D1AF88B2BD3BCFF048B45031C1F36D1858","title":"Signing algorithm: ED25519"},{"location":"protocol-design/signing-hashing-and-key-derivation/#hashing-algorithm-blake2","text":"Compared to existing cryptocurrencies, the hash algorithm chosen is much less important since it's not being used in a Proof-of-Work context. In Nano hashing is used purely as a digest algorithm against block contents. Blake2 is a highly optimized cryptographic hash function whose predecessor was a SHA3 finalist. 2","title":"Hashing algorithm: Blake2"},{"location":"protocol-design/signing-hashing-and-key-derivation/#key-derivation-function-argon2","text":"The key derivation function of Argon2 is used for securing the account keys in the reference wallet. 3 http://ed25519.cr.yp.to/ \u21a9 https://blake2.net/ \u21a9 https://en.wikipedia.org/wiki/Argon2 \u21a9","title":"Key derivation function: Argon2"},{"location":"releases/node-releases/","text":"Updates to the Nano protocol are done through major node releases, occurring approximately every 1 to 4 months, and necessary patch releases in between. As changes are made to the protocol over time, newer node versions will stop peering with older versions. Details on which versions are actively peering, supported and being developed are included below. Current Release \u00b6 The following release is the latest and only release actively supported by the Nano Foundation. This release and the Active Releases below represent the only node versions that will participate on the main network. Node Version Protocol Version Release Date GitHub Links 18.0 16 2019-02-21 Release - Milestone - Changelog Next Planned Release \u00b6 The following release is currently under development. Details about potential features to be included can be found on the Upcoming Features page . Node Version Protocol Version Release Date GitHub Milestone 19.0 17 TBD Release - Milestone - Changelog Active Releases \u00b6 The following older releases can still actively participate on the network with other nodes of the same and newer versions. Node Version Protocol Version Release Date GitHub Links 17.1 15 2018-12-21 Release - Milestone - Changelog 17.0 15 2018-12-18 Release - Milestone - Changelog 16.3 14 2018-11-20 Release - Milestone - Changelog 16.2 14 2018-10-11 Release - Milestone - Changelog 16.1 14 2018-09-29 Release - Milestone - Changelog 16.0 14 2018-09-11 Release - Milestone - Changelog 15.2 13 2018-08-22 Release - Milestone - Changelog 15.1 13 2018-08-20 Release - Milestone - Changelog 15.0 13 2018-08-20 Release - Milestone - Changelog Inactive Releases \u00b6 The following versions are no longer peered with by nodes running the active versions above and will not work properly communicate if run on the network. The details below are for historical purposes only. Node Version Protocol Version Release Date GitHub Milestone 14.2 11 2018-06-21 Release - Changelog 14.1 10 2018-06-11 Release - Changelog 14.0 10 2018-06-11 Release - Changelog 13.0 9 2018-05-10 Release - Changelog 12.1 8 2018-04-21 Release - Changelog 12.0 8 2018-04-18 Release - Changelog 11.2 7 2018-04-04 Release - Changelog 11.1 7 2018-03-29 Release - Changelog 11.0 7 2018-03-23 Release - Changelog 10.0 6 2018-02-15 Release - Changelog","title":"Node Releases"},{"location":"releases/node-releases/#current-release","text":"The following release is the latest and only release actively supported by the Nano Foundation. This release and the Active Releases below represent the only node versions that will participate on the main network. Node Version Protocol Version Release Date GitHub Links 18.0 16 2019-02-21 Release - Milestone - Changelog","title":"Current Release"},{"location":"releases/node-releases/#next-planned-release","text":"The following release is currently under development. Details about potential features to be included can be found on the Upcoming Features page . Node Version Protocol Version Release Date GitHub Milestone 19.0 17 TBD Release - Milestone - Changelog","title":"Next Planned Release"},{"location":"releases/node-releases/#active-releases","text":"The following older releases can still actively participate on the network with other nodes of the same and newer versions. Node Version Protocol Version Release Date GitHub Links 17.1 15 2018-12-21 Release - Milestone - Changelog 17.0 15 2018-12-18 Release - Milestone - Changelog 16.3 14 2018-11-20 Release - Milestone - Changelog 16.2 14 2018-10-11 Release - Milestone - Changelog 16.1 14 2018-09-29 Release - Milestone - Changelog 16.0 14 2018-09-11 Release - Milestone - Changelog 15.2 13 2018-08-22 Release - Milestone - Changelog 15.1 13 2018-08-20 Release - Milestone - Changelog 15.0 13 2018-08-20 Release - Milestone - Changelog","title":"Active Releases"},{"location":"releases/node-releases/#inactive-releases","text":"The following versions are no longer peered with by nodes running the active versions above and will not work properly communicate if run on the network. The details below are for historical purposes only. Node Version Protocol Version Release Date GitHub Milestone 14.2 11 2018-06-21 Release - Changelog 14.1 10 2018-06-11 Release - Changelog 14.0 10 2018-06-11 Release - Changelog 13.0 9 2018-05-10 Release - Changelog 12.1 8 2018-04-21 Release - Changelog 12.0 8 2018-04-18 Release - Changelog 11.2 7 2018-04-04 Release - Changelog 11.1 7 2018-03-29 Release - Changelog 11.0 7 2018-03-23 Release - Changelog 10.0 6 2018-02-15 Release - Changelog","title":"Inactive Releases"},{"location":"releases/roadmap/","text":"Nano's mission is to become a global currency built on a secure, decentralized network. This document represents the current areas that are being pursued by the Nano Foundation in the interest of achieving this vision. Adoption \u00b6 Global Markets Status Chinese Community Hub Nanochina.co Launched (Nov. 11 2018) Huobi Launched (Oct. 31 st 2018) Bitinka Launched (Jul. 10 th 2018) Binance Launched (Feb. 2 nd 2018) OKEx Launched (Feb. 1 st 2018) Nanex Launched (Jan. 31 st 2018) KuCoin Launched (Jan. 5 th 2018) Recruiting community managers to work alongside the core team to use social media platforms to provide users information about Nano Website redesign and whitepaper updates followed by translations Summary Nano has seen impressive levels of adoption across every market that has been targeted. Significant opportunity remains as these markets only represent a small fraction of Nano's target demographic. Nano's marketing efforts will expand with a focus towards global markets. By concentrating on building out Asian and South American-focused communities and information hubs, the ground floor for additional marketing can be set. Once completed, increased exposure can be gained through merchant adoption as well as marketing. Additionally, the team will continue to contact and engage with exchanges around the world about listing Nano. Benefits Global markets are currently limited. A presence in every geographical region is a low-hanging fruit for increased adoption Community Meetups and Hackathons Throw our own and enable the community to host Nano meetups and hackathons Region-centric communities and community managers Provide a resource for non-English speakers to research and communicate about Nano Merchant Services Status Merchants have already begun to accept Nano with a variety of exciting solutions available A horizontally scalable cloud infrastructure for merchants, exchanges, and financial service providers enters initial infrastructure prototype review Summary Nano will continue to work with leading cloud-providers, industry leaders, and top developer talent to deploy the technologies that will allow the Nano Currency to achieve its mission. Vendors, exchanges, and other Nano service providers will benefit from turn-key, \"plug & pay\", horizontally scalable cloud network infrastructure. Nano has brought in some of the best developers in the industry to spearhead and deploy solutions. Benefits Vendors will benefit from having instantly useable & scalable architecture to handle any needs they may have Vendors running full-time nodes will act as Representatives, serving as a vehicle to further decentralize the Nano Network Professional support & services may be provided to merchants to make deployment simple and painless Exchanges will also benefit and will be able to utilize these services as a completely scalable backend solution Challenges Nano must be able to adapt to any vendor need and use-case. Flexible solutions which are truly \"plug & pay\" must be available and reliable. Merchants must feel safe using Nano as a currency and believe in the reliability of the network and infrastructure Merchants must have a line of support to aid them in the safe implementation of a system & network that will work for them Extensive review & audit is required to ensure the total security and reliability of the network at every level Point of Sale Status Nano \"Plug & Pay\" Point-of-Sale Platform for vendor & mobile terminals enters alpha testing Summary Nano's zero-fee & ultrafast transactions provide vendors with huge cost savings over traditional value exchange solutions. Even in our early stage of deployment, Nano has seen an impressive wave of adoption validating the purpose of Nano as a global currency. Nano's Core Team has been hard at work developing turn-key merchant point-of-sale solutions. A multi-focused approach targeting vendors of every level from mobile to brick-and-mortar will be uniquely catered to. Benefits Point-of-Sale provides a gateway to drive increased adoption and acceptance among merchants & service providers globally Partnering with businesses across the world to bring these solutions to our users will greatly increase Nano Currency's visibility to mainstream markets & consumers A truly decentralized, \"BYOD\" (Bring Your Own Device) solution for instantaneous P2P Payments without transaction fees for the vendor or consumer Challenges Point-of-Sale must integrate with current hardware and terminals on the market today Nano must be accepted by vendors with every budget and need. Whether brick-and-mortar, mobile, or other unique use-cases - Nano must be the simplest choice Nano POS software will be needed to make integrating Nano on any POS terminal simple Standard and secure payment methods must be provided which integrate with todays POS & payment solutions (Hardware Wallets, Mobile Wallets) Fiat On-Ramp Status Fiat on-ramps are now available with base pairs including USD, EUR and GBP. Continuing to seek out and add additional gateways to provide easy access to Nano for users across the globe. Current exchanges can be found here Summary In order to become a truly global currency, obtaining and using Nano must be simple and secure for anyone worldwide Directly transferring Nano between any currency is critical. Fiat on-ramps (exchanging USD, BRL, EUR, JPY, KRW, etc) must be simple and intuitive for users of any technical level Nano will continually work with our growing network of partners, vendors, and community to drive this goal forward. Due to the nature of these negotiations, ongoing status of these efforts may be limited Benefits Merchants will benefit from the ability to exchange Nano with any fiat currency instantly Users will be less intimidated as the technical barriers are removed and anyone can easily begin using Nano Due to Nano having zero transaction fees, exchange of value between any parties - regardless of transaction size - has the potential to open opportunities for worldwide commerce once it can be obtained by anyone in seconds Challenges Fiat on-ramp options are currently limited and often only handle a single fiat currency Legal and regulatory restrictions exist in some regions that must be considered User experience must be held to the highest standard across the entire process. Every party must be held to the highest expectations & compliance. Experience \u00b6 Developer Documentation Status Documentation can be found at https://docs.nano.org Summary Nano's developer mission is to enable anyone, anywhere to easily build on top of the Nano Currency. Developers are already building solutions that highlight the many benefits Nano provides. In an effort to support these efforts, it is important that anyone interested in implementing Nano can do so quickly and reliably. To that end, Nano's current goals focus on the following: Simple, well-written developer documentation Code examples, reference implementations and applications Continuously maintained Benefits More developers building on top of Nano More merchants integrating Nano into their businesses Challenges Documentation must be continually maintained as the protocol and RPC evolve Documentation must be written in a way that makes each function easy to understand Documentation should be made available in as many languages as possible Integration Guides Status Integration and Node operation guides can be found at https://docs.nano.org/integration-guides/the-basics/ Summary Decentralized networks must include easy to follow guides in order to successfully integrate the technology. This includes both exchange and node integration, which will be detailed in-depth for best practices setup, and merchant integration to begin accepting Nano as a payment option. Additionally, nodes should be optimized for ease of use. Users who wish to act as a voting representative will have easy to follow instructions on setting up, operating and maintaining their node. Integrating with Nano should be quick, painless, and extremely reliable regardless of the users unique needs. Exchanges, merchants, and general users will be provided with solutions for their specific needs. Benefits Exchange integration guides will make it easier than ever for exchanges to offer & support the Nano Currency Nano will be able to be listed by an exchange by following the best practices guide for integration. The core team will offer support but it should move to a hands-off approach in the future. Explore a new API similar to Bitcoin and Ethereum for easier exchange integration and maintenance Protocol \u00b6 See the Upcoming Features page for more details on future node and protocol features. Wallets \u00b6 Hardware Wallets Status * Ledger Nano S integration completed (6/11/18) Jolt Hardware wallet development announced (5/31/18) Ledger Nano S integration enters code review (04/22/18) Summary Hardware wallets offer users secure offline storage for their digital currencies. The Nano Team is working with industry leaders to provide multiple hardware storage solutions to the community. Benefits Hardware wallets provide the peace of mind and security consumers expect from their currency of choice Investors can store hardware wallets in secure locations like safes and safety deposit boxes, offline, where they can be assured their funds are safe Financial services, institutional investors, vendors, and consumers will all have a secure way to manage & store their funds Challenges Solutions must be available to users of every technical level or needs Inexpensive solutions must be made available so that users have a secure way of storing Nano regardless of their total balance Desktop Wallets Status Desktop Wallet released by the Nano Wallet Company (7/15/18) Summary As part of the effort to bring user-friendly, secure wallets to users, the Nano Core team is building a new desktop wallet experience. While all features may not be available at launch, plans include adding the following benefits over time. Benefits \"Bootstrap\" process will be streamlined Friendly user-experience for users of any level A secure experience for sharing accounts across multiple devices QR codes for quickly transferring Nano between accounts","title":"Roadmap"},{"location":"releases/roadmap/#adoption","text":"Global Markets Status Chinese Community Hub Nanochina.co Launched (Nov. 11 2018) Huobi Launched (Oct. 31 st 2018) Bitinka Launched (Jul. 10 th 2018) Binance Launched (Feb. 2 nd 2018) OKEx Launched (Feb. 1 st 2018) Nanex Launched (Jan. 31 st 2018) KuCoin Launched (Jan. 5 th 2018) Recruiting community managers to work alongside the core team to use social media platforms to provide users information about Nano Website redesign and whitepaper updates followed by translations Summary Nano has seen impressive levels of adoption across every market that has been targeted. Significant opportunity remains as these markets only represent a small fraction of Nano's target demographic. Nano's marketing efforts will expand with a focus towards global markets. By concentrating on building out Asian and South American-focused communities and information hubs, the ground floor for additional marketing can be set. Once completed, increased exposure can be gained through merchant adoption as well as marketing. Additionally, the team will continue to contact and engage with exchanges around the world about listing Nano. Benefits Global markets are currently limited. A presence in every geographical region is a low-hanging fruit for increased adoption Community Meetups and Hackathons Throw our own and enable the community to host Nano meetups and hackathons Region-centric communities and community managers Provide a resource for non-English speakers to research and communicate about Nano Merchant Services Status Merchants have already begun to accept Nano with a variety of exciting solutions available A horizontally scalable cloud infrastructure for merchants, exchanges, and financial service providers enters initial infrastructure prototype review Summary Nano will continue to work with leading cloud-providers, industry leaders, and top developer talent to deploy the technologies that will allow the Nano Currency to achieve its mission. Vendors, exchanges, and other Nano service providers will benefit from turn-key, \"plug & pay\", horizontally scalable cloud network infrastructure. Nano has brought in some of the best developers in the industry to spearhead and deploy solutions. Benefits Vendors will benefit from having instantly useable & scalable architecture to handle any needs they may have Vendors running full-time nodes will act as Representatives, serving as a vehicle to further decentralize the Nano Network Professional support & services may be provided to merchants to make deployment simple and painless Exchanges will also benefit and will be able to utilize these services as a completely scalable backend solution Challenges Nano must be able to adapt to any vendor need and use-case. Flexible solutions which are truly \"plug & pay\" must be available and reliable. Merchants must feel safe using Nano as a currency and believe in the reliability of the network and infrastructure Merchants must have a line of support to aid them in the safe implementation of a system & network that will work for them Extensive review & audit is required to ensure the total security and reliability of the network at every level Point of Sale Status Nano \"Plug & Pay\" Point-of-Sale Platform for vendor & mobile terminals enters alpha testing Summary Nano's zero-fee & ultrafast transactions provide vendors with huge cost savings over traditional value exchange solutions. Even in our early stage of deployment, Nano has seen an impressive wave of adoption validating the purpose of Nano as a global currency. Nano's Core Team has been hard at work developing turn-key merchant point-of-sale solutions. A multi-focused approach targeting vendors of every level from mobile to brick-and-mortar will be uniquely catered to. Benefits Point-of-Sale provides a gateway to drive increased adoption and acceptance among merchants & service providers globally Partnering with businesses across the world to bring these solutions to our users will greatly increase Nano Currency's visibility to mainstream markets & consumers A truly decentralized, \"BYOD\" (Bring Your Own Device) solution for instantaneous P2P Payments without transaction fees for the vendor or consumer Challenges Point-of-Sale must integrate with current hardware and terminals on the market today Nano must be accepted by vendors with every budget and need. Whether brick-and-mortar, mobile, or other unique use-cases - Nano must be the simplest choice Nano POS software will be needed to make integrating Nano on any POS terminal simple Standard and secure payment methods must be provided which integrate with todays POS & payment solutions (Hardware Wallets, Mobile Wallets) Fiat On-Ramp Status Fiat on-ramps are now available with base pairs including USD, EUR and GBP. Continuing to seek out and add additional gateways to provide easy access to Nano for users across the globe. Current exchanges can be found here Summary In order to become a truly global currency, obtaining and using Nano must be simple and secure for anyone worldwide Directly transferring Nano between any currency is critical. Fiat on-ramps (exchanging USD, BRL, EUR, JPY, KRW, etc) must be simple and intuitive for users of any technical level Nano will continually work with our growing network of partners, vendors, and community to drive this goal forward. Due to the nature of these negotiations, ongoing status of these efforts may be limited Benefits Merchants will benefit from the ability to exchange Nano with any fiat currency instantly Users will be less intimidated as the technical barriers are removed and anyone can easily begin using Nano Due to Nano having zero transaction fees, exchange of value between any parties - regardless of transaction size - has the potential to open opportunities for worldwide commerce once it can be obtained by anyone in seconds Challenges Fiat on-ramp options are currently limited and often only handle a single fiat currency Legal and regulatory restrictions exist in some regions that must be considered User experience must be held to the highest standard across the entire process. Every party must be held to the highest expectations & compliance.","title":"Adoption"},{"location":"releases/roadmap/#experience","text":"Developer Documentation Status Documentation can be found at https://docs.nano.org Summary Nano's developer mission is to enable anyone, anywhere to easily build on top of the Nano Currency. Developers are already building solutions that highlight the many benefits Nano provides. In an effort to support these efforts, it is important that anyone interested in implementing Nano can do so quickly and reliably. To that end, Nano's current goals focus on the following: Simple, well-written developer documentation Code examples, reference implementations and applications Continuously maintained Benefits More developers building on top of Nano More merchants integrating Nano into their businesses Challenges Documentation must be continually maintained as the protocol and RPC evolve Documentation must be written in a way that makes each function easy to understand Documentation should be made available in as many languages as possible Integration Guides Status Integration and Node operation guides can be found at https://docs.nano.org/integration-guides/the-basics/ Summary Decentralized networks must include easy to follow guides in order to successfully integrate the technology. This includes both exchange and node integration, which will be detailed in-depth for best practices setup, and merchant integration to begin accepting Nano as a payment option. Additionally, nodes should be optimized for ease of use. Users who wish to act as a voting representative will have easy to follow instructions on setting up, operating and maintaining their node. Integrating with Nano should be quick, painless, and extremely reliable regardless of the users unique needs. Exchanges, merchants, and general users will be provided with solutions for their specific needs. Benefits Exchange integration guides will make it easier than ever for exchanges to offer & support the Nano Currency Nano will be able to be listed by an exchange by following the best practices guide for integration. The core team will offer support but it should move to a hands-off approach in the future. Explore a new API similar to Bitcoin and Ethereum for easier exchange integration and maintenance","title":"Experience"},{"location":"releases/roadmap/#protocol","text":"See the Upcoming Features page for more details on future node and protocol features.","title":"Protocol"},{"location":"releases/roadmap/#wallets","text":"Hardware Wallets Status * Ledger Nano S integration completed (6/11/18) Jolt Hardware wallet development announced (5/31/18) Ledger Nano S integration enters code review (04/22/18) Summary Hardware wallets offer users secure offline storage for their digital currencies. The Nano Team is working with industry leaders to provide multiple hardware storage solutions to the community. Benefits Hardware wallets provide the peace of mind and security consumers expect from their currency of choice Investors can store hardware wallets in secure locations like safes and safety deposit boxes, offline, where they can be assured their funds are safe Financial services, institutional investors, vendors, and consumers will all have a secure way to manage & store their funds Challenges Solutions must be available to users of every technical level or needs Inexpensive solutions must be made available so that users have a secure way of storing Nano regardless of their total balance Desktop Wallets Status Desktop Wallet released by the Nano Wallet Company (7/15/18) Summary As part of the effort to bring user-friendly, secure wallets to users, the Nano Core team is building a new desktop wallet experience. While all features may not be available at launch, plans include adding the following benefits over time. Benefits \"Bootstrap\" process will be streamlined Friendly user-experience for users of any level A secure experience for sharing accounts across multiple devices QR codes for quickly transferring Nano between accounts","title":"Wallets"},{"location":"releases/upcoming-features/","text":"Below are the more notable features the protocol development team is considering for implementation. In addition to these items there are always other updates, optimizations and new features added in. We encourage participation on GitHub for anyone capable of contributing to the code base . Status Details In Progress In active development to be included in upcoming releases Planned Planned for development with known scope/solution Researching Under research to identify scope and potential development plans In Progress \u00b6 TCP network overlay Release V19 Solidus Goal Provide support for live traffic over TCP, keeping UDP as a fallback mechanism. Benefits Decrease amount of traffic and connections nodes need to maintain and reduce resource usage and increase higher peak TPS capabilities Links GitHub PR #1962 - V19 Solidus Feature Analysis (Medium) Confirmation Height Release V19 Solidus Goal Track height of confirmed blocks per account and confirm dependent elections based on this height. Benefits Provide simpler block confirmation procedures, reduce network voting and confirmation traffic, and provide easier implementation of various future features. Links GitHub PR #1770 - Looking up to Confirmation Height (Medium) - V19 Solidus Feature Analysis (Medium) Dynamic Proof-of-Work (PoW) and Prioritization Release V19 Solidus Goal Capture work difficulty levels on the network and adjust wallet work generation dynamically when delays in confirmation for locally published blocks are experienced. Also include dropping of active transactions failing to confirm quickly. Benefits Reduce impacts to regular users during spam attacks and increase cost of spam attacks. Links GitHub PR #1990 - GitHub PR #1858 - V19 Solidus Feature Analysis (Medium) Out of node process RPC Release V19 Solidus Goal Remove RPC operations out of node process. Benefits Reduced node attack surface as signing keys no longer in the same memory space as network and ledger code. Links GitHub PR #1857 - V19 Solidus Feature Analysis (Medium) Bandwidth throttling Release V19 Solidus Goal Provide configuration options for nodes to limit bandwidth resource usage. Benefits More control over resource consumption for node operators and to provide a metric for analyzing more objectively the TPS capabilities of the network. Links N/A Planned \u00b6 Dual-phase voting Release V20 (Targeted) Goal Use a dual-phased voting approach: first is a negotiation phase to gather network consensus, and then second is issuing a final, durable vote that cannot be re-negotiated. Benefits Blocks cemented after durable vote and allowing durable vote snapshots. Links Durable vote snapshots Release V20 (Targeted) Goal Provide methods for export and importing snapshots of durable votes between nodes. Benefits Easier bootstrap verification through dependence on durable votes plus frontier elections only. Links Confirmed-only bootstrapping Release V20 (Targeted) Goal Limit responses to bootstrap requests to only confirmed blocks. Benefits Reduction in network traffic previously caused by elections for unconfirmed blocks started during bootstrapping. Links Proto-buff based RPCs Release V20 (Targeted) Goal Add support for protocol buffer based RPCs. Benefits Faster performance on RPC calls and support for non-JSON RPCs. Easier integrations. Links Local account priority bootstrapping Release V20 (Targeted) Goal Allow bootstrapping of local accounts first. Benefits Nodes can send/receive Nano before fully synced. Links GitHub Issue #1731 RPC 2.0 Release V20 (Targeted) Goal Refactor RPC implementation while removing unnecessary and adding new, more useful endpoints. Benefits Better RPC performance, more consistent input and output handling and expanded functionality. Links Move wallet out of process Release V20 (Targeted) Goal Remove wallet operations out of node process. Benefits Reduced node attack surface. Links Node Telemetry Release V21 (Targeted) Goal Provide methods for nodes to report block height, bandwidth caps, version numbers, node vendor versions and more. Benefits Better monitoring of network status and upgrades progress. Links Ledger pruning Release V21 (Targeted) Goal Allow optional pruning of ledger blocks down to frontier, frontier predecessor and pending blocks. Benefits Reduce ledger size on disk and lower requirements nodes joining the network. Links Researching \u00b6 Alternative PoW algorithm Release TBD Goal Update Proof-of-Work (PoW) algorithm to be more memory bound, likely Cuckoo variant. Benefits Increase cost of spam attacks. Links N/A QUIC protocol Release V22+ Goal Determine if QUIC protocol is a viable alternative to UDP and TCP for live network activity Benefits More efficient traffic handling for live network. Links N/A Network overlay (DHT-based) Release V22+ Goal Provide a structured network overlay of nodes on the network through a distributed hash table. Benefits Decreased connection count for nodes, better Distributed Denial-of-Service (DDoS) protection and reduced network bandwidth. Links N/A","title":"Upcoming Features"},{"location":"releases/upcoming-features/#in-progress","text":"TCP network overlay Release V19 Solidus Goal Provide support for live traffic over TCP, keeping UDP as a fallback mechanism. Benefits Decrease amount of traffic and connections nodes need to maintain and reduce resource usage and increase higher peak TPS capabilities Links GitHub PR #1962 - V19 Solidus Feature Analysis (Medium) Confirmation Height Release V19 Solidus Goal Track height of confirmed blocks per account and confirm dependent elections based on this height. Benefits Provide simpler block confirmation procedures, reduce network voting and confirmation traffic, and provide easier implementation of various future features. Links GitHub PR #1770 - Looking up to Confirmation Height (Medium) - V19 Solidus Feature Analysis (Medium) Dynamic Proof-of-Work (PoW) and Prioritization Release V19 Solidus Goal Capture work difficulty levels on the network and adjust wallet work generation dynamically when delays in confirmation for locally published blocks are experienced. Also include dropping of active transactions failing to confirm quickly. Benefits Reduce impacts to regular users during spam attacks and increase cost of spam attacks. Links GitHub PR #1990 - GitHub PR #1858 - V19 Solidus Feature Analysis (Medium) Out of node process RPC Release V19 Solidus Goal Remove RPC operations out of node process. Benefits Reduced node attack surface as signing keys no longer in the same memory space as network and ledger code. Links GitHub PR #1857 - V19 Solidus Feature Analysis (Medium) Bandwidth throttling Release V19 Solidus Goal Provide configuration options for nodes to limit bandwidth resource usage. Benefits More control over resource consumption for node operators and to provide a metric for analyzing more objectively the TPS capabilities of the network. Links N/A","title":"In Progress"},{"location":"releases/upcoming-features/#planned","text":"Dual-phase voting Release V20 (Targeted) Goal Use a dual-phased voting approach: first is a negotiation phase to gather network consensus, and then second is issuing a final, durable vote that cannot be re-negotiated. Benefits Blocks cemented after durable vote and allowing durable vote snapshots. Links Durable vote snapshots Release V20 (Targeted) Goal Provide methods for export and importing snapshots of durable votes between nodes. Benefits Easier bootstrap verification through dependence on durable votes plus frontier elections only. Links Confirmed-only bootstrapping Release V20 (Targeted) Goal Limit responses to bootstrap requests to only confirmed blocks. Benefits Reduction in network traffic previously caused by elections for unconfirmed blocks started during bootstrapping. Links Proto-buff based RPCs Release V20 (Targeted) Goal Add support for protocol buffer based RPCs. Benefits Faster performance on RPC calls and support for non-JSON RPCs. Easier integrations. Links Local account priority bootstrapping Release V20 (Targeted) Goal Allow bootstrapping of local accounts first. Benefits Nodes can send/receive Nano before fully synced. Links GitHub Issue #1731 RPC 2.0 Release V20 (Targeted) Goal Refactor RPC implementation while removing unnecessary and adding new, more useful endpoints. Benefits Better RPC performance, more consistent input and output handling and expanded functionality. Links Move wallet out of process Release V20 (Targeted) Goal Remove wallet operations out of node process. Benefits Reduced node attack surface. Links Node Telemetry Release V21 (Targeted) Goal Provide methods for nodes to report block height, bandwidth caps, version numbers, node vendor versions and more. Benefits Better monitoring of network status and upgrades progress. Links Ledger pruning Release V21 (Targeted) Goal Allow optional pruning of ledger blocks down to frontier, frontier predecessor and pending blocks. Benefits Reduce ledger size on disk and lower requirements nodes joining the network. Links","title":"Planned"},{"location":"releases/upcoming-features/#researching","text":"Alternative PoW algorithm Release TBD Goal Update Proof-of-Work (PoW) algorithm to be more memory bound, likely Cuckoo variant. Benefits Increase cost of spam attacks. Links N/A QUIC protocol Release V22+ Goal Determine if QUIC protocol is a viable alternative to UDP and TCP for live network activity Benefits More efficient traffic handling for live network. Links N/A Network overlay (DHT-based) Release V22+ Goal Provide a structured network overlay of nodes on the network through a distributed hash table. Benefits Decreased connection count for nodes, better Distributed Denial-of-Service (DDoS) protection and reduced network bandwidth. Links N/A","title":"Researching"},{"location":"running-a-node/beta-network/","text":"Joining the beta network \u00b6 A few common reasons for joining the beta network include: Learning node setup and management Testing out integrations for services build on Nano before running on the main network Assisting testing new node releases and features Contributing to a network testing various behaviors and patterns with the protocol Running a beta node is a great way to join in and help the network grow stronger. Node release testing \u00b6 The beta network is also used to coordinate the testing of Nano node releases. The Nano Foundation maintains a few beta nodes on the network and various community members also setup nodes to help provide an environment more similar to the main network. Ahead of each release builds are published as Release Candidates (RC). Starting with RC1 and incrementing with each published build (RC2, RC3, etc.), these are intended for use on the beta network to help identify issues not discovered earlier in the development process. We invite anyone interested in contributing to Nano to consider participating on the beta network. Not only is it beneficial to the ecosystem, it is also a great way to learn more about setting up and managing a node. Warning Release candidate builds are only recommended for use on the beta network The fastest and most recommended method of installation is through Docker Binaries and other details can be found at: https://beta.nano.org/ Running a beta node \u00b6 Setting up a node on the beta network is similar to the main network. To start you should install docker and be familiar with the general setup and Docker management processes. Network ports \u00b6 Beta Network Ports Overview 54000 UDP: For live network activity 54000 TCP: For bootstrap network activity 55000 TCP: For communication with RPC server. Anyone with access to this port can control your node's RPC. Folder locations \u00b6 OS Location Windows C: \\U sers \\< user> \\A ppData \\L ocal \\N anoBeta \\ OSX /Users/<user>/Library/NanoBeta/ Linux /home/<user>/NanoBeta/ Info Directory names for extracting builds downloaded from GitHub or https://beta.nano.org/ will be updated with RC versions for V19 and later. Pulling the Docker image \u00b6 Pulls the latest release of the Nano Node: docker pull nanocurrency/nano-beta Pulls a specific version of the Nano node: docker pull nanocurrency/nano-beta:V19.0RC1 Pulls the latest release which includes any release candidate versions: docker pull nanocurrency/nano-beta:latest-including-rc A list of beta tags can be found at the official Nano Currency Docker Hub Starting the Docker container \u00b6 docker run --restart = unless-stopped -d \\ -p 54000 :54000/udp \\ -p 54000 :54000 \\ -p [ ::1 ] :55000:55000 \\ -v ${ NANO_HOST_FOLDER_BETA } :/root \\ --name ${ NANO_NAME } \\ nanocurrency/nano-beta:latest-including-rc Tip For an explanation of the options included in the Docker run command, see Starting the Container details for the main network. See Docker management for other related commands Separate host folders Be sure to use a different host folder for main network and beta network Docker node setups. Attempting to use the same folder will result in issues. Additional beta resources \u00b6 URL Description https://beta.nano.org/ Official beta site and faucet https://beta.nanocrawler.cc/ Beta Explorer https://b.repnode.org/ Beta nodes and Stats Current Release Candidate Testing \u00b6 Release Candidate 2 for V19 (V19 RC2) \u00b6 V19 RC2 is the latest build available for the beta network. In addition to any general or integration specific testing, some of the helpful testing activities during the release candidate period have been included below for reference: Upgrade from pre-V18 Anyone attempting to upgrade to V19 from versions earlier than V18 will see a long period where the node will not participate on the network and RPC will not be responsive. This is because the sideband upgrade has been changed from a background process to being on the main thread this version. It is recommended that older nodes are upgraded to V18 before attempting the upgrade to V19 to avoid the service interruption. Confirmation Height Item Status Details Updates CHT1 Complete Verifying RPC commands responsive during upgrade period (confirmation height setting of initial long chains occurs in background so shouldn't interrupt RPC, will take a while so confirmation height values may not show up for a while) 5/12: Confirmation height updates ongoing and completed for various nodes with no reported cases of impacts to RPC responsiveness CHT2 Additional tests desired Requests to RPC block_confirm with already confirmed blocks will still include that block in confirmation_history and through the callback 5/12: At least one successful validation of this case has been done, additional tests are welcome CHT3 Additional tests needed Requests to block_info and blocks_info should return confirmed true for recently confirmed blocks even during confirmation height upgrade process. Blocks underneath these recent ones may show unconfirmed status during upgrade. 5/12: Still pending testing on beta network CHT4 Additional tests desired Attempt triggering fork resolution on an already confirmed block and monitor elections to ensure they aren't started for that block (ideally an older one that someone without confirmation height enabled wouldn't be trying to trigger an election for) 5/12: At least one successful validation of this case has been done, additional tests are welcome CHM1 Waiting for reports Start upgrade and note start time, immediately publish a new block on a new account and poll account_info for it repeatedly until you see confirmation_height value appear - this is roughly the confirmation height upgrade time. CLI command nano_node --debug_cemented_block_count can also be used to see how far along the confirmed block count is vs. total block count 5/12: Various upgrades have been done, waiting on reported times for upgrade completion Dynamic PoW and Prioritization Item Status Details Updates DPT1 Additional tests desired Spam the network and attempt to saturate it 5/12: Saturation has been achieved with ~50+ TPS multi-account spam, additional tests still desired DPT2 Needs testing in RC 3 For low-powered nodes, try publishing some blocks and watch for work values increasing during saturation 5/12: Tests have indicated active difficulty does increase, changes to the algorithm controlling this will be included in RC 3 for further testing DPT3 Needs testing in RC 3 Create conditions that would cause blocks to fail confirmation in less than 5 seconds, trigger some sends (noting work values) and then watch for node to do rework and republish the block with new work value after ~ 5s. Conditions to slow confirmations could be created with saturating the network with spam or possibly setting a high online_weight_quorum / online_weight_minimum value in config.json 5/12: Rework is being updated and needs further testing in RC 3 DPM1 Needs testing in RC 3 Capture average work values using the active_difficulty RPC 5/12: Average work values have been captured and monitored, but behavior may be changed with RC 3 and if so, would make more tests desirable Websocket support Item Status Details Updates WST1 Complete Configure node to use the websocket callbacks and spam network with a known set of pre-calculated blocks 5/12: Multiple cases of websocket setups completed and functioning WSM1 Additional tests desired Collect all callbacks from websocket to compare against known spam blocks sent out for any potential gaps 5/12: Comparison of websocket to callback for validating full block capture has been attempted but so far is inconclusive, additional testing desired Nano_ prefix Item Status Details Updates NPT1 Continued testing Any services integrating should verify they can properly handle nano_ prefix addresses 5/12: All services continue to be encouraged to setup a beta node and test with their systems New RPC process Item Status Details Updates RPT1 Complete Verify RPC is responsive and doesn't spawn new process with default configuration - verify RPC is responsive to calls, including heavy usage 5/12: In process RPC observed behaving as expected with RC 2 build RPT2 Complete Update RPC configuration for child process setups per https://github.com/nanocurrency/nano-node/pull/1874 - verify RPC is responsive to calls, including heavy usage 5/14: Testing looks good RPT3 Complete Update RPC configuration for out of node process setups per https://github.com/nanocurrency/nano-node/pull/1874 - verify RPC is responsive to calls, including heavy usage 5/14: Testing looks good RPT4 Additional testing needed Test that --network and data_path command line arguments are transferred correctly to nano_rpc when used as child/out of process RPC. RPT5 Additional testing needed Use an incorrect rpc_path in config.json and confirm that an appropriate error message is displayed. RPT6 Complete Spam many RPC requests (don't wait to response) with low numbers of io_threads , confirm node is still responsive after. Confirmation times Item Status Details Updates RPM1 Additional tests desired Keep tracking confirmation times as the vote_generator delay was removed, likely helping reduce confirmation times during lower TPS situations 5/12: Confirmation times continually tracked on beta network. Under low network volume confirmation times under 0.2s, rising higher under saturation. Continued monitoring is desirable. Fast bootstrap Item Status Details Updates FBT1 Additional tests desired Attempt bootstrapping from scratch using --fast_bootstrap option and report times and final ledger file size (NOTE: using this option doesn't clear unchecked) 5/12: Additional data for fast bootstrap times and resulting ledger file sizes is desired Networking/TCP Item Status Details Updates NET1 Tests needed With UDP and TCP being supported, testing for configurations that have port forwarding and NATs without upnp enabled are desirable for both these protocols. NET2 Tests needed Track peering with other nodes via TCP by calling peers RPC command with peer_details = true . Expect to see connections via TCP to other nodes running V19RC3, via UDP for nodes running versions lower. Disable all UDP ports to force TCP-only peering, although this may not result in enough votes to reach quorum if few nodes on the network have upgraded.","title":"Beta Network"},{"location":"running-a-node/beta-network/#joining-the-beta-network","text":"A few common reasons for joining the beta network include: Learning node setup and management Testing out integrations for services build on Nano before running on the main network Assisting testing new node releases and features Contributing to a network testing various behaviors and patterns with the protocol Running a beta node is a great way to join in and help the network grow stronger.","title":"Joining the beta network"},{"location":"running-a-node/beta-network/#node-release-testing","text":"The beta network is also used to coordinate the testing of Nano node releases. The Nano Foundation maintains a few beta nodes on the network and various community members also setup nodes to help provide an environment more similar to the main network. Ahead of each release builds are published as Release Candidates (RC). Starting with RC1 and incrementing with each published build (RC2, RC3, etc.), these are intended for use on the beta network to help identify issues not discovered earlier in the development process. We invite anyone interested in contributing to Nano to consider participating on the beta network. Not only is it beneficial to the ecosystem, it is also a great way to learn more about setting up and managing a node. Warning Release candidate builds are only recommended for use on the beta network The fastest and most recommended method of installation is through Docker Binaries and other details can be found at: https://beta.nano.org/","title":"Node release testing"},{"location":"running-a-node/beta-network/#running-a-beta-node","text":"Setting up a node on the beta network is similar to the main network. To start you should install docker and be familiar with the general setup and Docker management processes.","title":"Running a beta node"},{"location":"running-a-node/beta-network/#network-ports","text":"Beta Network Ports Overview 54000 UDP: For live network activity 54000 TCP: For bootstrap network activity 55000 TCP: For communication with RPC server. Anyone with access to this port can control your node's RPC.","title":"Network ports"},{"location":"running-a-node/beta-network/#folder-locations","text":"OS Location Windows C: \\U sers \\< user> \\A ppData \\L ocal \\N anoBeta \\ OSX /Users/<user>/Library/NanoBeta/ Linux /home/<user>/NanoBeta/ Info Directory names for extracting builds downloaded from GitHub or https://beta.nano.org/ will be updated with RC versions for V19 and later.","title":"Folder locations"},{"location":"running-a-node/beta-network/#pulling-the-docker-image","text":"Pulls the latest release of the Nano Node: docker pull nanocurrency/nano-beta Pulls a specific version of the Nano node: docker pull nanocurrency/nano-beta:V19.0RC1 Pulls the latest release which includes any release candidate versions: docker pull nanocurrency/nano-beta:latest-including-rc A list of beta tags can be found at the official Nano Currency Docker Hub","title":"Pulling the Docker image"},{"location":"running-a-node/beta-network/#starting-the-docker-container","text":"docker run --restart = unless-stopped -d \\ -p 54000 :54000/udp \\ -p 54000 :54000 \\ -p [ ::1 ] :55000:55000 \\ -v ${ NANO_HOST_FOLDER_BETA } :/root \\ --name ${ NANO_NAME } \\ nanocurrency/nano-beta:latest-including-rc Tip For an explanation of the options included in the Docker run command, see Starting the Container details for the main network. See Docker management for other related commands Separate host folders Be sure to use a different host folder for main network and beta network Docker node setups. Attempting to use the same folder will result in issues.","title":"Starting the Docker container"},{"location":"running-a-node/beta-network/#additional-beta-resources","text":"URL Description https://beta.nano.org/ Official beta site and faucet https://beta.nanocrawler.cc/ Beta Explorer https://b.repnode.org/ Beta nodes and Stats","title":"Additional beta resources"},{"location":"running-a-node/beta-network/#current-release-candidate-testing","text":"","title":"Current Release Candidate Testing"},{"location":"running-a-node/beta-network/#release-candidate-2-for-v19-v19-rc2","text":"V19 RC2 is the latest build available for the beta network. In addition to any general or integration specific testing, some of the helpful testing activities during the release candidate period have been included below for reference: Upgrade from pre-V18 Anyone attempting to upgrade to V19 from versions earlier than V18 will see a long period where the node will not participate on the network and RPC will not be responsive. This is because the sideband upgrade has been changed from a background process to being on the main thread this version. It is recommended that older nodes are upgraded to V18 before attempting the upgrade to V19 to avoid the service interruption. Confirmation Height Item Status Details Updates CHT1 Complete Verifying RPC commands responsive during upgrade period (confirmation height setting of initial long chains occurs in background so shouldn't interrupt RPC, will take a while so confirmation height values may not show up for a while) 5/12: Confirmation height updates ongoing and completed for various nodes with no reported cases of impacts to RPC responsiveness CHT2 Additional tests desired Requests to RPC block_confirm with already confirmed blocks will still include that block in confirmation_history and through the callback 5/12: At least one successful validation of this case has been done, additional tests are welcome CHT3 Additional tests needed Requests to block_info and blocks_info should return confirmed true for recently confirmed blocks even during confirmation height upgrade process. Blocks underneath these recent ones may show unconfirmed status during upgrade. 5/12: Still pending testing on beta network CHT4 Additional tests desired Attempt triggering fork resolution on an already confirmed block and monitor elections to ensure they aren't started for that block (ideally an older one that someone without confirmation height enabled wouldn't be trying to trigger an election for) 5/12: At least one successful validation of this case has been done, additional tests are welcome CHM1 Waiting for reports Start upgrade and note start time, immediately publish a new block on a new account and poll account_info for it repeatedly until you see confirmation_height value appear - this is roughly the confirmation height upgrade time. CLI command nano_node --debug_cemented_block_count can also be used to see how far along the confirmed block count is vs. total block count 5/12: Various upgrades have been done, waiting on reported times for upgrade completion Dynamic PoW and Prioritization Item Status Details Updates DPT1 Additional tests desired Spam the network and attempt to saturate it 5/12: Saturation has been achieved with ~50+ TPS multi-account spam, additional tests still desired DPT2 Needs testing in RC 3 For low-powered nodes, try publishing some blocks and watch for work values increasing during saturation 5/12: Tests have indicated active difficulty does increase, changes to the algorithm controlling this will be included in RC 3 for further testing DPT3 Needs testing in RC 3 Create conditions that would cause blocks to fail confirmation in less than 5 seconds, trigger some sends (noting work values) and then watch for node to do rework and republish the block with new work value after ~ 5s. Conditions to slow confirmations could be created with saturating the network with spam or possibly setting a high online_weight_quorum / online_weight_minimum value in config.json 5/12: Rework is being updated and needs further testing in RC 3 DPM1 Needs testing in RC 3 Capture average work values using the active_difficulty RPC 5/12: Average work values have been captured and monitored, but behavior may be changed with RC 3 and if so, would make more tests desirable Websocket support Item Status Details Updates WST1 Complete Configure node to use the websocket callbacks and spam network with a known set of pre-calculated blocks 5/12: Multiple cases of websocket setups completed and functioning WSM1 Additional tests desired Collect all callbacks from websocket to compare against known spam blocks sent out for any potential gaps 5/12: Comparison of websocket to callback for validating full block capture has been attempted but so far is inconclusive, additional testing desired Nano_ prefix Item Status Details Updates NPT1 Continued testing Any services integrating should verify they can properly handle nano_ prefix addresses 5/12: All services continue to be encouraged to setup a beta node and test with their systems New RPC process Item Status Details Updates RPT1 Complete Verify RPC is responsive and doesn't spawn new process with default configuration - verify RPC is responsive to calls, including heavy usage 5/12: In process RPC observed behaving as expected with RC 2 build RPT2 Complete Update RPC configuration for child process setups per https://github.com/nanocurrency/nano-node/pull/1874 - verify RPC is responsive to calls, including heavy usage 5/14: Testing looks good RPT3 Complete Update RPC configuration for out of node process setups per https://github.com/nanocurrency/nano-node/pull/1874 - verify RPC is responsive to calls, including heavy usage 5/14: Testing looks good RPT4 Additional testing needed Test that --network and data_path command line arguments are transferred correctly to nano_rpc when used as child/out of process RPC. RPT5 Additional testing needed Use an incorrect rpc_path in config.json and confirm that an appropriate error message is displayed. RPT6 Complete Spam many RPC requests (don't wait to response) with low numbers of io_threads , confirm node is still responsive after. Confirmation times Item Status Details Updates RPM1 Additional tests desired Keep tracking confirmation times as the vote_generator delay was removed, likely helping reduce confirmation times during lower TPS situations 5/12: Confirmation times continually tracked on beta network. Under low network volume confirmation times under 0.2s, rising higher under saturation. Continued monitoring is desirable. Fast bootstrap Item Status Details Updates FBT1 Additional tests desired Attempt bootstrapping from scratch using --fast_bootstrap option and report times and final ledger file size (NOTE: using this option doesn't clear unchecked) 5/12: Additional data for fast bootstrap times and resulting ledger file sizes is desired Networking/TCP Item Status Details Updates NET1 Tests needed With UDP and TCP being supported, testing for configurations that have port forwarding and NATs without upnp enabled are desirable for both these protocols. NET2 Tests needed Track peering with other nodes via TCP by calling peers RPC command with peer_details = true . Expect to see connections via TCP to other nodes running V19RC3, via UDP for nodes running versions lower. Disable all UDP ports to force TCP-only peering, although this may not result in enough votes to reach quorum if few nodes on the network have upgraded.","title":"Release Candidate 2 for V19 (V19 RC2)"},{"location":"running-a-node/beyond-the-node/","text":"Building tools and services \u00b6 Congrats! Now that you understand more about how Nano works and setup your own node to participate on the network, the next step is building tools and services on the node. Our Integration Guides are a great starting point to help you understand how you can leverage your node to create amazing applications that utilize the unique value transfer features of Nano. Need some inspiration? \u00b6 A big part of the Nano community is the Nano Center . Run by a group of Nano enthusiasts, their website helps manage requests for assistance and funding for Nano-related projects. Check out the in progress and past funded projects for some great ideas and opportunities to join in building on top of Nano! For even more details about the many projects that help make our ecosystem robust, head over to Nano.org for examples of wallets, services and more that have integrated Nano. Keep learning \u00b6 If you're ready to keep building with Nano, head over to The Basics of our Integration Guides.","title":"Beyond the Node"},{"location":"running-a-node/beyond-the-node/#building-tools-and-services","text":"Congrats! Now that you understand more about how Nano works and setup your own node to participate on the network, the next step is building tools and services on the node. Our Integration Guides are a great starting point to help you understand how you can leverage your node to create amazing applications that utilize the unique value transfer features of Nano.","title":"Building tools and services"},{"location":"running-a-node/beyond-the-node/#need-some-inspiration","text":"A big part of the Nano community is the Nano Center . Run by a group of Nano enthusiasts, their website helps manage requests for assistance and funding for Nano-related projects. Check out the in progress and past funded projects for some great ideas and opportunities to join in building on top of Nano! For even more details about the many projects that help make our ecosystem robust, head over to Nano.org for examples of wallets, services and more that have integrated Nano.","title":"Need some inspiration?"},{"location":"running-a-node/beyond-the-node/#keep-learning","text":"If you're ready to keep building with Nano, head over to The Basics of our Integration Guides.","title":"Keep learning"},{"location":"running-a-node/configuration/","text":"Configuration File Locations \u00b6 The node uses the config.json and rpc_config.json files found in the following locations: OS Location Windows C: \\U sers \\< user> \\A ppData \\L ocal \\N ano \\ OSX /Users/<user>/Library/Nano/ Linux /home/<user>/Nano/ config.json \u00b6 This is the main configuration file for controlling node behavior. Below is an example file with most option and further details on specific configuration items. Example file \u00b6 { \"version\" : \"(int)\" , // Wallet version \"wallet\" : \"(string)\" , // Default wallet to load on boot (only for GUI wallet) \"account\" : \"(string)\" , // Default account to load on boot (only for GUI wallet) \"node\" : { \"version\" : \"(int)\" , // Node version \"peering_port\" : \"7075\" , // Default node port \"bootstrap_fraction_numerator\" : \"1\" , \"enable_voting\" : \"false\" , // Enable or disable voting for blocks. If disabled, saves some resources \"receive_minimum\" : \"1000000000000000000000000\" , // Minimum import receivable, default 1 Rai \"logging\" : { \"ledger\" : \"false\" , // Track incoming blocks \"ledger_duplicate\" : \"false\" , \"network\" : \"true\" , // Track general network info like forks \"network_message\" : \"false\" , \"network_publish\" : \"false\" , // Track blocks you publish to \"network_packet\" : \"false\" , // Track packets origin \"network_keepalive\" : \"false\" , // Track keepalive messages \"network_node_id_handshake\" : \"false\" , // Track node_id messages \"node_lifetime_tracing\" : \"false\" , \"insufficient_work\" : \"true\" , \"bulk_pull\" : \"false\" , // Bootstrap related logging \"work_generation_time\" : \"true\" , \"log_to_cerr\" : \"false\" , \"max_size\" : \"16777216\" , // Max size of logs before old files deletion. Default is 16MB \"rotation_size\" : \"4194304\" , // Size of Log File before rotation in bytes, Default is 4MB \"version\" : \"(int)\" , // Logging config version \"vote\" : \"false\" , // Track voting activities \"flush\" : \"true\" , // Setting this to false gives better performance, but may lose entries on crashes. \"upnp_details\" : \"false\" , // Determines if upnp discovery details are logged (default off to avoid sharing device info when shipping logs) \"timing\" : \"false\" , // Logs durations of key functions, such as batch verification, etc. \"log_ipc\" : \"true\" // Logging of IPC related messages }, \"vote_minimum\" : \"1000000000000000000000000000000000\" , // Prevents voting if delegated weight is under this threshold \"work_peers\" : \"\" , // Delegate a node your hash work, you need to get RPC access to that node \"preconfigured_peers\" : [ // List of defaults peers to connect on boot \"peering.nano.org\" , \"::ffff:138.201.94.249\" ], \"preconfigured_representatives\" : [ // List of defaults representatives , which you delegate voting weight , of your wallet \"xrb_3arg3asgtigae3xckabaaewkx3bzsh7nwz7jkmjos79ihyaxwphhm6qgjps4\" , \"xrb_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\" , \"xrb_1q3hqecaw15cjt7thbtxu3pbzr1eihtzzpzxguoc37bj1wc5ffoh7w74gi6p\" , \"xrb_3dmtrrws3pocycmbqwawk6xs7446qxa36fcncush4s1pejk16ksbmakis78m\" , \"xrb_3hd4ezdgsp15iemx7h81in7xz5tpxi43b6b41zn3qmwiuypankocw3awes5k\" , \"xrb_1awsn43we17c1oshdru4azeqjz9wii41dy8npubm4rg11so7dx3jtqgoeahy\" , \"xrb_1anrzcuwe64rwxzcco8dkhpyxpi8kd7zsjc1oeimpc3ppca4mrjtwnqposrs\" , \"xrb_1hza3f7wiiqa7ig3jczyxj5yo86yegcmqk3criaz838j91sxcckpfhbhhra1\" ], \"online_weight_minimum\" : \"60000000000000000000000000000000000000\" , // Online weight minimum required to confirm block \"online_weight_quorum\" : \"50\" , // Percentage of votes required to rollback blocks \"password_fanout\" : \"1024\" , \"io_threads\" : \"4\" , \"work_threads\" : \"4\" , // PoW work threads. By default all available CPU threads, set lower value for 24/7 services \"callback_address\" : \"::ffff:127.0.0.1\" , // Callback IP address, in sample IPv4 localhost \"callback_port\" : \"17076\" , // Callback port \"callback_target\" : \"/\" , // Callback target, in sample root of callback listening server \"bootstrap_connections\" : \"16\" , // Multi-connection bootstrap. Should be a power of 2. \"bootstrap_connections_max\" : \"4\" , // Allowed incoming bootstrap connections count. Lower value save IOPS & bandwidth. 64 recommended for high-end fast nodes, 0 for HDD home users, \"lmdb_max_dbs\" : \"128\" , // Maximum open DBs (MAX_DBS https://lmdb.readthedocs.io/en/release/), increase default if more than 100 wallets required \"block_processor_batch_max_time\" : \"5000\" , // Number of milliseconds the block processor works at a time \"allow_local_peers\" : \"false\" , // To allow local host peering \"signature_checker_threads\" : \"1\" , // Number of threads to use for verifying signatures \"unchecked_cutoff_time\" : \"14400\" , // Number of seconds unchecked entry survives before being cleaned \"tcp_io_timeout\" : \"15\" , // Timeout in seconds for TCP connect-, read- and write operations \"tcp_idle_timeout\" : \"120\" , // Default idle disconnection timeout in seconds \"pow_sleep_interval\" : \"0\" , // The amount to sleep after each batch of POW calculations. Reduces max CPU usage at the expensive of a longer workgeneration time. \"external_address\" : \"::\" , \"external_port\" : \"0\" , \"websocket\" : { \"enable\" : \"false\" , \"address\" : \"::1\" , \"port\" : \"7078\" }, \"ipc\" : { // For more details about these options see the IPC section below \"tcp\" : { \"enable\" : \"false\" , \"port\" : \"7077\" , \"io_timeout\" : \"15\" }, \"local\" : { \"version\" : \"1\" , \"enable\" : \"false\" , \"allow_unsafe\" : \"false\" , \"path\" : \"\\/tmp\\/nano\" , \"io_timeout\" : \"15\" } }, \"diagnostics\" : { \"txn_tracking\" : { \"enable\" : \"false\" , // Tracks lmdb transactions \"min_read_txn_time\" : \"5000\" , // Logs stacktrace when read transactions are held longer than this time (milliseconds) \"min_write_txn_time\" : \"500\" , // Logs stacktrace when write transactions are held longer than this time (milliseconds) \"ignore_writes_below_block_processor_max_time\" : \"true\" // Ignore any block processor writes less than block_processor_max_time } } }, \"rpc_enable\" : \"true\" , // Enable (in-process or child process) or disable RPC. Out of process rpc servers can still be used if launched manually. \"rpc\" : { \"enable_sign_hash\" : \"true\" , \"max_work_generate_difficulty\" : \"ffffffffc0000000\" , \"version\" : \"1\" , \"child_process\" : { \"enable\" : \"false\" // Whether the rpc server is run as a child process rather than in-process \"rpc_path\" : \"C:\\\\Users\\\\Wesley\\\\Documents\\\\raiblocks\\\\build\\\\Debug\\\\nano_rpc.exe\" , // The nano_rpc executable to run if enabled. } }, \"opencl_enable\" : \"false\" , // Enable GPU hashing \"opencl\" : { \"platform\" : \"0\" , // Platform ID \"device\" : \"0\" , // Device ID \"threads\" : \"1048576\" } } Configuration options \u00b6 work_peers \u00b6 Used when offloading work generation to another node or service. Format must be ipv6, preceded by ::ffff: if ipv4. Hostnames are not allowed at this time. Calls are made to the ip:port designated using the standard RPC format work_generate . \"work_peers\" : [ \"::ffff:127.0.0.1:7076\" ] , opencl_enable \u00b6 To enable GPU acceleration for PoW, set \"opencl_enable\" to \"true\" . Other OpenCL parameters may need to be adjusted depending on the desired setup (see example config.json file above). ipc \u00b6 On startup, the node will generate configuration options for IPC, one entry for each transport. By default, IPC is disabled. \"ipc\" : { \"tcp\" : { \"enable\" : \"false\" , \"port\" : \"7077\" , \"io_timeout\" : \"15000\" }, \"local\" : { \"enable\" : \"false\" , \"path\" : \"\\/tmp\\/nano\" , \"io_timeout\" : \"15000\" } } , Each transport also supports an experimental \"io_threads\" configuration value. If not present (default), the node's IO event loop will be used. If a value is present, a separate event loop with N threads will be created for the transport. For certain transports, this may scale better on some systems. Because the only IPC encoding is currently \"legacy RPC\", the RPC config options like \"enable_control\" still applies. For details about using the IPC setup, see the IPC Integration Guide . websocket \u00b6 Available in Version 19.0+ only \"node\" : { \"websocket\" : { \"enable\" : \"true\" , \"address\" : \"::1\" , \"port\" : \"7078\" }, } With the above configuration, localhost clients should connect to ws://[::1]:7078 . For details on how to integrate using websockets, see the Websocket Support section of the Integration Guides . HTTP callback \u00b6 \"node\" : { \"callback_address\" : \"::ffff:127.0.0.1\" , \"callback_port\" : \"17076\" , \"callback_target\" : \"/\" } JSON POST requests with every confirmed block are sent to the callback server as defined in the config values above: http://callback_address:callback_port<callback_target> . Callback target should include a leading slash. For details on how to integrate using the HTTP callback, see the HTTP Callback section of the Integration Guides . Tip When possible, using the websockets is recommended as it provides more efficiency, more options for types of information to receive and better control over the volume of notifications with filtering. rpc_config.json \u00b6 This is the configuration that controls how the RPC server connects and behaves when communicating with the node. Available in Version 19.0+ only Example file \u00b6 { \"address\" : \"::ffff:127.0.0.1\" , // Allowed IP for RPC connection \"port\" : \"7076\" , // Default RPC port \"enable_control\" : \"true\" , // Enable particular RPC command like: send, account_create, etc... \"max_json_depth\" : \"20\" , // prevent JSON overflow. Default recommended \"version\" : \"1\" , \"max_request_size\" : \"33554432\" , \"process\" : { \"io_threads\" : \"8\" , // Number of threads listening to RPC requests \"ipc_port\" : \"46000\" , // Must match port in ipc -> tcp of node config file \"num_ipc_connections\" : \"8\" // Max number of connections with nano_node (io_threads in config.json should be at least this number) } } Warning - Multiple Node Setups Never use the same seed on multiple running nano_node instances at the same time. Multiple nano_nodes using the same seed can result in network race conditions that degrade performance for your personal accounts. In addition, Publishing transactions from two nodes with the same account at the same time may cause an account fork which requires a slower representative voting process. Similarly, if you are running a representative account on multiple nodes, they may publish conflicting votes, causing your representative to be ignored by the network. Performance degradation in enterprise environments may be significant. Network Details \u00b6 Port Type Default Details 7075 UDP Enabled Primary node activity port Port configurable in config.json:node/peering_port Binds to all adapters, unicast Contents: Raw nano protocol datagrams All standard ledger activity goes through this port If blocked the node will not function 7075 TCP Enabled Node bootstrapping server Share port configuration in config.json:node/peering_port Binds to all adapters, unicast Contents: Raw nano protocol stream Transmits the ledger to new nodes in bulk If blocked other nodes will not be able retrieve the ledger from this node 7076 TCP Disabled RPC server Port configurable in config.json:rpc/port Enable in config.json:rpc_enable Binds to localhost by default for security reasons, configurable in config.json:rpc/address , unicast Contents: Unencrypted HTTP requests containing JSON object bodies Allows the node to be queried or controlled through HTTP requests If blocked the node will not be able to be queried or controlled by HTTP","title":"Configuration"},{"location":"running-a-node/configuration/#configuration-file-locations","text":"The node uses the config.json and rpc_config.json files found in the following locations: OS Location Windows C: \\U sers \\< user> \\A ppData \\L ocal \\N ano \\ OSX /Users/<user>/Library/Nano/ Linux /home/<user>/Nano/","title":"Configuration File Locations"},{"location":"running-a-node/configuration/#configjson","text":"This is the main configuration file for controlling node behavior. Below is an example file with most option and further details on specific configuration items.","title":"config.json"},{"location":"running-a-node/configuration/#example-file","text":"{ \"version\" : \"(int)\" , // Wallet version \"wallet\" : \"(string)\" , // Default wallet to load on boot (only for GUI wallet) \"account\" : \"(string)\" , // Default account to load on boot (only for GUI wallet) \"node\" : { \"version\" : \"(int)\" , // Node version \"peering_port\" : \"7075\" , // Default node port \"bootstrap_fraction_numerator\" : \"1\" , \"enable_voting\" : \"false\" , // Enable or disable voting for blocks. If disabled, saves some resources \"receive_minimum\" : \"1000000000000000000000000\" , // Minimum import receivable, default 1 Rai \"logging\" : { \"ledger\" : \"false\" , // Track incoming blocks \"ledger_duplicate\" : \"false\" , \"network\" : \"true\" , // Track general network info like forks \"network_message\" : \"false\" , \"network_publish\" : \"false\" , // Track blocks you publish to \"network_packet\" : \"false\" , // Track packets origin \"network_keepalive\" : \"false\" , // Track keepalive messages \"network_node_id_handshake\" : \"false\" , // Track node_id messages \"node_lifetime_tracing\" : \"false\" , \"insufficient_work\" : \"true\" , \"bulk_pull\" : \"false\" , // Bootstrap related logging \"work_generation_time\" : \"true\" , \"log_to_cerr\" : \"false\" , \"max_size\" : \"16777216\" , // Max size of logs before old files deletion. Default is 16MB \"rotation_size\" : \"4194304\" , // Size of Log File before rotation in bytes, Default is 4MB \"version\" : \"(int)\" , // Logging config version \"vote\" : \"false\" , // Track voting activities \"flush\" : \"true\" , // Setting this to false gives better performance, but may lose entries on crashes. \"upnp_details\" : \"false\" , // Determines if upnp discovery details are logged (default off to avoid sharing device info when shipping logs) \"timing\" : \"false\" , // Logs durations of key functions, such as batch verification, etc. \"log_ipc\" : \"true\" // Logging of IPC related messages }, \"vote_minimum\" : \"1000000000000000000000000000000000\" , // Prevents voting if delegated weight is under this threshold \"work_peers\" : \"\" , // Delegate a node your hash work, you need to get RPC access to that node \"preconfigured_peers\" : [ // List of defaults peers to connect on boot \"peering.nano.org\" , \"::ffff:138.201.94.249\" ], \"preconfigured_representatives\" : [ // List of defaults representatives , which you delegate voting weight , of your wallet \"xrb_3arg3asgtigae3xckabaaewkx3bzsh7nwz7jkmjos79ihyaxwphhm6qgjps4\" , \"xrb_1stofnrxuz3cai7ze75o174bpm7scwj9jn3nxsn8ntzg784jf1gzn1jjdkou\" , \"xrb_1q3hqecaw15cjt7thbtxu3pbzr1eihtzzpzxguoc37bj1wc5ffoh7w74gi6p\" , \"xrb_3dmtrrws3pocycmbqwawk6xs7446qxa36fcncush4s1pejk16ksbmakis78m\" , \"xrb_3hd4ezdgsp15iemx7h81in7xz5tpxi43b6b41zn3qmwiuypankocw3awes5k\" , \"xrb_1awsn43we17c1oshdru4azeqjz9wii41dy8npubm4rg11so7dx3jtqgoeahy\" , \"xrb_1anrzcuwe64rwxzcco8dkhpyxpi8kd7zsjc1oeimpc3ppca4mrjtwnqposrs\" , \"xrb_1hza3f7wiiqa7ig3jczyxj5yo86yegcmqk3criaz838j91sxcckpfhbhhra1\" ], \"online_weight_minimum\" : \"60000000000000000000000000000000000000\" , // Online weight minimum required to confirm block \"online_weight_quorum\" : \"50\" , // Percentage of votes required to rollback blocks \"password_fanout\" : \"1024\" , \"io_threads\" : \"4\" , \"work_threads\" : \"4\" , // PoW work threads. By default all available CPU threads, set lower value for 24/7 services \"callback_address\" : \"::ffff:127.0.0.1\" , // Callback IP address, in sample IPv4 localhost \"callback_port\" : \"17076\" , // Callback port \"callback_target\" : \"/\" , // Callback target, in sample root of callback listening server \"bootstrap_connections\" : \"16\" , // Multi-connection bootstrap. Should be a power of 2. \"bootstrap_connections_max\" : \"4\" , // Allowed incoming bootstrap connections count. Lower value save IOPS & bandwidth. 64 recommended for high-end fast nodes, 0 for HDD home users, \"lmdb_max_dbs\" : \"128\" , // Maximum open DBs (MAX_DBS https://lmdb.readthedocs.io/en/release/), increase default if more than 100 wallets required \"block_processor_batch_max_time\" : \"5000\" , // Number of milliseconds the block processor works at a time \"allow_local_peers\" : \"false\" , // To allow local host peering \"signature_checker_threads\" : \"1\" , // Number of threads to use for verifying signatures \"unchecked_cutoff_time\" : \"14400\" , // Number of seconds unchecked entry survives before being cleaned \"tcp_io_timeout\" : \"15\" , // Timeout in seconds for TCP connect-, read- and write operations \"tcp_idle_timeout\" : \"120\" , // Default idle disconnection timeout in seconds \"pow_sleep_interval\" : \"0\" , // The amount to sleep after each batch of POW calculations. Reduces max CPU usage at the expensive of a longer workgeneration time. \"external_address\" : \"::\" , \"external_port\" : \"0\" , \"websocket\" : { \"enable\" : \"false\" , \"address\" : \"::1\" , \"port\" : \"7078\" }, \"ipc\" : { // For more details about these options see the IPC section below \"tcp\" : { \"enable\" : \"false\" , \"port\" : \"7077\" , \"io_timeout\" : \"15\" }, \"local\" : { \"version\" : \"1\" , \"enable\" : \"false\" , \"allow_unsafe\" : \"false\" , \"path\" : \"\\/tmp\\/nano\" , \"io_timeout\" : \"15\" } }, \"diagnostics\" : { \"txn_tracking\" : { \"enable\" : \"false\" , // Tracks lmdb transactions \"min_read_txn_time\" : \"5000\" , // Logs stacktrace when read transactions are held longer than this time (milliseconds) \"min_write_txn_time\" : \"500\" , // Logs stacktrace when write transactions are held longer than this time (milliseconds) \"ignore_writes_below_block_processor_max_time\" : \"true\" // Ignore any block processor writes less than block_processor_max_time } } }, \"rpc_enable\" : \"true\" , // Enable (in-process or child process) or disable RPC. Out of process rpc servers can still be used if launched manually. \"rpc\" : { \"enable_sign_hash\" : \"true\" , \"max_work_generate_difficulty\" : \"ffffffffc0000000\" , \"version\" : \"1\" , \"child_process\" : { \"enable\" : \"false\" // Whether the rpc server is run as a child process rather than in-process \"rpc_path\" : \"C:\\\\Users\\\\Wesley\\\\Documents\\\\raiblocks\\\\build\\\\Debug\\\\nano_rpc.exe\" , // The nano_rpc executable to run if enabled. } }, \"opencl_enable\" : \"false\" , // Enable GPU hashing \"opencl\" : { \"platform\" : \"0\" , // Platform ID \"device\" : \"0\" , // Device ID \"threads\" : \"1048576\" } }","title":"Example file"},{"location":"running-a-node/configuration/#configuration-options","text":"","title":"Configuration options"},{"location":"running-a-node/configuration/#work_peers","text":"Used when offloading work generation to another node or service. Format must be ipv6, preceded by ::ffff: if ipv4. Hostnames are not allowed at this time. Calls are made to the ip:port designated using the standard RPC format work_generate . \"work_peers\" : [ \"::ffff:127.0.0.1:7076\" ] ,","title":"work_peers"},{"location":"running-a-node/configuration/#opencl_enable","text":"To enable GPU acceleration for PoW, set \"opencl_enable\" to \"true\" . Other OpenCL parameters may need to be adjusted depending on the desired setup (see example config.json file above).","title":"opencl_enable"},{"location":"running-a-node/configuration/#ipc","text":"On startup, the node will generate configuration options for IPC, one entry for each transport. By default, IPC is disabled. \"ipc\" : { \"tcp\" : { \"enable\" : \"false\" , \"port\" : \"7077\" , \"io_timeout\" : \"15000\" }, \"local\" : { \"enable\" : \"false\" , \"path\" : \"\\/tmp\\/nano\" , \"io_timeout\" : \"15000\" } } , Each transport also supports an experimental \"io_threads\" configuration value. If not present (default), the node's IO event loop will be used. If a value is present, a separate event loop with N threads will be created for the transport. For certain transports, this may scale better on some systems. Because the only IPC encoding is currently \"legacy RPC\", the RPC config options like \"enable_control\" still applies. For details about using the IPC setup, see the IPC Integration Guide .","title":"ipc"},{"location":"running-a-node/configuration/#websocket","text":"Available in Version 19.0+ only \"node\" : { \"websocket\" : { \"enable\" : \"true\" , \"address\" : \"::1\" , \"port\" : \"7078\" }, } With the above configuration, localhost clients should connect to ws://[::1]:7078 . For details on how to integrate using websockets, see the Websocket Support section of the Integration Guides .","title":"websocket"},{"location":"running-a-node/configuration/#http-callback","text":"\"node\" : { \"callback_address\" : \"::ffff:127.0.0.1\" , \"callback_port\" : \"17076\" , \"callback_target\" : \"/\" } JSON POST requests with every confirmed block are sent to the callback server as defined in the config values above: http://callback_address:callback_port<callback_target> . Callback target should include a leading slash. For details on how to integrate using the HTTP callback, see the HTTP Callback section of the Integration Guides . Tip When possible, using the websockets is recommended as it provides more efficiency, more options for types of information to receive and better control over the volume of notifications with filtering.","title":"HTTP callback"},{"location":"running-a-node/configuration/#rpc_configjson","text":"This is the configuration that controls how the RPC server connects and behaves when communicating with the node. Available in Version 19.0+ only","title":"rpc_config.json"},{"location":"running-a-node/configuration/#example-file_1","text":"{ \"address\" : \"::ffff:127.0.0.1\" , // Allowed IP for RPC connection \"port\" : \"7076\" , // Default RPC port \"enable_control\" : \"true\" , // Enable particular RPC command like: send, account_create, etc... \"max_json_depth\" : \"20\" , // prevent JSON overflow. Default recommended \"version\" : \"1\" , \"max_request_size\" : \"33554432\" , \"process\" : { \"io_threads\" : \"8\" , // Number of threads listening to RPC requests \"ipc_port\" : \"46000\" , // Must match port in ipc -> tcp of node config file \"num_ipc_connections\" : \"8\" // Max number of connections with nano_node (io_threads in config.json should be at least this number) } } Warning - Multiple Node Setups Never use the same seed on multiple running nano_node instances at the same time. Multiple nano_nodes using the same seed can result in network race conditions that degrade performance for your personal accounts. In addition, Publishing transactions from two nodes with the same account at the same time may cause an account fork which requires a slower representative voting process. Similarly, if you are running a representative account on multiple nodes, they may publish conflicting votes, causing your representative to be ignored by the network. Performance degradation in enterprise environments may be significant.","title":"Example file"},{"location":"running-a-node/configuration/#network-details","text":"Port Type Default Details 7075 UDP Enabled Primary node activity port Port configurable in config.json:node/peering_port Binds to all adapters, unicast Contents: Raw nano protocol datagrams All standard ledger activity goes through this port If blocked the node will not function 7075 TCP Enabled Node bootstrapping server Share port configuration in config.json:node/peering_port Binds to all adapters, unicast Contents: Raw nano protocol stream Transmits the ledger to new nodes in bulk If blocked other nodes will not be able retrieve the ledger from this node 7076 TCP Disabled RPC server Port configurable in config.json:rpc/port Enable in config.json:rpc_enable Binds to localhost by default for security reasons, configurable in config.json:rpc/address , unicast Contents: Unencrypted HTTP requests containing JSON object bodies Allows the node to be queried or controlled through HTTP requests If blocked the node will not be able to be queried or controlled by HTTP","title":"Network Details"},{"location":"running-a-node/docker-management/","text":"Docker greatly simplifies node management. Below we will go over some of the best practices for managing your Docker Image. Nano Folder \u00b6 The Nano folder contains: wallets file (wallets.ldb), log files , ledger file (data.ldb), config file ( config.json ) and related lock files. For Docker setups, the ${NANO_HOST_FOLDER} indicated in the steps below will be the location of these files on your host machine. Managing the Container \u00b6 Starting \u00b6 The following command will start the node container. Either set the specified environment variables (i.e. NANO_NAME=nano_node ) or substitute in explicit values to the docker run command. ${NANO_NAME} - The name that you would like to assign to the docker container. ${NANO_TAG} - The version of docker image you will be running. For consumers, latest is acceptable, but for enterprise use, a manually set tag to the latest version number is recommended. ${NANO_HOST_FOLDER} - Location on the host computer where the ledger, configuration files, and logs will be stored. The Docker container will directly store files such as config.json and data.ldb into this directory. docker run --restart = unless-stopped -d \\ -p 7075 :7075/udp \\ -p 7075 :7075 \\ -p 127 .0.0.1:7076:7076 \\ -v ${ NANO_HOST_FOLDER } :/root \\ --name ${ NANO_NAME } \\ nanocurrency/nano: ${ NANO_TAG } Option Purpose -d Starts the docker container as a daemon -p 7075:7075/udp Maps the network activity port -p 7075:7075 Maps the bootstrapping TCP port -v ${NANO_HOST_FOLDER}:/root Maps the host's Nano directory to the guest /root directory --restart=unless-stopped Restarts the container if it crashes nanocurrency/nano:${NANO_TAG} Specifies the container to execute with tag -p 127.0.0.1:7076:7076 or -p [::1]:7076:7076 Indicates that only RPC commands originating from the host will be accepted. Without this, anyone with access to your system's IP address can control your nano_node. If you wish to use different ports, change the host ports in the docker run command; do not change the ports in the config.json file. This will start the docker container using host ports 7075 and 7076 and put the data in a permanent location in your hosts's home directory, outside the docker container. Upon successful startup, Docker will return the container's full ID. A typical ID will look something like the value below. 0118ad5b48489303aa9d195f8a45ddc74a90e8a7209fc67d5483aabf3170d619 Note TCP is used for bootstrapping and UDP is used to stream live transactions on the network. For more information, see the network details . On port 7075, both TCP and UDP are required. Warning If you are running multiple nano_node Docker containers, DO NOT share the same ${NANO_HOST_FOLDER} , each nano_node requires its own independent files. Stopping \u00b6 To stop your Nano Node: docker stop ${ NANO_NAME } Restarting \u00b6 If you need to restart your node for any reason: docker restart ${ NANO_NAME } Checking Status \u00b6 A list of currently running containers can be found by issuing the following command. docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 0118ad5b4848 nanocurrency/nano \"/bin/bash /entry.sh\" 41 seconds ago Up 56 seconds 0 .0.0.0:7075->7075/tcp, 0 .0.0.0:7075->7075/udp, 127 .0.0.1:7076->7076/tcp nano_node_1 Updating the Docker Image \u00b6 First, stop the container if it is running. docker stop ${ NANO_NAME } Then we can download the latest version with docker pull (or whichever version we need). Pull latest release of the Nano Node docker pull nanocurrency/nano Or pull the Nano Node tagged with \"V18.0\" from Dockerhub docker pull nanocurrency/nano:V18.0 Lastly, we start up the docker container again using the same command. Updating Node Configuration \u00b6 First, stop the container if it is running. docker stop ${ NANO_NAME } Warning Modifications made to config.json while the Docker container is running may not properly save and cause unwanted side-effects. Always stop the container before modifying configuration files. You may now edit the config.json file located in ${NANO_HOST_FOLDER} using your preferred text editor. Once modifications are complete, start up the docker container again using the same command. RPC calls to the node \u00b6 You can use the RPC interface on the local host via curl to interact with the node. For example the version of the node: curl -d '{ \"action\" : \"version\" }' [ ::1 ] :7076 Or the blockcount: curl -d '{ \"action\" : \"block_count\" }' [ ::1 ] :7076 For other commands, review the RPC Protocol details. Troubleshooting \u00b6 If you get Error starting userland proxy: port is not a proto:IP:port: 'tcp:[:'. or want to expose IPv4 port, use -p 127.0.0.1:7076:7076 . If you get create ~: volume name is too short, names should be at least two alphanumeric characters. replace the ~ with the full pathname such as /Users/someuser .","title":"Docker Management"},{"location":"running-a-node/docker-management/#nano-folder","text":"The Nano folder contains: wallets file (wallets.ldb), log files , ledger file (data.ldb), config file ( config.json ) and related lock files. For Docker setups, the ${NANO_HOST_FOLDER} indicated in the steps below will be the location of these files on your host machine.","title":"Nano Folder"},{"location":"running-a-node/docker-management/#managing-the-container","text":"","title":"Managing the Container"},{"location":"running-a-node/docker-management/#starting","text":"The following command will start the node container. Either set the specified environment variables (i.e. NANO_NAME=nano_node ) or substitute in explicit values to the docker run command. ${NANO_NAME} - The name that you would like to assign to the docker container. ${NANO_TAG} - The version of docker image you will be running. For consumers, latest is acceptable, but for enterprise use, a manually set tag to the latest version number is recommended. ${NANO_HOST_FOLDER} - Location on the host computer where the ledger, configuration files, and logs will be stored. The Docker container will directly store files such as config.json and data.ldb into this directory. docker run --restart = unless-stopped -d \\ -p 7075 :7075/udp \\ -p 7075 :7075 \\ -p 127 .0.0.1:7076:7076 \\ -v ${ NANO_HOST_FOLDER } :/root \\ --name ${ NANO_NAME } \\ nanocurrency/nano: ${ NANO_TAG } Option Purpose -d Starts the docker container as a daemon -p 7075:7075/udp Maps the network activity port -p 7075:7075 Maps the bootstrapping TCP port -v ${NANO_HOST_FOLDER}:/root Maps the host's Nano directory to the guest /root directory --restart=unless-stopped Restarts the container if it crashes nanocurrency/nano:${NANO_TAG} Specifies the container to execute with tag -p 127.0.0.1:7076:7076 or -p [::1]:7076:7076 Indicates that only RPC commands originating from the host will be accepted. Without this, anyone with access to your system's IP address can control your nano_node. If you wish to use different ports, change the host ports in the docker run command; do not change the ports in the config.json file. This will start the docker container using host ports 7075 and 7076 and put the data in a permanent location in your hosts's home directory, outside the docker container. Upon successful startup, Docker will return the container's full ID. A typical ID will look something like the value below. 0118ad5b48489303aa9d195f8a45ddc74a90e8a7209fc67d5483aabf3170d619 Note TCP is used for bootstrapping and UDP is used to stream live transactions on the network. For more information, see the network details . On port 7075, both TCP and UDP are required. Warning If you are running multiple nano_node Docker containers, DO NOT share the same ${NANO_HOST_FOLDER} , each nano_node requires its own independent files.","title":"Starting"},{"location":"running-a-node/docker-management/#stopping","text":"To stop your Nano Node: docker stop ${ NANO_NAME }","title":"Stopping"},{"location":"running-a-node/docker-management/#restarting","text":"If you need to restart your node for any reason: docker restart ${ NANO_NAME }","title":"Restarting"},{"location":"running-a-node/docker-management/#checking-status","text":"A list of currently running containers can be found by issuing the following command. docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 0118ad5b4848 nanocurrency/nano \"/bin/bash /entry.sh\" 41 seconds ago Up 56 seconds 0 .0.0.0:7075->7075/tcp, 0 .0.0.0:7075->7075/udp, 127 .0.0.1:7076->7076/tcp nano_node_1","title":"Checking Status"},{"location":"running-a-node/docker-management/#updating-the-docker-image","text":"First, stop the container if it is running. docker stop ${ NANO_NAME } Then we can download the latest version with docker pull (or whichever version we need). Pull latest release of the Nano Node docker pull nanocurrency/nano Or pull the Nano Node tagged with \"V18.0\" from Dockerhub docker pull nanocurrency/nano:V18.0 Lastly, we start up the docker container again using the same command.","title":"Updating the Docker Image"},{"location":"running-a-node/docker-management/#updating-node-configuration","text":"First, stop the container if it is running. docker stop ${ NANO_NAME } Warning Modifications made to config.json while the Docker container is running may not properly save and cause unwanted side-effects. Always stop the container before modifying configuration files. You may now edit the config.json file located in ${NANO_HOST_FOLDER} using your preferred text editor. Once modifications are complete, start up the docker container again using the same command.","title":"Updating Node Configuration"},{"location":"running-a-node/docker-management/#rpc-calls-to-the-node","text":"You can use the RPC interface on the local host via curl to interact with the node. For example the version of the node: curl -d '{ \"action\" : \"version\" }' [ ::1 ] :7076 Or the blockcount: curl -d '{ \"action\" : \"block_count\" }' [ ::1 ] :7076 For other commands, review the RPC Protocol details.","title":"RPC calls to the node"},{"location":"running-a-node/docker-management/#troubleshooting","text":"If you get Error starting userland proxy: port is not a proto:IP:port: 'tcp:[:'. or want to expose IPv4 port, use -p 127.0.0.1:7076:7076 . If you get create ~: volume name is too short, names should be at least two alphanumeric characters. replace the ~ with the full pathname such as /Users/someuser .","title":"Troubleshooting"},{"location":"running-a-node/node-setup/","text":"While you can run a Nano node by downloading a binary or building from source, it is recommended to use a Docker container. When using the official Docker images , your node will be much easier to upgrade and maintain. Note The guides found on this site make some basic assumptions that should be understood before continuing: You have a basic understanding of Docker. You are using Nano's official Docker images to manage your node. If you decide to use a different method, you will need to be able to fill in the gaps when following along. Beta Network Setup The details below are focused on running a node on the main network. The beta network is also available for testing and is a great place to learn about node management. Beta nodes also help improve our network, so please consider running one! See the Beta Network page for details on how to setup a node on this test network. Hardware Recommendations \u00b6 Principal Representative Node \u00b6 The following are minimum recommended specifications for nodes with 0.1% or greater voting weight ( Principal Representatives ): 4GB RAM Quad-Core CPU 250 MB/s bandwidth (2TB of available monthly bandwidth) SSD-based hard drive Representative Node \u00b6 The following are minimum recommended specifications for nodes with less than 0.1% voting weight (regular Representatives ): 2GB RAM Dual-Core CPU 100 MB/s bandwidth (1TB of available monthly bandwidth) SSD-based hard drive Warning Various factors affect resource usage including how often RPC calls are made, other applications running on the machine, etc. These recommendations should be evaluated along with other considerations. Proof-of-Work Generation For nodes being used with services requiring regular or high volume sending and receiving of transactions, special considerations must be made for handling Proof-of-Work generation activities. GPUs provide much higher throughput than CPUs. Work peers can also be configured for generating work outside the node. Network Ports \u00b6 The nano_node will use two configurable ports throughout its lifecycle. The default values suggested by the network details are below: Network Ports Overview 7075 UDP: For live network activity 7075 TCP: For bootstrap network activity 7076 TCP: For communication with RPC server. Do not expose this outside of your production environment. Anyone with access to this port can control your node's RPC. Installing Docker \u00b6 Docker must be installed on the host machine and instructions can be found here: https://docs.docker.com/install/ . We recommend installing the latest stable version available. Pulling the Docker Image \u00b6 The Docker image can be downloaded via docker pull . We can either grab the latest or a specific version/tag. Not specifying a tag defaults to latest . An example of each is found below. Pulls the latest release of the Nano Node: docker pull nanocurrency/nano Pulls a specific version of the Nano node: docker pull nanocurrency/nano:V18.0 Tip If you are running in an enterprise environment, it is recommended that you explicitly specify the latest stable version to ensure deterministic containers. A list of tags can be found at the official Nano Currency Docker Hub . Warning - Multiple Node Setups Never use the same seed on multiple running nano_node instances at the same time. Multiple nano_nodes using the same seed can result in network race conditions that degrade performance for your personal accounts. In addition, Publishing transactions from two nodes with the same account at the same time may cause an account fork which requires a slower representative voting process. Similarly, if you are running a representative account on multiple nodes, they may publish conflicting votes, causing your representative to be ignored by the network. Performance degradation in enterprise environments may be significant. Starting the Node \u00b6 With Docker there are basic commands for managing containers. To properly bring the node up, learn these commands beginning with starting the container . Advanced Builds For additional options around building the node to run on various platforms, head over to the Integration Guides Build Options .","title":"Node Setup"},{"location":"running-a-node/node-setup/#hardware-recommendations","text":"","title":"Hardware Recommendations"},{"location":"running-a-node/node-setup/#principal-representative-node","text":"The following are minimum recommended specifications for nodes with 0.1% or greater voting weight ( Principal Representatives ): 4GB RAM Quad-Core CPU 250 MB/s bandwidth (2TB of available monthly bandwidth) SSD-based hard drive","title":"Principal Representative Node"},{"location":"running-a-node/node-setup/#representative-node","text":"The following are minimum recommended specifications for nodes with less than 0.1% voting weight (regular Representatives ): 2GB RAM Dual-Core CPU 100 MB/s bandwidth (1TB of available monthly bandwidth) SSD-based hard drive Warning Various factors affect resource usage including how often RPC calls are made, other applications running on the machine, etc. These recommendations should be evaluated along with other considerations. Proof-of-Work Generation For nodes being used with services requiring regular or high volume sending and receiving of transactions, special considerations must be made for handling Proof-of-Work generation activities. GPUs provide much higher throughput than CPUs. Work peers can also be configured for generating work outside the node.","title":"Representative Node"},{"location":"running-a-node/node-setup/#network-ports","text":"The nano_node will use two configurable ports throughout its lifecycle. The default values suggested by the network details are below: Network Ports Overview 7075 UDP: For live network activity 7075 TCP: For bootstrap network activity 7076 TCP: For communication with RPC server. Do not expose this outside of your production environment. Anyone with access to this port can control your node's RPC.","title":"Network Ports"},{"location":"running-a-node/node-setup/#installing-docker","text":"Docker must be installed on the host machine and instructions can be found here: https://docs.docker.com/install/ . We recommend installing the latest stable version available.","title":"Installing Docker"},{"location":"running-a-node/node-setup/#pulling-the-docker-image","text":"The Docker image can be downloaded via docker pull . We can either grab the latest or a specific version/tag. Not specifying a tag defaults to latest . An example of each is found below. Pulls the latest release of the Nano Node: docker pull nanocurrency/nano Pulls a specific version of the Nano node: docker pull nanocurrency/nano:V18.0 Tip If you are running in an enterprise environment, it is recommended that you explicitly specify the latest stable version to ensure deterministic containers. A list of tags can be found at the official Nano Currency Docker Hub . Warning - Multiple Node Setups Never use the same seed on multiple running nano_node instances at the same time. Multiple nano_nodes using the same seed can result in network race conditions that degrade performance for your personal accounts. In addition, Publishing transactions from two nodes with the same account at the same time may cause an account fork which requires a slower representative voting process. Similarly, if you are running a representative account on multiple nodes, they may publish conflicting votes, causing your representative to be ignored by the network. Performance degradation in enterprise environments may be significant.","title":"Pulling the Docker Image"},{"location":"running-a-node/node-setup/#starting-the-node","text":"With Docker there are basic commands for managing containers. To properly bring the node up, learn these commands beginning with starting the container . Advanced Builds For additional options around building the node to run on various platforms, head over to the Integration Guides Build Options .","title":"Starting the Node"},{"location":"running-a-node/overview/","text":"Running a node is a key way to help decentralize the network and provide a network access point for systems built on top of Nano. Before setting up a node we recommend reviewing the following details in order to understand more about the motivations for running, required upkeep, types and recommended specifications for nodes. Why run a node? \u00b6 There are many reasons individuals and organizations have decided to run a Nano node, but a few common ones are: To have a trusted copy of the ledger for reference To help further decentralize the network To receive public exposure as a Primary Representative To have an access point to build tools and services on top of Regardless of your motivation for running a node, your efforts will only be helpful if you take proper care of running it on correctly provisioned machines and keep up with ongoing maintenance of both the node, OS and any supporting systems. Node types \u00b6 Principal Representative Nodes \u00b6 Currently, nodes configured with Representative accounts with at least 0.1% of voting weight (133,248.061999106 Nano) delegated to them participate more broadly in network consensus because they send votes to their peers which are subsequently rebroadcast. Becoming a Principal Representative With the ability for any user on the network to redelegate their voting weight, even an account with no weight today can become a Principal Representative over time. Representative Nodes \u00b6 Nodes with less than 0.1% of voting weight will validate and vote on transactions seen on the network; however, other peers on the network will not rebroadcast their votes. Resources and ongoing maintenance \u00b6 Nodes consume CPU, RAM, disk IO and bandwidth IO resources, all of which come at a cost. In order to keep the node participating and in-sync, the recommended specifications for machines based on node type below should be followed. Hardware Recommendations \u00b6 Principal Representative Node \u00b6 The following are minimum recommended specifications for nodes with 0.1% or greater voting weight ( Principal Representatives ): 4GB RAM Quad-Core CPU 250 MB/s bandwidth (2TB of available monthly bandwidth) SSD-based hard drive Representative Node \u00b6 The following are minimum recommended specifications for nodes with less than 0.1% voting weight (regular Representatives ): 2GB RAM Dual-Core CPU 100 MB/s bandwidth (1TB of available monthly bandwidth) SSD-based hard drive Warning Various factors affect resource usage including how often RPC calls are made, other applications running on the machine, etc. These recommendations should be evaluated along with other considerations. Proof-of-Work Generation For nodes being used with services requiring regular or high volume sending and receiving of transactions, special considerations must be made for handling Proof-of-Work generation activities. GPUs provide much higher throughput than CPUs. Work peers can also be configured for generating work outside the node. And with any system, ongoing maintenance must be taken into account to avoid issues: Performing OS-level udpates and security patches regularly applied Upgrading to the latest node versions they are available Following best practices for securing passwords or other sensitive data related to the node Without taking care with the security and maintenance of systems hosting the node, any benefit to the network could be lost.","title":"Overview"},{"location":"running-a-node/overview/#why-run-a-node","text":"There are many reasons individuals and organizations have decided to run a Nano node, but a few common ones are: To have a trusted copy of the ledger for reference To help further decentralize the network To receive public exposure as a Primary Representative To have an access point to build tools and services on top of Regardless of your motivation for running a node, your efforts will only be helpful if you take proper care of running it on correctly provisioned machines and keep up with ongoing maintenance of both the node, OS and any supporting systems.","title":"Why run a node?"},{"location":"running-a-node/overview/#node-types","text":"","title":"Node types"},{"location":"running-a-node/overview/#principal-representative-nodes","text":"Currently, nodes configured with Representative accounts with at least 0.1% of voting weight (133,248.061999106 Nano) delegated to them participate more broadly in network consensus because they send votes to their peers which are subsequently rebroadcast. Becoming a Principal Representative With the ability for any user on the network to redelegate their voting weight, even an account with no weight today can become a Principal Representative over time.","title":"Principal Representative Nodes"},{"location":"running-a-node/overview/#representative-nodes","text":"Nodes with less than 0.1% of voting weight will validate and vote on transactions seen on the network; however, other peers on the network will not rebroadcast their votes.","title":"Representative Nodes"},{"location":"running-a-node/overview/#resources-and-ongoing-maintenance","text":"Nodes consume CPU, RAM, disk IO and bandwidth IO resources, all of which come at a cost. In order to keep the node participating and in-sync, the recommended specifications for machines based on node type below should be followed.","title":"Resources and ongoing maintenance"},{"location":"running-a-node/overview/#hardware-recommendations","text":"","title":"Hardware Recommendations"},{"location":"running-a-node/overview/#principal-representative-node","text":"The following are minimum recommended specifications for nodes with 0.1% or greater voting weight ( Principal Representatives ): 4GB RAM Quad-Core CPU 250 MB/s bandwidth (2TB of available monthly bandwidth) SSD-based hard drive","title":"Principal Representative Node"},{"location":"running-a-node/overview/#representative-node","text":"The following are minimum recommended specifications for nodes with less than 0.1% voting weight (regular Representatives ): 2GB RAM Dual-Core CPU 100 MB/s bandwidth (1TB of available monthly bandwidth) SSD-based hard drive Warning Various factors affect resource usage including how often RPC calls are made, other applications running on the machine, etc. These recommendations should be evaluated along with other considerations. Proof-of-Work Generation For nodes being used with services requiring regular or high volume sending and receiving of transactions, special considerations must be made for handling Proof-of-Work generation activities. GPUs provide much higher throughput than CPUs. Work peers can also be configured for generating work outside the node. And with any system, ongoing maintenance must be taken into account to avoid issues: Performing OS-level udpates and security patches regularly applied Upgrading to the latest node versions they are available Following best practices for securing passwords or other sensitive data related to the node Without taking care with the security and maintenance of systems hosting the node, any benefit to the network could be lost.","title":"Representative Node"},{"location":"running-a-node/troubleshooting/","text":"Log Files \u00b6 The default location of standard node log files for various systems: OS Location Windows C: \\U sers \\< user> \\A ppData \\L ocal \\N ano \\l og -or- %LOCALAPPDATA% \\N ano \\l og OSX /Users/<user>/Library/Nano/log Linux /home/<user>/Nano/log Statistics from RPC \u00b6 The \"stats\" RPC command can be used by external processes to query statistics, such as traffic counters. This is useful for diagnostics, monitoring and display in admin consoles. Statistics are optionally logged to separate text files. For implementations details, please see Statistics API Configuration \u00b6 All configuration nodes and values are optional, with the default values shown in comments below: \"node\": { ... \"statistics\": { // Sampling configuration (optional) // Only activate if you need sampling information, as there's some overhead associated with this feature. \"sampling\": { \"enabled\": \"true\", // If sampling is enabled. Default false. \"capacity\": \"5\", // How many samples to keep. Must be set if sampling is enabled. \"interval\": \"1000\" // Sample interval in milliseconds. Must be set if sampling is enabled. }, // File logging (optional) \"log\": { \"interval_counters\": \"5000\", // How often to write counters to file in milliseconds. Default 0 (off) \"interval_samples\": \"5000\", // How often to write samples to file, milliseconds. Default 0 (off) \"rotation_count\": \"5\", // Rotate file after writing statistics this many times. Default 100. \"headers\": \"true\", // Write header containing log \"filename_counters\": \"counters.stat\", \"filename_samples\": \"samples.stat\" } } } Available type, detail and direction values \u00b6 type: traffic error message block ledger rollback bootstrap vote peering details: all // error specific bad_sender insufficient_work // ledger, block, bootstrap send receive open change state_block // Message specific keepalive publish republish_vote confirm_req confirm_ack // Bootstrap specific initiate bulk_pull bulk_push bulk_pull_blocks frontier_req // Vote specific vote_valid vote_replay vote_invalid // Peering handshake dir (direction) : in out RPC Command \u00b6 Counters query: \u00b6 { \"action\": \"stats\", \"type\": \"counters\" } Counters response \u00b6 { \"type\": \"counters\", \"created\": \"2018.03.29 01:46:36\", \"entries\": [ { \"time\": \"01:46:36\", \"type\": \"traffic\", \"detail\": \"all\", \"dir\": \"in\", \"value\": \"3122792\" }, { \"time\": \"01:46:36\", \"type\": \"traffic\", \"detail\": \"all\", \"dir\": \"out\", \"value\": \"203184\" }, { \"time\": \"01:46:36\", \"type\": \"message\", \"detail\": \"all\", \"dir\": \"in\", \"value\": \"12494\" }, { \"time\": \"01:46:36\", \"type\": \"message\", \"detail\": \"all\", \"dir\": \"out\", \"value\": \"1380\" }, { \"time\": \"01:46:36\", \"type\": \"message\", \"detail\": \"keepalive\", \"dir\": \"in\", \"value\": \"172\" }, ... ] } Samples query: \u00b6 { \"action\": \"stats\", \"type\": \"samples\" } Samples response \u00b6 { \"type\": \"samples\", \"created\": \"2018.03.29 01:47:08\", \"entries\": [ { \"time\": \"01:47:04\", \"type\": \"traffic\", \"detail\": \"all\", \"dir\": \"in\", \"value\": \"59480\" }, { \"time\": \"01:47:05\", \"type\": \"traffic\", \"detail\": \"all\", \"dir\": \"in\", \"value\": \"44496\" }, { \"time\": \"01:47:06\", \"type\": \"traffic\", \"detail\": \"all\", \"dir\": \"in\", \"value\": \"44136\" }, { \"time\": \"01:47:07\", \"type\": \"traffic\", \"detail\": \"all\", \"dir\": \"in\", \"value\": \"18784\" }, { \"time\": \"01:47:08\", \"type\": \"traffic\", \"detail\": \"all\", \"dir\": \"in\", \"value\": \"22680\" }, { \"time\": \"01:47:03\", \"type\": \"traffic\", \"detail\": \"all\", \"dir\": \"out\", \"value\": \"4128\" }, { \"time\": \"01:47:04\", \"type\": \"message\", \"detail\": \"all\", \"dir\": \"out\", \"value\": \"17\" }, { \"time\": \"01:47:05\", \"type\": \"message\", \"detail\": \"all\", \"dir\": \"out\", \"value\": \"10\" }, ... ] } Log file example \u00b6 counters.stat As specified in the example config, sampling interval is 1 second, stats are logged every 5 seconds, and the file rotates after 5 log cycles. counters,2018.03.29 01:45:36 01:44:56,bootstrap,all,out,1 01:45:36,bootstrap,initiate,out,2 counters,2018.03.29 01:45:41 01:45:41,traffic,all,in,456344 01:45:41,traffic,all,out,189520 01:45:41,message,all,in,1925 01:45:41,message,all,out,1289 01:45:38,message,keepalive,in,165 01:45:41,message,keepalive,out,1027 01:45:41,message,publish,in,34 01:45:38,message,confirm_req,in,164 01:45:41,message,confirm_req,out,262 01:45:41,message,confirm_ack,in,1562 01:45:36,bootstrap,all,out,2 01:45:41,bootstrap,initiate,out,3 samples.stat As specified in the example config, logging is done every 5 seconds and the sampling capacity is 5 (how many samplings are kept) samples,2018.03.29 01:45:36 01:45:36,bootstrap,initiate,out,2 samples,2018.03.29 01:45:41 01:45:37,traffic,all,in,322608 01:45:38,traffic,all,in,37064 01:45:39,traffic,all,in,38752 01:45:40,traffic,all,in,25632 01:45:38,traffic,all,out,185072 01:45:39,traffic,all,out,3072 01:45:41,traffic,all,out,920 01:45:37,message,all,in,1387 01:45:38,message,all,in,126 01:45:39,message,all,in,179 01:45:40,message,all,in,101 01:45:37,message,all,out,1254 01:45:38,message,all,out,10 01:45:39,message,all,out,16 01:45:41,message,all,out,6 01:45:38,message,keepalive,in,165 01:45:38,message,keepalive,out,1011 01:45:39,message,keepalive,out,12 01:45:41,message,keepalive,out,3 01:45:37,message,publish,in,19 01:45:38,message,publish,in,8 01:45:40,message,publish,in,3 01:45:41,message,publish,in,4 01:45:38,message,confirm_req,in,164 01:45:37,message,confirm_req,out,249 01:45:38,message,confirm_req,out,3 01:45:39,message,confirm_req,out,6 01:45:41,message,confirm_req,out,3 01:45:37,message,confirm_ack,in,1046 01:45:38,message,confirm_ack,in,141 01:45:39,message,confirm_ack,in,150 01:45:40,message,confirm_ack,in,100 01:45:36,bootstrap,all,out,2 01:45:36,bootstrap,initiate,out,2 01:45:41,bootstrap,initiate,out,1","title":"Troubleshooting"},{"location":"running-a-node/troubleshooting/#log-files","text":"The default location of standard node log files for various systems: OS Location Windows C: \\U sers \\< user> \\A ppData \\L ocal \\N ano \\l og -or- %LOCALAPPDATA% \\N ano \\l og OSX /Users/<user>/Library/Nano/log Linux /home/<user>/Nano/log","title":"Log Files"},{"location":"running-a-node/troubleshooting/#statistics-from-rpc","text":"The \"stats\" RPC command can be used by external processes to query statistics, such as traffic counters. This is useful for diagnostics, monitoring and display in admin consoles. Statistics are optionally logged to separate text files. For implementations details, please see Statistics API","title":"Statistics from RPC"},{"location":"running-a-node/troubleshooting/#configuration","text":"All configuration nodes and values are optional, with the default values shown in comments below: \"node\": { ... \"statistics\": { // Sampling configuration (optional) // Only activate if you need sampling information, as there's some overhead associated with this feature. \"sampling\": { \"enabled\": \"true\", // If sampling is enabled. Default false. \"capacity\": \"5\", // How many samples to keep. Must be set if sampling is enabled. \"interval\": \"1000\" // Sample interval in milliseconds. Must be set if sampling is enabled. }, // File logging (optional) \"log\": { \"interval_counters\": \"5000\", // How often to write counters to file in milliseconds. Default 0 (off) \"interval_samples\": \"5000\", // How often to write samples to file, milliseconds. Default 0 (off) \"rotation_count\": \"5\", // Rotate file after writing statistics this many times. Default 100. \"headers\": \"true\", // Write header containing log \"filename_counters\": \"counters.stat\", \"filename_samples\": \"samples.stat\" } } }","title":"Configuration"},{"location":"running-a-node/troubleshooting/#available-type-detail-and-direction-values","text":"type: traffic error message block ledger rollback bootstrap vote peering details: all // error specific bad_sender insufficient_work // ledger, block, bootstrap send receive open change state_block // Message specific keepalive publish republish_vote confirm_req confirm_ack // Bootstrap specific initiate bulk_pull bulk_push bulk_pull_blocks frontier_req // Vote specific vote_valid vote_replay vote_invalid // Peering handshake dir (direction) : in out","title":"Available type, detail and direction values"},{"location":"running-a-node/troubleshooting/#rpc-command","text":"","title":"RPC Command"},{"location":"running-a-node/troubleshooting/#counters-query","text":"{ \"action\": \"stats\", \"type\": \"counters\" }","title":"Counters query:"},{"location":"running-a-node/troubleshooting/#counters-response","text":"{ \"type\": \"counters\", \"created\": \"2018.03.29 01:46:36\", \"entries\": [ { \"time\": \"01:46:36\", \"type\": \"traffic\", \"detail\": \"all\", \"dir\": \"in\", \"value\": \"3122792\" }, { \"time\": \"01:46:36\", \"type\": \"traffic\", \"detail\": \"all\", \"dir\": \"out\", \"value\": \"203184\" }, { \"time\": \"01:46:36\", \"type\": \"message\", \"detail\": \"all\", \"dir\": \"in\", \"value\": \"12494\" }, { \"time\": \"01:46:36\", \"type\": \"message\", \"detail\": \"all\", \"dir\": \"out\", \"value\": \"1380\" }, { \"time\": \"01:46:36\", \"type\": \"message\", \"detail\": \"keepalive\", \"dir\": \"in\", \"value\": \"172\" }, ... ] }","title":"Counters response"},{"location":"running-a-node/troubleshooting/#samples-query","text":"{ \"action\": \"stats\", \"type\": \"samples\" }","title":"Samples query:"},{"location":"running-a-node/troubleshooting/#samples-response","text":"{ \"type\": \"samples\", \"created\": \"2018.03.29 01:47:08\", \"entries\": [ { \"time\": \"01:47:04\", \"type\": \"traffic\", \"detail\": \"all\", \"dir\": \"in\", \"value\": \"59480\" }, { \"time\": \"01:47:05\", \"type\": \"traffic\", \"detail\": \"all\", \"dir\": \"in\", \"value\": \"44496\" }, { \"time\": \"01:47:06\", \"type\": \"traffic\", \"detail\": \"all\", \"dir\": \"in\", \"value\": \"44136\" }, { \"time\": \"01:47:07\", \"type\": \"traffic\", \"detail\": \"all\", \"dir\": \"in\", \"value\": \"18784\" }, { \"time\": \"01:47:08\", \"type\": \"traffic\", \"detail\": \"all\", \"dir\": \"in\", \"value\": \"22680\" }, { \"time\": \"01:47:03\", \"type\": \"traffic\", \"detail\": \"all\", \"dir\": \"out\", \"value\": \"4128\" }, { \"time\": \"01:47:04\", \"type\": \"message\", \"detail\": \"all\", \"dir\": \"out\", \"value\": \"17\" }, { \"time\": \"01:47:05\", \"type\": \"message\", \"detail\": \"all\", \"dir\": \"out\", \"value\": \"10\" }, ... ] }","title":"Samples response"},{"location":"running-a-node/troubleshooting/#log-file-example","text":"counters.stat As specified in the example config, sampling interval is 1 second, stats are logged every 5 seconds, and the file rotates after 5 log cycles. counters,2018.03.29 01:45:36 01:44:56,bootstrap,all,out,1 01:45:36,bootstrap,initiate,out,2 counters,2018.03.29 01:45:41 01:45:41,traffic,all,in,456344 01:45:41,traffic,all,out,189520 01:45:41,message,all,in,1925 01:45:41,message,all,out,1289 01:45:38,message,keepalive,in,165 01:45:41,message,keepalive,out,1027 01:45:41,message,publish,in,34 01:45:38,message,confirm_req,in,164 01:45:41,message,confirm_req,out,262 01:45:41,message,confirm_ack,in,1562 01:45:36,bootstrap,all,out,2 01:45:41,bootstrap,initiate,out,3 samples.stat As specified in the example config, logging is done every 5 seconds and the sampling capacity is 5 (how many samplings are kept) samples,2018.03.29 01:45:36 01:45:36,bootstrap,initiate,out,2 samples,2018.03.29 01:45:41 01:45:37,traffic,all,in,322608 01:45:38,traffic,all,in,37064 01:45:39,traffic,all,in,38752 01:45:40,traffic,all,in,25632 01:45:38,traffic,all,out,185072 01:45:39,traffic,all,out,3072 01:45:41,traffic,all,out,920 01:45:37,message,all,in,1387 01:45:38,message,all,in,126 01:45:39,message,all,in,179 01:45:40,message,all,in,101 01:45:37,message,all,out,1254 01:45:38,message,all,out,10 01:45:39,message,all,out,16 01:45:41,message,all,out,6 01:45:38,message,keepalive,in,165 01:45:38,message,keepalive,out,1011 01:45:39,message,keepalive,out,12 01:45:41,message,keepalive,out,3 01:45:37,message,publish,in,19 01:45:38,message,publish,in,8 01:45:40,message,publish,in,3 01:45:41,message,publish,in,4 01:45:38,message,confirm_req,in,164 01:45:37,message,confirm_req,out,249 01:45:38,message,confirm_req,out,3 01:45:39,message,confirm_req,out,6 01:45:41,message,confirm_req,out,3 01:45:37,message,confirm_ack,in,1046 01:45:38,message,confirm_ack,in,141 01:45:39,message,confirm_ack,in,150 01:45:40,message,confirm_ack,in,100 01:45:36,bootstrap,all,out,2 01:45:36,bootstrap,initiate,out,2 01:45:41,bootstrap,initiate,out,1","title":"Log file example"},{"location":"snippets/beta-folder-locations/","text":"OS Location Windows C: \\U sers \\< user> \\A ppData \\L ocal \\N anoBeta \\ OSX /Users/<user>/Library/NanoBeta/ Linux /home/<user>/NanoBeta/","title":"Beta folder locations"},{"location":"snippets/beta-network-details-simple/","text":"Beta Network Ports Overview 54000 UDP: For live network activity 54000 TCP: For bootstrap network activity 55000 TCP: For communication with RPC server. Anyone with access to this port can control your node's RPC.","title":"Beta network details simple"},{"location":"snippets/community-links/","text":"Nano.org | GitHub | Twitter | Discord | Reddit | Medium | Facebook | LinkedIn | YouTube | Instagram","title":"Community links"},{"location":"snippets/contributing-code/","text":"Contributing to the code If you are interested in helping develop the C++ based Nano node we will help you out! Check out our details on contributing code to the Nano node to get started.","title":"Contributing code"},{"location":"snippets/debug-only-command/","text":"Debug purposes only This call is for internal diagnostics/debug purposes only. Do not rely on this interface being stable and do not use in a production system.","title":"Debug only command"},{"location":"snippets/folder-contents/","text":"The Nano folder contains: wallets file (wallets.ldb), log files , ledger file (data.ldb), config file ( config.json ) and related lock files.","title":"Folder contents"},{"location":"snippets/folder-locations/","text":"OS Location Windows C: \\U sers \\< user> \\A ppData \\L ocal \\N ano \\ OSX /Users/<user>/Library/Nano/ Linux /home/<user>/Nano/","title":"Folder locations"},{"location":"snippets/hardware-recommendations/","text":"Hardware Recommendations \u00b6 Principal Representative Node \u00b6 The following are minimum recommended specifications for nodes with 0.1% or greater voting weight ( Principal Representatives ): 4GB RAM Quad-Core CPU 250 MB/s bandwidth (2TB of available monthly bandwidth) SSD-based hard drive Representative Node \u00b6 The following are minimum recommended specifications for nodes with less than 0.1% voting weight (regular Representatives ): 2GB RAM Dual-Core CPU 100 MB/s bandwidth (1TB of available monthly bandwidth) SSD-based hard drive Warning Various factors affect resource usage including how often RPC calls are made, other applications running on the machine, etc. These recommendations should be evaluated along with other considerations. Proof-of-Work Generation For nodes being used with services requiring regular or high volume sending and receiving of transactions, special considerations must be made for handling Proof-of-Work generation activities. GPUs provide much higher throughput than CPUs. Work peers can also be configured for generating work outside the node.","title":"Hardware recommendations"},{"location":"snippets/hardware-recommendations/#hardware-recommendations","text":"","title":"Hardware Recommendations"},{"location":"snippets/hardware-recommendations/#principal-representative-node","text":"The following are minimum recommended specifications for nodes with 0.1% or greater voting weight ( Principal Representatives ): 4GB RAM Quad-Core CPU 250 MB/s bandwidth (2TB of available monthly bandwidth) SSD-based hard drive","title":"Principal Representative Node"},{"location":"snippets/hardware-recommendations/#representative-node","text":"The following are minimum recommended specifications for nodes with less than 0.1% voting weight (regular Representatives ): 2GB RAM Dual-Core CPU 100 MB/s bandwidth (1TB of available monthly bandwidth) SSD-based hard drive Warning Various factors affect resource usage including how often RPC calls are made, other applications running on the machine, etc. These recommendations should be evaluated along with other considerations. Proof-of-Work Generation For nodes being used with services requiring regular or high volume sending and receiving of transactions, special considerations must be made for handling Proof-of-Work generation activities. GPUs provide much higher throughput than CPUs. Work peers can also be configured for generating work outside the node.","title":"Representative Node"},{"location":"snippets/multiple-node-setups-warning/","text":"Warning - Multiple Node Setups Never use the same seed on multiple running nano_node instances at the same time. Multiple nano_nodes using the same seed can result in network race conditions that degrade performance for your personal accounts. In addition, Publishing transactions from two nodes with the same account at the same time may cause an account fork which requires a slower representative voting process. Similarly, if you are running a representative account on multiple nodes, they may publish conflicting votes, causing your representative to be ignored by the network. Performance degradation in enterprise environments may be significant.","title":"Multiple node setups warning"},{"location":"snippets/network-details-simple/","text":"Network Ports Overview 7075 UDP: For live network activity 7075 TCP: For bootstrap network activity 7076 TCP: For communication with RPC server. Do not expose this outside of your production environment. Anyone with access to this port can control your node's RPC.","title":"Network details simple"},{"location":"snippets/network-details/","text":"Network Details \u00b6 Port Type Default Details 7075 UDP Enabled Primary node activity port Port configurable in config.json:node/peering_port Binds to all adapters, unicast Contents: Raw nano protocol datagrams All standard ledger activity goes through this port If blocked the node will not function 7075 TCP Enabled Node bootstrapping server Share port configuration in config.json:node/peering_port Binds to all adapters, unicast Contents: Raw nano protocol stream Transmits the ledger to new nodes in bulk If blocked other nodes will not be able retrieve the ledger from this node 7076 TCP Disabled RPC server Port configurable in config.json:rpc/port Enable in config.json:rpc_enable Binds to localhost by default for security reasons, configurable in config.json:rpc/address , unicast Contents: Unencrypted HTTP requests containing JSON object bodies Allows the node to be queried or controlled through HTTP requests If blocked the node will not be able to be queried or controlled by HTTP","title":"Network details"},{"location":"snippets/network-details/#network-details","text":"Port Type Default Details 7075 UDP Enabled Primary node activity port Port configurable in config.json:node/peering_port Binds to all adapters, unicast Contents: Raw nano protocol datagrams All standard ledger activity goes through this port If blocked the node will not function 7075 TCP Enabled Node bootstrapping server Share port configuration in config.json:node/peering_port Binds to all adapters, unicast Contents: Raw nano protocol stream Transmits the ledger to new nodes in bulk If blocked other nodes will not be able retrieve the ledger from this node 7076 TCP Disabled RPC server Port configurable in config.json:rpc/port Enable in config.json:rpc_enable Binds to localhost by default for security reasons, configurable in config.json:rpc/address , unicast Contents: Unencrypted HTTP requests containing JSON object bodies Allows the node to be queried or controlled through HTTP requests If blocked the node will not be able to be queried or controlled by HTTP","title":"Network Details"},{"location":"snippets/only-official-builds-supported/","text":"Only Official Builds Supported The fastest and most recommended method of installation is through Docker management Only official release builds are recommended and supported for use on the main network Builds created from git should be done using the available tags - building from branches is not recommended, including building off the master branch as that is used during development of features","title":"Only official builds supported"},{"location":"snippets/unsupported-configuration/","text":"Unsupported configuration This documentation is intended only for developers of the Nano Node software, and will not result in a supported configuration. End-users are advised to use releases. The fastest and most recommended method of installation is through Docker . Running node as a service . To manage a node, use RPC commands or the CLI .","title":"Unsupported configuration"},{"location":"what-is-nano/contributing/","text":"Contributing to Nano \u00b6 Running a Node \u00b6 At the core of the Nano network are nodes that help manage and achieve consensus on changes to the ledger. With a variety of configuration options, nodes can be setup and tuned to participate in different processes on the network: Non-voting nodes can be used to follow transactions and assist other nodes with bootstrapping Representative nodes publish vote message which validates transactions on the network Principal representatives are representatives who have sufficient vote weight so the network rebroadcasts their votes to other nodes Head over to the Running a Node section to find out more about the different node setups. Building tools and services \u00b6 If you're a developer and want to build using Nano you've come to the right place. Learn how Running a Node works. If you have already started running a node, head on over to the Integration Guides for some great examples that will help you in your journey. There are tons of great projects built on top of Nano: tipbots, wallets, payment processors, pay walls, payment activated hardware installations and so much more - show off what you can build! Helping out further \u00b6 If you have an interest in helping the network or community in other capacities, please don't hesitate to reach out. Below are links to our website and community. Nano.org | GitHub | Twitter | Discord | Reddit | Medium | Facebook | LinkedIn | YouTube | Instagram Contributing to the code If you are interested in helping develop the C++ based Nano node we will help you out! Check out our details on contributing code to the Nano node to get started.","title":"Contributing"},{"location":"what-is-nano/contributing/#contributing-to-nano","text":"","title":"Contributing to Nano"},{"location":"what-is-nano/contributing/#running-a-node","text":"At the core of the Nano network are nodes that help manage and achieve consensus on changes to the ledger. With a variety of configuration options, nodes can be setup and tuned to participate in different processes on the network: Non-voting nodes can be used to follow transactions and assist other nodes with bootstrapping Representative nodes publish vote message which validates transactions on the network Principal representatives are representatives who have sufficient vote weight so the network rebroadcasts their votes to other nodes Head over to the Running a Node section to find out more about the different node setups.","title":"Running a Node"},{"location":"what-is-nano/contributing/#building-tools-and-services","text":"If you're a developer and want to build using Nano you've come to the right place. Learn how Running a Node works. If you have already started running a node, head on over to the Integration Guides for some great examples that will help you in your journey. There are tons of great projects built on top of Nano: tipbots, wallets, payment processors, pay walls, payment activated hardware installations and so much more - show off what you can build!","title":"Building tools and services"},{"location":"what-is-nano/contributing/#helping-out-further","text":"If you have an interest in helping the network or community in other capacities, please don't hesitate to reach out. Below are links to our website and community. Nano.org | GitHub | Twitter | Discord | Reddit | Medium | Facebook | LinkedIn | YouTube | Instagram Contributing to the code If you are interested in helping develop the C++ based Nano node we will help you out! Check out our details on contributing code to the Nano node to get started.","title":"Helping out further"},{"location":"what-is-nano/exploring-more/","text":"The Nano Foundation \u00b6 The Nano Foundation is a non-profit organization dedicated to helping develop the Nano protocol. If you're looking for more information about the Nano Foundation operations and other non-technical details, head over to Nano.org . Join the community \u00b6 We also have a large and talented community who are actively building on top of the Nano network. Connect on your favorite social channels: Nano.org | GitHub | Twitter | Discord | Reddit | Medium | Facebook | LinkedIn | YouTube | Instagram","title":"Exploring More"},{"location":"what-is-nano/exploring-more/#the-nano-foundation","text":"The Nano Foundation is a non-profit organization dedicated to helping develop the Nano protocol. If you're looking for more information about the Nano Foundation operations and other non-technical details, head over to Nano.org .","title":"The Nano Foundation"},{"location":"what-is-nano/exploring-more/#join-the-community","text":"We also have a large and talented community who are actively building on top of the Nano network. Connect on your favorite social channels: Nano.org | GitHub | Twitter | Discord | Reddit | Medium | Facebook | LinkedIn | YouTube | Instagram","title":"Join the community"},{"location":"what-is-nano/overview/","text":"What is Nano? \u00b6 Nano is a digital payment protocol designed to be accessible and lightweight, with a focus on removing inefficiencies present in other cryptocurrencies. With ultrafast transactions and zero fees on a secure, green and decentralized network, this makes Nano ideal for everyday transactions. How do transactions work? \u00b6 Nano utilizes the Block Lattice , a data-structure in which individual accounts control their own blockchain. This allows blocks to be added quickly without conflict and sent to the network for confirmation. Transactions occur between accounts with two separate actions: The sender publishes a block debiting their own account for the amount to be sent to the receiving account The receiver publishes a matching block crediting their own account for the amount sent Once a block sending funds is confirmed by the network, the transaction goes into a pending state and cannot be reversed. The receiver can be offline and safely leave the funds in this state until they are ready to publish a matching block receiving the funds to their account. Lightweight, stateful blocks \u00b6 Nano uses a structure for each block which contains all the information about an account at that point in time: account number, balance, representative. Every block must also contain a small, user-generated Proof-of-Work value which is a Quality-of-Service prioritization mechanism allowing occasional, average user transactions to process quickly and consistently. The PoW computation for a transaction typically takes a few seconds on a modern desktop CPU. For more details, see the Blocks and Proof-of-Work specifications in our Integration Guides . Representatives and Voting \u00b6 Nano has a unique consensus mechanism called Open Representative Voting (ORV) . Every account can freely choose a Representative at any time to vote on their behalf, even when the delegating account itself is offline. These Representative accounts are configured on nodes that remain online and vote on the validity of transactions they see on the network. Their voting weight is the sum of balances for accounts delegating to them, and if they have enough voting weight they become a Principal Representative . The votes these Principal Representatives send out will subsequently be rebroadcasted by other nodes. As these votes are shared and rebroadcasted between nodes, they are tallied up and compared against the online voting weight available. Once a node sees a block get enough votes to reach quorum , that block is confirmed. Due to the lightweight nature of blocks and votes, the network is able to reach confirmation for transaction ultrafast, often in under a couple seconds. Also note that delegation of voting weight does not mean staking of any funds - the account delegating can still spend all their available funds at any time without restrictions. Because Nano accounts can freely delegate their voting weight to representatives at any time, the users have more control over who has power with consensus and how decentralized the network is. This is a key advantage to the design of Open Representative Voting (ORV) . With no direct monetary incentive for nodes, this removes emergent centralization forces for longer-term trending toward decentralization of the network. 1 Design Advantages \u00b6 Nano was designed with new data structures, consensus mechanisms and other features to gain some key advantages over competing digital currencies: Minimal block size allows for lightweight communication resulting in ultrafast transaction confirmation times Without traditional Proof-of-Work and mining, nodes use significantly less energy per transaction than other popular networks Emergent centralization forces for node operators are reduced due to the near zero marginal cost of producing consensus in Nano 1 For a more detailed look at the design of various protocol features, head to over to the Protocol Design Overview . https://medium.com/@clemahieu/emergent-centralization-due-to-economies-of-scale-83cc85a7cbef \u21a9 \u21a9","title":"Overview"},{"location":"what-is-nano/overview/#what-is-nano","text":"Nano is a digital payment protocol designed to be accessible and lightweight, with a focus on removing inefficiencies present in other cryptocurrencies. With ultrafast transactions and zero fees on a secure, green and decentralized network, this makes Nano ideal for everyday transactions.","title":"What is Nano?"},{"location":"what-is-nano/overview/#how-do-transactions-work","text":"Nano utilizes the Block Lattice , a data-structure in which individual accounts control their own blockchain. This allows blocks to be added quickly without conflict and sent to the network for confirmation. Transactions occur between accounts with two separate actions: The sender publishes a block debiting their own account for the amount to be sent to the receiving account The receiver publishes a matching block crediting their own account for the amount sent Once a block sending funds is confirmed by the network, the transaction goes into a pending state and cannot be reversed. The receiver can be offline and safely leave the funds in this state until they are ready to publish a matching block receiving the funds to their account.","title":"How do transactions work?"},{"location":"what-is-nano/overview/#lightweight-stateful-blocks","text":"Nano uses a structure for each block which contains all the information about an account at that point in time: account number, balance, representative. Every block must also contain a small, user-generated Proof-of-Work value which is a Quality-of-Service prioritization mechanism allowing occasional, average user transactions to process quickly and consistently. The PoW computation for a transaction typically takes a few seconds on a modern desktop CPU. For more details, see the Blocks and Proof-of-Work specifications in our Integration Guides .","title":"Lightweight, stateful blocks"},{"location":"what-is-nano/overview/#representatives-and-voting","text":"Nano has a unique consensus mechanism called Open Representative Voting (ORV) . Every account can freely choose a Representative at any time to vote on their behalf, even when the delegating account itself is offline. These Representative accounts are configured on nodes that remain online and vote on the validity of transactions they see on the network. Their voting weight is the sum of balances for accounts delegating to them, and if they have enough voting weight they become a Principal Representative . The votes these Principal Representatives send out will subsequently be rebroadcasted by other nodes. As these votes are shared and rebroadcasted between nodes, they are tallied up and compared against the online voting weight available. Once a node sees a block get enough votes to reach quorum , that block is confirmed. Due to the lightweight nature of blocks and votes, the network is able to reach confirmation for transaction ultrafast, often in under a couple seconds. Also note that delegation of voting weight does not mean staking of any funds - the account delegating can still spend all their available funds at any time without restrictions. Because Nano accounts can freely delegate their voting weight to representatives at any time, the users have more control over who has power with consensus and how decentralized the network is. This is a key advantage to the design of Open Representative Voting (ORV) . With no direct monetary incentive for nodes, this removes emergent centralization forces for longer-term trending toward decentralization of the network. 1","title":"Representatives and Voting"},{"location":"what-is-nano/overview/#design-advantages","text":"Nano was designed with new data structures, consensus mechanisms and other features to gain some key advantages over competing digital currencies: Minimal block size allows for lightweight communication resulting in ultrafast transaction confirmation times Without traditional Proof-of-Work and mining, nodes use significantly less energy per transaction than other popular networks Emergent centralization forces for node operators are reduced due to the near zero marginal cost of producing consensus in Nano 1 For a more detailed look at the design of various protocol features, head to over to the Protocol Design Overview . https://medium.com/@clemahieu/emergent-centralization-due-to-economies-of-scale-83cc85a7cbef \u21a9 \u21a9","title":"Design Advantages"}]}